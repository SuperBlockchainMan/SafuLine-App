{"version":3,"sources":["views/Nft/market/components/BuySellModals/shared/styles.tsx","views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/BuySellModals/SellModal/types.ts","views/Nft/market/components/BuySellModals/SellModal/SellStage.tsx","views/Nft/market/components/BuySellModals/SellModal/styles.tsx","views/Nft/market/components/BuySellModals/SellModal/SetPriceStage.tsx","views/Nft/market/components/BuySellModals/SellModal/EditStage.tsx","views/Nft/market/components/BuySellModals/SellModal/RemoveStage.tsx","views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx","views/Nft/market/components/BuySellModals/SellModal/index.tsx","components/ProfileAvatarWithTeam.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/Profile/components/EditProfileModal/reducer.ts","views/Nft/market/Profile/hooks/useGetProfileCosts.ts","views/Nft/market/Profile/components/EditProfileModal/StartView.tsx","views/Nft/market/Profile/components/EditProfileModal/PauseProfileView.tsx","views/Nft/market/Profile/components/EditProfileModal/ChangeProfilePicView.tsx","views/Nft/market/Profile/components/EditProfileModal/ApproveCakeView.tsx","views/Nft/market/Profile/components/EditProfileModal/index.tsx","components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx","views/Nft/market/components/ProfileNftModal.tsx","views/Nft/market/components/BuySellModals/shared/ApproveAndConfirmStage.tsx","views/Nft/market/components/BuySellModals/shared/TransactionConfirmed.tsx","views/Nft/market/components/BuySellModals/shared/ConfirmStage.tsx","hooks/useApproveConfirmTransaction.ts","components/ApproveConfirmButtons.tsx"],"names":["RoundedImage","styled","Image","theme","radii","small","Divider","div","colors","cardBorder","HorizontalDivider","StepIndicator","Flex","success","disabled","secondary","textDisabled","NoNftsImage","SellingStage","SellStage","nftToSell","lowestPrice","continueToNextStage","continueToTransferStage","t","useTranslation","hasProfile","useProfile","itemPageUrlId","collectionAddress","toLowerCase","pancakeBunniesAddress","attributes","value","tokenId","useModal","EditProfileModal","onEditProfileModal","p","src","image","thumbnail","height","width","mr","flex","gridTemplateColumns","alignItems","bold","name","fontSize","color","textAlign","collectionName","justifyContent","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","px","mt","id","as","Link","external","variant","href","nftsBaseUrl","getBscScanLinkForNft","flexDirection","pb","mb","onClick","stagesWithBackButton","SET_PRICE","ADJUST_PRICE","APPROVE_AND_CONFIRM_SELL","CONFIRM_ADJUST_PRICE","REMOVE_FROM_MARKET","CONFIRM_REMOVE_FROM_MARKET","TRANSFER","CONFIRM_TRANSFER","StyledModal","Modal","stage","includes","textSubtle","GreyedOutContainer","Box","dropdown","RightAlignedInput","Input","BnbAmountCell","bnbAmount","bnbBusdPrice","useBNBBusdPrice","usdAmount","multiplyPriceByAmount","FeeAmountCell","creatorFee","tradingFee","totalFee","feeAmount","SetPriceStage","currentPrice","price","setPrice","inputRef","useRef","adjustedPriceIsTheSame","parseFloat","priceIsValid","Number","isNaN","useGetCollection","creatorFeeAsNumber","tradingFeeAsNumber","bnbPrice","priceAsFloat","priceInUsd","priceIsOutOfRange","useTooltip","percentage","placement","tooltip","tooltipVisible","targetRef","useEffect","current","focus","textTransform","scale","type","inputMode","ref","isWarning","onChange","e","target","minPrice","maxPrice","maxWidth","alignSelf","EditStage","continueToAdjustPriceStage","continueToRemoveFromMarketStage","marketData","currentAskPrice","RemoveStage","TransferStage","transferAddress","setTransferAddress","isInvalidTransferAddress","account","useWeb3React","transferAddressEqualsConnectedAddress","pt","placeholder","length","modalTitles","SELL","EDIT","TX_CONFIRMED","getToastText","SellModal","onDismiss","useState","setStage","confirmedTxHash","setConfirmedTxHash","useTheme","callWithGasPrice","useCallWithGasPrice","toastSuccess","useToast","collectionContract","useErc721CollectionContract","nftMarketContract","useNftMarketContract","dispatch","useAppDispatch","isAddress","useGetLowestPriceFromNft","dispatchSuccessAction","updateUserNft","location","NftLocation","WALLET","removeUserNft","FORSALE","useApproveConfirmTransaction","onRequiresApproval","a","isApprovedForAll","address","approvedForContract","onApprove","onApproveSuccess","receipt","Toast","txHash","transactionHash","onConfirm","methodName","askPrice","parseUnits","onSuccess","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","ApproveAndConfirmStage","TransactionConfirmed","ConfirmStage","TeamAvatar","img","card","background","mediaQueries","sm","AvatarWrapper","bg","AvatarInactive","NoProfileAvatarIcon","ProfileAvatarWithTeam","profile","nft","isActive","team","images","alt","useFetchUserNfts","isProfileInitialized","isInitialized","isProfileLoading","isLoading","userNftsInitializationState","useUserNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UserNftInitializationState","UNINITIALIZED","hasAccountSwitched","isEmpty","fetchUserNfts","Label","label","isDisabled","Body","Children","StyledBackgroundImage","SelectionCard","isChecked","children","props","isSuccess","checked","style","PageButtons","Arrow","primary","Avatar","md","StyledFlex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","FetchStatus","Fetched","to","display","lineHeight","truncateHash","Views","reducer","state","action","currentView","view","previousView","useEditProfile","useReducer","START","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious","useGetProfileCosts","setIsLoading","numberCakeToReactivate","ethers","BigNumber","from","numberCakeToRegister","numberCakeToUpdate","costs","setCosts","toastError","calls","map","method","getPancakeProfileAddress","multicallv2","profileABI","fetchCosts","DangerOutline","Button","attrs","failure","StartPage","cakeContract","useCake","useGetCakeBalance","cakeBalance","balance","fetchStatus","isProfileCostsLoading","needsApproval","setNeedsApproval","minimumCakeRequired","hasMinimumCakeRequired","gte","allowance","response","lt","checkApprovalStatus","minimum","formatBigNumber","PauseProfilePage","isAcknowledged","setIsAcknowledged","setIsConfirming","pancakeProfileContract","useProfileContract","handleDeactivateProfile","tx","wait","status","fetchProfile","cost","htmlFor","cursor","marginBottom","ml","endIcon","spin","ChangeProfilePicPage","selectedNft","setSelectedNft","nfts","profileContract","library","nftsInWallet","filter","contract","getErc721Contract","getSigner","isConfirmed","maxHeight","overflowY","walletNft","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","ApproveCakePage","setIsApproving","approve","mul","viewTitle","isStartView","handleBack","hideCloseButton","StartView","PauseProfileView","ChangeProfilePicView","ApproveCakeView","GridItem","LoadingRow","useMatchBreakpoints","isXs","isSm","TableLoader","ActivityEventText","marketEvent","events","MarketEvent","NEW","text","CANCEL","MODIFY","BUY","default","MobileModal","activity","localeTimestamp","isUserActivity","chainId","useActiveWeb3React","otherParty","seller","buyer","getBscScanLink","ActivityPrice","justifySelf","ActivityRow","isNftActivity","timestampAsMs","timestamp","Date","year","month","day","hour","minute","onPresentMobileModal","isPBCollection","find","attribute","traitType","event","stopPropagation","TextWrapper","ProfileNftModal","py","size","initialState","approvalState","confirmState","actions","noop","handlePreApprove","then","result","hasApproveFailed","hasConfirmFailed","logError","params","ButtonArrangement","StyledApproveConfirmButtonRow","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","ChevronBottom","ChevronDownIcon","spinnerIcon","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText"],"mappings":"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","file":"static/js/2.d5c2c1e9.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport { Flex, Image } from '@pancakeswap/uikit'\n\nexport const RoundedImage = styled(Image)`\n  border-radius: ${({ theme }) => theme.radii.small};\n  overflow: hidden;\n`\n\nexport const Divider = styled.div`\n  margin: 16px 0;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const HorizontalDivider = styled.div`\n  border-right: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const StepIndicator = styled(Flex)<{ success: boolean; disabled?: boolean }>`\n  border-radius: 50%;\n  background-color: ${({ theme, success, disabled }) => {\n    if (disabled) {\n      return 'none'\n    }\n    return success ? theme.colors.success : theme.colors.secondary\n  }};\n  border: ${({ theme, disabled }) => (disabled ? `1px solid ${theme.colors.textDisabled}` : 'none')};\n  height: 32px;\n  width: 32px;\n  justify-content: center;\n  align-items: center;\n  margin-right: 8px;\n`\n","import styled from 'styled-components'\n\nconst NoNftsImage = styled.div`\n  background: url('/images/nfts/no-profile-md.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default NoNftsImage\n","export enum SellingStage {\n  // Sell flow\n  SELL,\n  SET_PRICE,\n  APPROVE_AND_CONFIRM_SELL,\n  // Adjust price flow\n  EDIT,\n  ADJUST_PRICE,\n  CONFIRM_ADJUST_PRICE,\n  // Remove from market flow\n  REMOVE_FROM_MARKET,\n  CONFIRM_REMOVE_FROM_MARKET,\n  // Transfer flow\n  TRANSFER,\n  CONFIRM_TRANSFER,\n  // Common\n  TX_CONFIRMED,\n}\n","import React from 'react'\nimport { Flex, Grid, Text, Button, Link, BinanceIcon, LinkExternal, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\nimport { useProfile } from 'state/profile/hooks'\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\n\ninterface SellStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  continueToNextStage: () => void\n  continueToTransferStage: () => void\n}\n\n// Initial stage when user wants to put their NFT for sale or transfer to another wallet\nconst SellStage: React.FC<SellStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  continueToNextStage,\n  continueToTransferStage,\n}) => {\n  const { t } = useTranslation()\n  const { hasProfile } = useProfile()\n  const itemPageUrlId =\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n      ? nftToSell.attributes[0].value\n      : nftToSell.tokenId\n\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  return (\n    <>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>\n                  {lowestPrice.toLocaleString(undefined, {\n                    minimumFractionDigits: 3,\n                    maximumFractionDigits: 3,\n                  })}\n                </Text>\n              </Flex>\n            </>\n          )}\n        </Grid>\n      </Flex>\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\n        <Flex flex=\"2\">\n          <Text small color=\"textSubtle\">\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" flex=\"3\">\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\n          >\n            {t('View Item')}\n          </Button>\n          <HorizontalDivider />\n          <LinkExternal\n            p=\"0px\"\n            height=\"16px\"\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\n          >\n            BscScan\n          </LinkExternal>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToNextStage}>\n          {t('Sell')}\n        </Button>\n        <Button mb=\"8px\" variant=\"secondary\" onClick={continueToTransferStage}>\n          {t('Transfer')}\n        </Button>\n        {hasProfile && (\n          <Button variant=\"secondary\" onClick={onEditProfileModal}>\n            {t('Set as Profile Pic')}\n          </Button>\n        )}\n      </Flex>\n    </>\n  )\n}\n\nexport default SellStage\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Box, Flex, Text, BinanceIcon, Input } from '@pancakeswap/uikit'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { SellingStage } from './types'\n\nexport const stagesWithBackButton = [\n  SellingStage.SET_PRICE,\n  SellingStage.ADJUST_PRICE,\n  SellingStage.APPROVE_AND_CONFIRM_SELL,\n  SellingStage.CONFIRM_ADJUST_PRICE,\n  SellingStage.REMOVE_FROM_MARKET,\n  SellingStage.CONFIRM_REMOVE_FROM_MARKET,\n  SellingStage.TRANSFER,\n  SellingStage.CONFIRM_TRANSFER,\n]\n\nexport const StyledModal = styled(Modal)<{ stage: SellingStage }>`\n  width: 360px;\n  & > div:last-child {\n    padding: 0;\n  }\n  & h2:first-of-type {\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `color: ${theme.colors.textSubtle}` : null)};\n  }\n  & svg:first-of-type {\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `fill: ${theme.colors.textSubtle}` : null)};\n  }\n`\n\nexport const GreyedOutContainer = styled(Box)`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  padding: 16px;\n`\n\nexport const RightAlignedInput = styled(Input)`\n  text-align: right;\n`\n\ninterface BnbAmountCellProps {\n  bnbAmount: number\n}\n\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  if (!bnbAmount || bnbAmount === 0) {\n    return (\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\n        <Text bold mr=\"4px\">\n          -\n        </Text>\n      </Flex>\n    )\n  }\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\n      <Text bold mr=\"4px\">{`${bnbAmount.toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 3,\n      })}`}</Text>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        {`($${usdAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}\n      </Text>\n    </Flex>\n  )\n}\n\ninterface FeeAmountCellProps {\n  bnbAmount: number\n  creatorFee: number\n  tradingFee: number\n}\n\nexport const FeeAmountCell: React.FC<FeeAmountCellProps> = ({ bnbAmount, creatorFee, tradingFee }) => {\n  if (!bnbAmount || bnbAmount === 0) {\n    return (\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\n        <Text bold mr=\"4px\">\n          -\n        </Text>\n      </Flex>\n    )\n  }\n\n  const totalFee = creatorFee + tradingFee\n  const totalFeeAsDecimal = totalFee / 100\n  const feeAmount = bnbAmount * totalFeeAsDecimal\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\n      <Text bold mr=\"4px\">{`${feeAmount.toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 6,\n      })}`}</Text>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        ({totalFee}%)\n      </Text>\n    </Flex>\n  )\n}\n","import React, { useEffect, useRef } from 'react'\nimport { Flex, Grid, Box, Text, Button, BinanceIcon, ErrorIcon, useTooltip } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { Divider } from '../shared/styles'\nimport { GreyedOutContainer, BnbAmountCell, RightAlignedInput, FeeAmountCell } from './styles'\n\ninterface SetPriceStageProps {\n  nftToSell: NftToken\n  variant: 'set' | 'adjust'\n  currentPrice?: string\n  lowestPrice?: number\n  price: string\n  setPrice: React.Dispatch<React.SetStateAction<string>>\n  continueToNextStage: () => void\n}\n\nconst MIN_PRICE = 0.005\nconst MAX_PRICE = 10000\n\n// Stage where user puts price for NFT they're about to put on sale\n// Also shown when user wants to adjust the price of already listed NFT\nconst SetPriceStage: React.FC<SetPriceStageProps> = ({\n  nftToSell,\n  variant,\n  lowestPrice,\n  currentPrice,\n  price,\n  setPrice,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const inputRef = useRef<HTMLInputElement>()\n  const adjustedPriceIsTheSame = variant === 'adjust' && parseFloat(currentPrice) === parseFloat(price)\n  const priceIsValid = !price || Number.isNaN(parseFloat(price)) || parseFloat(price) <= 0\n\n  const { creatorFee, tradingFee } = useGetCollection(nftToSell.collectionAddress)\n  const creatorFeeAsNumber = parseFloat(creatorFee)\n  const tradingFeeAsNumber = parseFloat(tradingFee)\n  const bnbPrice = useBNBBusdPrice()\n  const priceAsFloat = parseFloat(price)\n  const priceInUsd = multiplyPriceByAmount(bnbPrice, priceAsFloat)\n\n  const priceIsOutOfRange = priceAsFloat > MAX_PRICE || priceAsFloat < MIN_PRICE\n\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    <>\n      <Text>\n        {t(\n          'When selling NFTs from this collection, a portion of the BNB paid will be diverted before reaching the seller:',\n        )}\n      </Text>\n      {creatorFeeAsNumber > 0 && (\n        <Text>{t('%percentage%% royalties to the collection owner', { percentage: creatorFee })}</Text>\n      )}\n      <Text>{t('%percentage%% trading fee will be used to buy & burn CAKE', { percentage: tradingFee })}</Text>\n    </>,\n    { placement: 'auto' },\n  )\n\n  useEffect(() => {\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }, [inputRef])\n\n  const getButtonText = () => {\n    if (variant === 'adjust') {\n      if (adjustedPriceIsTheSame || priceIsValid) {\n        return t('Input New Sale Price')\n      }\n      return t('Confirm')\n    }\n    return t('Enable Listing')\n  }\n  return (\n    <>\n      <Text fontSize=\"24px\" bold p=\"16px\">\n        {variant === 'set' ? t('Set Price') : t('Adjust Sale Price')}\n      </Text>\n      <GreyedOutContainer>\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\n          {t('Set Price')}\n        </Text>\n        <Flex>\n          <Flex flex=\"1\" alignItems=\"center\">\n            <BinanceIcon width={24} height={24} mr=\"4px\" />\n            <Text bold>WBNB</Text>\n          </Flex>\n          <Flex flex=\"2\">\n            <RightAlignedInput\n              scale=\"sm\"\n              type=\"number\"\n              inputMode=\"decimal\"\n              value={price}\n              ref={inputRef}\n              isWarning={priceIsOutOfRange}\n              onChange={(e) => setPrice(e.target.value)}\n            />\n          </Flex>\n        </Flex>\n        <Flex alignItems=\"center\" height=\"21px\" justifyContent=\"flex-end\">\n          {!Number.isNaN(priceInUsd) && (\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`$${priceInUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\n            </Text>\n          )}\n        </Flex>\n        {priceIsOutOfRange && (\n          <Text fontSize=\"12px\" color=\"failure\">\n            {t('Allowed price range is between %minPrice% and %maxPrice% WBNB', {\n              minPrice: MIN_PRICE,\n              maxPrice: MAX_PRICE,\n            })}\n          </Text>\n        )}\n        <Flex mt=\"8px\">\n          <Text small color=\"textSubtle\" mr=\"8px\">\n            {t('Seller pays %percentage%% platform fee on sale', {\n              percentage: creatorFeeAsNumber + tradingFeeAsNumber,\n            })}\n          </Text>\n          <span ref={targetRef}>\n            <ErrorIcon />\n          </span>\n          {tooltipVisible && tooltip}\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\n          <Text small color=\"textSubtle\">\n            {t('Platform fee if sold')}\n          </Text>\n          <FeeAmountCell bnbAmount={priceAsFloat} creatorFee={creatorFeeAsNumber} tradingFee={tradingFeeAsNumber} />\n        </Flex>\n        {lowestPrice && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\n            <Text small color=\"textSubtle\">\n              {t('Lowest price on market')}\n            </Text>\n            <BnbAmountCell bnbAmount={lowestPrice} />\n          </Flex>\n        )}\n      </GreyedOutContainer>\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\n        <Flex alignSelf=\"flex-start\">\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\n        </Flex>\n        <Box>\n          <Text small color=\"textSubtle\">\n            {t('The NFT will be removed from your wallet and put on sale at this price.')}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {t('Sales are in WBNB. You can swap WBNB to BNB 1:1 for free with PancakeSwap.')}\n          </Text>\n        </Box>\n      </Grid>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button\n          mb=\"8px\"\n          onClick={continueToNextStage}\n          disabled={priceIsValid || adjustedPriceIsTheSame || priceIsOutOfRange}\n        >\n          {getButtonText()}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default SetPriceStage\n","import React from 'react'\nimport { Flex, Grid, Text, Button, Link, LinkExternal, BinanceIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\n\ninterface EditStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  continueToAdjustPriceStage: () => void\n  continueToRemoveFromMarketStage: () => void\n}\n\n// Initial stage when user wants to edit already listed NFT (i.e. adjust price or remove from sale)\nconst EditStage: React.FC<EditStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  continueToAdjustPriceStage,\n  continueToRemoveFromMarketStage,\n}) => {\n  const { t } = useTranslation()\n  const itemPageUrlId =\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n      ? nftToSell.attributes[0].value\n      : nftToSell.tokenId\n\n  return (\n    <>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>{lowestPrice}</Text>\n              </Flex>\n            </>\n          )}\n          <Text small color=\"textSubtle\">\n            {t('Your price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\n            <Text small>{nftToSell.marketData.currentAskPrice}</Text>\n          </Flex>\n        </Grid>\n      </Flex>\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\n        <Flex flex=\"2\">\n          <Text small color=\"textSubtle\">\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" flex=\"3\">\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\n          >\n            {t('View Item')}\n          </Button>\n          <HorizontalDivider />\n          <LinkExternal\n            p=\"0px\"\n            height=\"16px\"\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\n          >\n            BscScan\n          </LinkExternal>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToAdjustPriceStage}>\n          {t('Adjust Sale Price')}\n        </Button>\n        <Button variant=\"danger\" onClick={continueToRemoveFromMarketStage}>\n          {t('Remove from Market')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default EditStage\n","import React from 'react'\nimport { Flex, Box, Text, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Divider } from '../shared/styles'\n\ninterface RemoveStageProps {\n  continueToNextStage: () => void\n}\n\nconst RemoveStage: React.FC<RemoveStageProps> = ({ continueToNextStage }) => {\n  const { t } = useTranslation()\n  return (\n    <>\n      <Box p=\"16px\" maxWidth=\"360px\">\n        <Text fontSize=\"24px\" bold>\n          {t('Remove from Market')}\n        </Text>\n        <Text mt=\"24px\" color=\"textSubtle\">\n          {t('Removing this NFT from the marketplace will return it to your wallet.')}\n        </Text>\n        <Text mt=\"16px\" color=\"textSubtle\">\n          {t('Continue?')}\n        </Text>\n      </Box>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToNextStage}>\n          {t('Confirm')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default RemoveStage\n","import React from 'react'\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftToken } from 'state/nftMarket/types'\nimport { Divider, RoundedImage } from '../shared/styles'\nimport { GreyedOutContainer } from './styles'\n\ninterface TransferStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  transferAddress: string\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\n  isInvalidTransferAddress: boolean\n  continueToNextStage: () => void\n}\n\nconst TransferStage: React.FC<TransferStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  transferAddress,\n  setTransferAddress,\n  isInvalidTransferAddress,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\n  const getErrorText = () => {\n    if (isInvalidTransferAddress) {\n      return t('That’s not a Binance Smart Chain wallet address.')\n    }\n    if (transferAddressEqualsConnectedAddress) {\n      return t('This address is the one that is currently connected')\n    }\n    return null\n  }\n  return (\n    <>\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\n        {t('Transfer to New Wallet')}\n      </Text>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>{lowestPrice}</Text>\n              </Flex>\n            </>\n          )}\n        </Grid>\n      </Flex>\n      <GreyedOutContainer>\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\n          {t('Receiving address')}\n        </Text>\n        <Input\n          scale=\"sm\"\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\n          placeholder={t('Paste BSC address')}\n          value={transferAddress}\n          onChange={(e) => setTransferAddress(e.target.value)}\n        />\n        {isInvalidTransferAddress ||\n          (transferAddressEqualsConnectedAddress && (\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\n              {getErrorText()}\n            </Text>\n          ))}\n      </GreyedOutContainer>\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\n        <Flex alignSelf=\"flex-start\">\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\n        </Flex>\n        <Text small color=\"textSubtle\">\n          {t('This action will send your NFT to the address you have indicated above. Make sure it’s the correct')}\n        </Text>\n      </Grid>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button\n          mb=\"8px\"\n          onClick={continueToNextStage}\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\n        >\n          {t('Confirm')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default TransferStage\n","import React, { useState } from 'react'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { parseUnits } from 'ethers/lib/utils'\nimport useTheme from 'hooks/useTheme'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useTranslation } from 'contexts/Localization'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { isAddress } from 'utils'\nimport { useErc721CollectionContract, useNftMarketContract } from 'hooks/useContract'\nimport { useAppDispatch } from 'state'\nimport { removeUserNft, updateUserNft } from 'state/nftMarket/reducer'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice'\nimport SellStage from './SellStage'\nimport SetPriceStage from './SetPriceStage'\nimport EditStage from './EditStage'\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\nimport { StyledModal, stagesWithBackButton } from './styles'\nimport { SellingStage } from './types'\nimport ConfirmStage from '../shared/ConfirmStage'\nimport RemoveStage from './RemoveStage'\nimport TransferStage from './TransferStage'\n\nexport const modalTitles = (stage: SellingStage, t: ContextApi['t']) => {\n  switch (stage) {\n    // Sell flow\n    case SellingStage.SELL:\n      return t('Details')\n    case SellingStage.SET_PRICE:\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\n      return t('Back')\n    // Adjust price flow\n    case SellingStage.EDIT:\n      return t('Details')\n    case SellingStage.ADJUST_PRICE:\n      return t('Back')\n    case SellingStage.CONFIRM_ADJUST_PRICE:\n      return t('Confirm transaction')\n    // Remove from market flow\n    case SellingStage.REMOVE_FROM_MARKET:\n      return t('Back')\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n      return t('Confirm transaction')\n    // Transfer flow\n    case SellingStage.TRANSFER:\n      return t('Back')\n    case SellingStage.CONFIRM_TRANSFER:\n      return t('Confirm transaction')\n    // Common\n    case SellingStage.TX_CONFIRMED:\n      return t('Transaction Confirmed')\n    default:\n      return ''\n  }\n}\n\nconst getToastText = (variant: string, stage: SellingStage, t: ContextApi['t']) => {\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n    return t('Your NFT has been returned to your wallet')\n  }\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\n    return t('Your NFT has been transferred to another wallet')\n  }\n  if (variant === 'sell') {\n    return t('Your NFT has been listed for sale!')\n  }\n  return t('Your NFT listing has been changed.')\n}\n\ninterface SellModalProps extends InjectedModalProps {\n  variant: 'sell' | 'edit'\n  nftToSell: NftToken\n}\n\nconst SellModal: React.FC<SellModalProps> = ({ variant, nftToSell, onDismiss }) => {\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT)\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell.marketData.currentAskPrice)\n  const [transferAddress, setTransferAddress] = useState('')\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { account } = useWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { toastSuccess } = useToast()\n  const collectionContract = useErc721CollectionContract(nftToSell.collectionAddress)\n  const nftMarketContract = useNftMarketContract()\n  const dispatch = useAppDispatch()\n\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress)\n\n  const { lowestPrice } = useGetLowestPriceFromNft(nftToSell)\n\n  const goBack = () => {\n    switch (stage) {\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.SELL)\n        break\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\n        setStage(SellingStage.SET_PRICE)\n        break\n      case SellingStage.ADJUST_PRICE:\n        setPrice(nftToSell.marketData.currentAskPrice)\n        setStage(SellingStage.EDIT)\n        break\n      case SellingStage.CONFIRM_ADJUST_PRICE:\n        setStage(SellingStage.ADJUST_PRICE)\n        break\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.EDIT)\n        break\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n        setStage(SellingStage.REMOVE_FROM_MARKET)\n        break\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.SELL)\n        break\n      case SellingStage.CONFIRM_TRANSFER:\n        setStage(SellingStage.TRANSFER)\n        break\n      default:\n        break\n    }\n  }\n\n  const continueToNextStage = () => {\n    switch (stage) {\n      case SellingStage.SELL:\n        setStage(SellingStage.SET_PRICE)\n        break\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL)\n        break\n      case SellingStage.EDIT:\n        setStage(SellingStage.ADJUST_PRICE)\n        break\n      case SellingStage.ADJUST_PRICE:\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE)\n        break\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET)\n        break\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.CONFIRM_TRANSFER)\n        break\n      default:\n        break\n    }\n  }\n\n  const continueToRemoveFromMarketStage = () => {\n    setStage(SellingStage.REMOVE_FROM_MARKET)\n  }\n\n  const continueToTransferStage = () => {\n    setStage(SellingStage.TRANSFER)\n  }\n\n  const dispatchSuccessAction = () => {\n    switch (stage) {\n      // Remove from sale\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n        dispatch(\n          updateUserNft({\n            tokenId: nftToSell.tokenId,\n            collectionAddress: nftToSell.collectionAddress,\n            location: NftLocation.WALLET,\n          }),\n        )\n        break\n      // Transfer NFT\n      case SellingStage.CONFIRM_TRANSFER:\n        dispatch(\n          removeUserNft({\n            tokenId: nftToSell.tokenId,\n          }),\n        )\n        break\n      default:\n        // Modify listing OR list for sale\n        dispatch(\n          updateUserNft({\n            tokenId: nftToSell.tokenId,\n            collectionAddress: nftToSell.collectionAddress,\n            location: NftLocation.FORSALE,\n          }),\n        )\n        break\n    }\n  }\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const approvedForContract = await collectionContract.isApprovedForAll(account, nftMarketContract.address)\n        return approvedForContract\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(collectionContract, 'setApprovalForAll', [nftMarketContract.address, true])\n    },\n    onApproveSuccess: async ({ receipt }) => {\n      toastSuccess(\n        t('Contract approved - you can now put your NFT for sale!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n    onConfirm: () => {\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId])\n      }\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\n        return callWithGasPrice(collectionContract, 'safeTransferFrom(address,address,uint256)', [\n          account,\n          transferAddress,\n          nftToSell.tokenId,\n        ])\n      }\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder'\n      const askPrice = parseUnits(price)\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice])\n    },\n    onSuccess: async ({ receipt }) => {\n      toastSuccess(getToastText(variant, stage, t), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      dispatchSuccessAction()\n      setConfirmedTxHash(receipt.transactionHash)\n      setStage(SellingStage.TX_CONFIRMED)\n    },\n  })\n\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving\n\n  return (\n    <StyledModal\n      title={modalTitles(stage, t)}\n      stage={stage}\n      onDismiss={onDismiss}\n      onBack={showBackButton ? goBack : null}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stage === SellingStage.SELL && (\n        <SellStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToNextStage={continueToNextStage}\n          continueToTransferStage={continueToTransferStage}\n        />\n      )}\n      {stage === SellingStage.SET_PRICE && (\n        <SetPriceStage\n          nftToSell={nftToSell}\n          variant=\"set\"\n          continueToNextStage={continueToNextStage}\n          lowestPrice={lowestPrice}\n          price={price}\n          setPrice={setPrice}\n        />\n      )}\n      {stage === SellingStage.APPROVE_AND_CONFIRM_SELL && (\n        <ApproveAndConfirmStage\n          variant=\"sell\"\n          isApproved={isApproved}\n          isApproving={isApproving}\n          isConfirming={isConfirming}\n          handleApprove={handleApprove}\n          handleConfirm={handleConfirm}\n        />\n      )}\n      {stage === SellingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\n      {stage === SellingStage.EDIT && (\n        <EditStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToAdjustPriceStage={continueToNextStage}\n          continueToRemoveFromMarketStage={continueToRemoveFromMarketStage}\n        />\n      )}\n      {stage === SellingStage.ADJUST_PRICE && (\n        <SetPriceStage\n          nftToSell={nftToSell}\n          variant=\"adjust\"\n          continueToNextStage={continueToNextStage}\n          currentPrice={nftToSell.marketData.currentAskPrice}\n          lowestPrice={lowestPrice}\n          price={price}\n          setPrice={setPrice}\n        />\n      )}\n      {stage === SellingStage.CONFIRM_ADJUST_PRICE && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n      {stage === SellingStage.REMOVE_FROM_MARKET && <RemoveStage continueToNextStage={continueToNextStage} />}\n      {stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n      {stage === SellingStage.TRANSFER && (\n        <TransferStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToNextStage={continueToNextStage}\n          transferAddress={transferAddress}\n          setTransferAddress={setTransferAddress}\n          isInvalidTransferAddress={isInvalidTransferAddress}\n        />\n      )}\n      {stage === SellingStage.CONFIRM_TRANSFER && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n    </StyledModal>\n  )\n}\n\nexport default SellModal\n","import React from 'react'\nimport { NoProfileAvatarIcon } from '@pancakeswap/uikit'\nimport { Profile } from 'state/types'\nimport styled from 'styled-components'\n\nexport interface ProfileAvatarProps {\n  profile: Profile\n}\n\nconst TeamAvatar = styled.img`\n  border: 1px solid ${({ theme }) => theme.card.background};\n  border-radius: 50%;\n  bottom: 0px;\n  position: absolute;\n  right: 0px;\n  min-width: 20px;\n  min-height: 20px;\n  width: 37.5%;\n  height: 37.5%;\n  z-index: 5;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    border-width: 2px;\n  }\n`\n\nconst AvatarWrapper = styled.div<{ bg: string }>`\n  background: url('${({ bg }) => bg}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 100%;\n  height: 100%;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n// TODO: replace with no profile avatar icon\nconst AvatarInactive = styled(NoProfileAvatarIcon)`\n  width: 100%;\n  height: 100%;\n`\n\nconst ProfileAvatarWithTeam: React.FC<ProfileAvatarProps> = ({ profile }) => {\n  return (\n    <AvatarWrapper bg={profile.nft?.image.thumbnail}>\n      {!profile.isActive && <AvatarInactive />}\n      <TeamAvatar src={`/images/teams/${profile.team.images.alt}`} alt={profile.team.name} />\n    </AvatarWrapper>\n  )\n}\n\nexport default ProfileAvatarWithTeam\n","import { useEffect, useMemo } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useProfile } from 'state/profile/hooks'\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useFetchUserNfts = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\n  const { userNftsInitializationState } = useUserNfts()\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\n\n  // Fetch on first load when profile fetch is resolved\n  const shouldFetch =\n    account &&\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\n    isProfileInitialized &&\n    !isProfileLoading\n\n  // Fetch on account / profile change, once profile fetch is resolved\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\n\n  useEffect(() => {\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\n    }\n  }, [\n    dispatch,\n    account,\n    shouldFetch,\n    hasAccountSwitched,\n    profileNftTokenId,\n    collections,\n    profileNftWithCollectionAddress,\n  ])\n}\n\nexport default useFetchUserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Radio } from '@pancakeswap/uikit'\n\ninterface SelectionCardProps {\n  name: string\n  value: string | number\n  isChecked?: boolean\n  onChange: (val: any) => void\n  image: string\n  disabled?: boolean\n}\n\nconst Label = styled.label<{ isDisabled: boolean }>`\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\n`\n\nconst Body = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  height: 80px;\n  padding: 8px 16px;\n`\n\nconst Children = styled.div`\n  margin-left: 16px;\n`\n\nconst StyledBackgroundImage = styled.div<{ src: string }>`\n  align-self: stretch;\n  background-image: url('${({ src }) => src}');\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 80px;\n`\n\nconst SelectionCard: React.FC<SelectionCardProps> = ({\n  name,\n  value,\n  isChecked = false,\n  image,\n  onChange,\n  disabled,\n  children,\n  ...props\n}) => {\n  return (\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\n      <Label isDisabled={disabled}>\n        <Body>\n          <Radio\n            name={name}\n            checked={isChecked}\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n            disabled={disabled}\n            style={{ flex: 'none' }}\n          />\n          <Children>{children}</Children>\n        </Body>\n        <StyledBackgroundImage src={image} />\n      </Label>\n    </Card>\n  )\n}\n\nexport default SelectionCard\n","import styled from 'styled-components'\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport truncateHash from 'utils/truncateHash'\nimport { FetchStatus } from 'config/constants/types'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport { Link } from 'react-router-dom'\nimport { nftsBaseUrl } from '../constants'\n\nconst Avatar = styled.img`\n  margin-right: 4px;\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 12px;\n  }\n`\n\nconst StyledFlex = styled(Flex)`\n  align-items: center;\n  transition: opacity 200ms ease-in;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\n  const profileName = username || '-'\n\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n  if (avatarFetchStatus === FetchStatus.Fetched) {\n    if (profileNft?.image?.thumbnail) {\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\n    } else {\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n    }\n  }\n\n  return (\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\n      <StyledFlex>\n        {sellerProfilePicComponent}\n        <Box display=\"inline\">\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\n          {usernameFetchStatus !== FetchStatus.Fetched ? <Skeleton /> : <Text lineHeight=\"1.25\">{profileName}</Text>}\n        </Box>\n      </StyledFlex>\n    </Link>\n  )\n}\n\nexport default ProfileCell\n","import { useReducer } from 'react'\n\nexport enum Views {\n  START = 'start',\n  CHANGE = 'change',\n  REMOVE = 'remove',\n  APPROVE = 'approve',\n}\n\nexport type Actions =\n  | {\n      type: 'set_view'\n      view: Views\n    }\n  | {\n      type: 'go_previous'\n    }\n\nexport interface State {\n  currentView: Views\n  previousView: Views | null\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'set_view':\n      return {\n        ...state,\n        currentView: action.view,\n        previousView: state.currentView,\n      }\n    case 'go_previous':\n      return {\n        ...state,\n        currentView: state.previousView,\n        previousView: state.currentView,\n      }\n    default:\n      return state\n  }\n}\n\nexport interface UseEditProfileResponse extends State {\n  goToStart: () => void\n  goToChange: () => void\n  goToApprove: () => void\n  goToRemove: () => void\n  goPrevious: () => void\n}\n\nconst useEditProfile = (): UseEditProfileResponse => {\n  const [state, dispatch] = useReducer(reducer, {\n    currentView: Views.START,\n    previousView: null,\n  })\n\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\n  const goPrevious = () => dispatch({ type: 'go_previous' })\n\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\n}\n\nexport default useEditProfile\n","import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useTranslation } from 'contexts/Localization'\nimport { multicallv2 } from 'utils/multicall'\nimport profileABI from 'config/abi/pancakeProfile.json'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport useToast from 'hooks/useToast'\n\nconst useGetProfileCosts = () => {\n  const { t } = useTranslation()\n  const [isLoading, setIsLoading] = useState(true)\n  const [costs, setCosts] = useState({\n    numberCakeToReactivate: ethers.BigNumber.from(0),\n    numberCakeToRegister: ethers.BigNumber.from(0),\n    numberCakeToUpdate: ethers.BigNumber.from(0),\n  })\n  const { toastError } = useToast()\n\n  useEffect(() => {\n    const fetchCosts = async () => {\n      try {\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map((method) => ({\n          address: getPancakeProfileAddress(),\n          name: method,\n        }))\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2<\n          [[ethers.BigNumber], [ethers.BigNumber], [ethers.BigNumber]]\n        >(profileABI, calls)\n\n        setCosts({\n          numberCakeToReactivate,\n          numberCakeToRegister,\n          numberCakeToUpdate,\n        })\n        setIsLoading(false)\n      } catch (error) {\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'))\n      }\n    }\n\n    fetchCosts()\n  }, [setCosts, toastError, t])\n\n  return { costs, isLoading }\n}\n\nexport default useGetProfileCosts\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Flex, Text, InjectedModalProps } from '@pancakeswap/uikit'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { useCake } from 'hooks/useContract'\nimport { useGetCakeBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\nimport { FetchStatus } from 'config/constants/types'\nimport { useProfile } from 'state/profile/hooks'\nimport ProfileAvatarWithTeam from 'components/ProfileAvatarWithTeam'\nimport { UseEditProfileResponse } from './reducer'\n\ninterface StartPageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n  goToRemove: UseEditProfileResponse['goToRemove']\n  goToApprove: UseEditProfileResponse['goToApprove']\n}\n\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\n  border-color: ${({ theme }) => theme.colors.failure};\n  color: ${({ theme }) => theme.colors.failure};\n  margin-bottom: 24px;\n\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\n    border-color: ${({ theme }) => theme.colors.failure};\n    opacity: 0.8;\n  }\n`\n\nconst AvatarWrapper = styled.div`\n  height: 64px;\n  width: 64px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 128px;\n    width: 128px;\n  }\n`\n\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const { profile } = useProfile()\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\n  const {\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\n    isLoading: isProfileCostsLoading,\n  } = useGetProfileCosts()\n  const [needsApproval, setNeedsApproval] = useState(null)\n  const minimumCakeRequired = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.Fetched && cakeBalance.gte(minimumCakeRequired)\n\n  /**\n   * Check if the wallet has the required CAKE allowance to change their profile pic or reactivate\n   * If they don't, we send them to the approval screen first\n   */\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      const response = await cakeContract.allowance(account, getPancakeProfileAddress())\n      setNeedsApproval(response.lt(minimumCakeRequired))\n    }\n\n    if (account && !isProfileCostsLoading) {\n      checkApprovalStatus()\n    }\n  }, [account, minimumCakeRequired, setNeedsApproval, cakeContract, isProfileCostsLoading])\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n      <AvatarWrapper>\n        <ProfileAvatarWithTeam profile={profile} />\n      </AvatarWrapper>\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\n        <Text as=\"p\" color=\"failure\">\n          {!isProfileCostsLoading &&\n            !hasMinimumCakeRequired &&\n            t('%minimum% CAKE required to change profile pic', { minimum: formatBigNumber(minimumCakeRequired) })}\n        </Text>\n      </Flex>\n      {profile.isActive ? (\n        <>\n          <Button\n            width=\"100%\"\n            mb=\"8px\"\n            onClick={needsApproval === true ? goToApprove : goToChange}\n            disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\n          >\n            {t('Change Profile Pic')}\n          </Button>\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\n            {t('Remove Profile Pic')}\n          </DangerOutline>\n        </>\n      ) : (\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={needsApproval === true ? goToApprove : goToChange}\n          disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\n        >\n          {t('Reactivate Profile')}\n        </Button>\n      )}\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default StartPage\n","import React, { useState } from 'react'\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\nimport { useAppDispatch } from 'state'\nimport { useProfile } from 'state/profile/hooks'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport { useProfile as useProfileContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\n\ntype PauseProfilePageProps = InjectedModalProps\n\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { profile } = useProfile()\n  const {\n    costs: { numberCakeToReactivate },\n  } = useGetProfileCosts()\n  const { t } = useTranslation()\n  const pancakeProfileContract = useProfileContract()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const dispatch = useAppDispatch()\n\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\n\n  const handleDeactivateProfile = async () => {\n    const tx = await callWithGasPrice(pancakeProfileContract, 'pauseProfile')\n    setIsConfirming(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      // Re-fetch profile\n      await dispatch(fetchProfile(account))\n      toastSuccess(t('Profile Paused!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      onDismiss()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsConfirming(false)\n    }\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <>\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\n        {t('This will suspend your profile and send your Collectible back to your wallet')}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t(\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\n        )}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t('Cost to reactivate in the future: %cost% CAKE', { cost: formatBigNumber(numberCakeToReactivate) })}\n      </Text>\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\n        <Flex alignItems=\"center\">\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\n          <Text ml=\"8px\">{t('I understand')}</Text>\n        </Flex>\n      </label>\n      <Button\n        width=\"100%\"\n        isLoading={isConfirming}\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        disabled={!isAcknowledged || isConfirming}\n        onClick={handleDeactivateProfile}\n        mb=\"8px\"\n      >\n        {t('Confirm')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default PauseProfilePage\n","import React, { useState } from 'react'\nimport { Button, Box, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useProfile } from 'state/profile/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { fetchProfile } from 'state/profile'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { getErc721Contract } from 'utils/contractHelpers'\nimport { useProfile as useProfileContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport SelectionCard from 'views/ProfileCreation/SelectionCard'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation } from 'state/nftMarket/types'\n\ntype ChangeProfilePicPageProps = InjectedModalProps\n\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\n  const [selectedNft, setSelectedNft] = useState({\n    tokenId: null,\n    collectionAddress: null,\n  })\n  const { t } = useTranslation()\n  const { nfts } = useUserNfts()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const profileContract = useProfileContract()\n  const { account, library } = useWeb3React()\n  const { toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const nftsInWallet = nfts.filter((nft) => nft.location === NftLocation.WALLET)\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onApprove: () => {\n        const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\n        return callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\n      },\n      onConfirm: () => {\n        if (!profile.isActive) {\n          return callWithGasPrice(profileContract, 'reactivateProfile', [\n            selectedNft.collectionAddress,\n            selectedNft.tokenId,\n          ])\n        }\n\n        return callWithGasPrice(profileContract, 'updateProfile', [selectedNft.collectionAddress, selectedNft.tokenId])\n      },\n      onSuccess: async ({ receipt }) => {\n        // Re-fetch profile\n        await dispatch(fetchProfile(account))\n        toastSuccess(t('Profile Updated!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n\n        onDismiss()\n      },\n    })\n\n  return (\n    <>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t('Choose a new Collectible to use as your profile pic.')}\n      </Text>\n      <Box maxHeight=\"300px\" overflowY=\"scroll\">\n        {nftsInWallet.map((walletNft) => {\n          const handleChange = () => {\n            setSelectedNft({\n              tokenId: walletNft.tokenId,\n              collectionAddress: walletNft.collectionAddress,\n            })\n          }\n          return (\n            <SelectionCard\n              name=\"profilePicture\"\n              key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\n              value={walletNft.tokenId}\n              image={walletNft.image.thumbnail}\n              isChecked={walletNft.tokenId === selectedNft.tokenId}\n              onChange={handleChange}\n              disabled={isApproving || isConfirming || isConfirmed}\n            >\n              <Text bold>{walletNft.name}</Text>\n            </SelectionCard>\n          )\n        })}\n      </Box>\n      {nfts.length === 0 && (\n        <>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t('Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\n          </Text>\n        </>\n      )}\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n      <Button mt=\"8px\" variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\n        {t('Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default ChangeProfilePicPage\n","import React, { useState } from 'react'\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useProfile } from 'state/profile/hooks'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\nimport { UseEditProfileResponse } from './reducer'\n\ninterface ApproveCakePageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n}\n\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\n  const [isApproving, setIsApproving] = useState(false)\n  const { profile } = useProfile()\n  const { t } = useTranslation()\n  const {\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\n  } = useGetProfileCosts()\n  const cakeContract = useCake()\n  const { toastError } = useToast()\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n\n  const handleApprove = async () => {\n    const tx = await cakeContract.approve(getPancakeProfileAddress(), cost.mul(2).toString())\n    setIsApproving(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      goToChange()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsApproving(false)\n    }\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\n        <Text>{formatBigNumber(cost)} CAKE</Text>\n      </Flex>\n      <Button\n        disabled={isApproving}\n        isLoading={isApproving}\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={handleApprove}\n      >\n        {t('Enable')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveCakePage\n","import React from 'react'\nimport { InjectedModalProps, Modal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { ContextApi } from 'contexts/Localization/types'\nimport useEditProfile, { Views } from './reducer'\nimport StartView from './StartView'\nimport PauseProfileView from './PauseProfileView'\nimport ChangeProfilePicView from './ChangeProfilePicView'\nimport ApproveCakeView from './ApproveCakeView'\n\ntype EditProfileModalProps = InjectedModalProps\n\nconst viewTitle = (t: ContextApi['t'], currentView: Views) => {\n  switch (currentView) {\n    case Views.START:\n      return t('Edit Profile')\n    case Views.CHANGE:\n      return t('Change Profile Pic')\n    case Views.REMOVE:\n      return t('Remove Profile Pic')\n    case Views.APPROVE:\n      return t('Enable CAKE')\n    default:\n      return ''\n  }\n}\n\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({ onDismiss }) => {\n  const { currentView, goToChange, goToRemove, goToApprove, goPrevious } = useEditProfile()\n  const { t } = useTranslation()\n\n  const isStartView = currentView === Views.START\n  const handleBack = isStartView ? null : () => goPrevious()\n\n  return (\n    <Modal title={viewTitle(t, currentView)} onBack={handleBack} onDismiss={onDismiss} hideCloseButton={!isStartView}>\n      <div style={{ maxWidth: '400px' }}>\n        {currentView === Views.START && (\n          <StartView goToApprove={goToApprove} goToChange={goToChange} goToRemove={goToRemove} onDismiss={onDismiss} />\n        )}\n        {currentView === Views.REMOVE && <PauseProfileView onDismiss={onDismiss} />}\n        {currentView === Views.CHANGE && <ChangeProfilePicView onDismiss={onDismiss} />}\n        {currentView === Views.APPROVE && <ApproveCakeView goToChange={goToChange} onDismiss={onDismiss} />}\n      </div>\n    </Modal>\n  )\n}\n\nexport default EditProfileModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\n\nconst GridItem = styled(Flex)`\n  align-items: center;\n`\n\nconst LoadingRow: React.FC = () => {\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  return (\n    <tr>\n      <Td>\n        <GridItem>\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\n        </GridItem>\n      </Td>\n      <Td>\n        <GridItem justifyContent=\"flex-end\">\n          <Skeleton height={[66, null, 24]} width={64} />\n        </GridItem>\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={42} width={64} />\n            </GridItem>\n          </Td>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={48} width={124} />\n            </GridItem>\n          </Td>\n        </>\n      )}\n      <Td>\n        <GridItem justifyContent=\"center\">\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\n        </GridItem>\n      </Td>\n    </tr>\n  )\n}\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nexport default TableLoader\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\n\ninterface ActivityEventTextProps extends TextProps {\n  marketEvent: MarketEvent\n}\n\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\n  const { t } = useTranslation()\n\n  const events = {\n    [MarketEvent.NEW]: {\n      text: t('Listed'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.CANCEL]: {\n      text: t('Delisted'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.MODIFY]: {\n      text: t('Modified'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.BUY]: {\n      text: t('Bought'),\n      color: 'success',\n    },\n    [MarketEvent.SELL]: {\n      text: t('Sold'),\n      color: 'failure',\n    },\n  }\n\n  return (\n    <Text {...props} color={events[marketEvent].color}>\n      {events[marketEvent].text}\n    </Text>\n  )\n}\n\nexport default ActivityEventText\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from '@pancakeswap/uikit'\nimport { Price } from '@pancakeswap/sdk'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport truncateHash from 'utils/truncateHash'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport ActivityEventText from './ActivityEventText'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface MobileModalProps extends InjectedModalProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  localeTimestamp: string\n  isUserActivity?: boolean\n}\n\nconst MobileModal: React.FC<MobileModalProps> = ({\n  nft,\n  activity,\n  bnbBusdPrice,\n  localeTimestamp,\n  onDismiss,\n  isUserActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const priceAsFloat = parseFloat(activity.price)\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\n\n  return (\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            <Text bold>{nft.name}</Text>\n          </Flex>\n        </Flex>\n        <LightGreyCard p=\"16px\">\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\n            {priceAsFloat ? (\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n                <Text mr=\"4px\" bold>\n                  {priceAsFloat}\n                </Text>\n                <Text color=\"textSubtle\">\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  })})`}\n                </Text>\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Flex>\n          {isUserActivity ? (\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('From/To')}\n              </Text>\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\n            </Flex>\n          ) : (\n            <>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('From')}\n                </Text>\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\n              </Flex>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('To')}\n                </Text>\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\n              </Flex>\n            </>\n          )}\n          <Flex justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Date')}\n            </Text>\n            <Text>{localeTimestamp}</Text>\n          </Flex>\n        </LightGreyCard>\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            {t('View on BscScan')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default MobileModal\n","import React from 'react'\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n      {price ? (\n        <>\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n            <Text maxWidth=\"80px\" bold>\n              {price.toLocaleString(undefined, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 5,\n              })}\n            </Text>\n          </Flex>\n          {priceInUsd ? (\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`(~$${priceInUsd.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2,\n              })})`}\n            </Text>\n          ) : (\n            <Skeleton height=\"18px\" width=\"42px\" />\n          )}\n        </>\n      ) : (\n        '-'\n      )}\n    </Flex>\n  )\n}\n\nexport default ActivityPrice\n","import React from 'react'\nimport { Image, Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { Price } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport MobileModal from './MobileModal'\nimport ActivityPrice from './ActivityPrice'\nimport ActivityEventText from './ActivityEventText'\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../../constants'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface ActivityRowProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  isUserActivity?: boolean\n  isNftActivity?: boolean\n}\n\nconst ActivityRow: React.FC<ActivityRowProps> = ({\n  activity,\n  bnbBusdPrice,\n  nft,\n  isUserActivity = false,\n  isNftActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const priceAsFloat = parseFloat(activity.price)\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n  const [onPresentMobileModal] = useModal(\n    <MobileModal\n      nft={nft}\n      activity={activity}\n      localeTimestamp={localeTimestamp}\n      bnbBusdPrice={bnbBusdPrice}\n      isUserActivity={isUserActivity}\n    />,\n  )\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase() : false\n  const tokenId =\n    nft && isPBCollection\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\n      : nft\n      ? nft.tokenId\n      : null\n\n  return (\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\n      {!isNftActivity ? (\n        <Td\n          {...((isXs || isSm) && {\n            onClick: (event) => {\n              event.stopPropagation()\n            },\n          })}\n        >\n          <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\n              <RoundedImage\n                src={nft?.image.thumbnail}\n                alt={nft?.name}\n                width={64}\n                height={64}\n                mr={[0, null, '16px']}\n                mb={['8px', null, 0]}\n              />\n              <Flex flexDirection=\"column\">\n                <Text textAlign={['center', null, 'left']} color=\"textSubtle\" fontSize=\"14px\">\n                  {nft?.collectionName}\n                </Text>\n                <Text textAlign={['center', null, 'left']} bold>\n                  {nft?.name}\n                </Text>\n              </Flex>\n            </Flex>\n          </RouterLink>\n        </Td>\n      ) : null}\n      <Td>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <ActivityEventText marketEvent={activity.marketEvent} />\n        </Flex>\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\n          </Td>\n          {isUserActivity ? (\n            <Td>\n              <Flex justifyContent=\"center\" alignItems=\"center\">\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\n              </Flex>\n            </Td>\n          ) : (\n            <>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\n                </Flex>\n              </Td>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\n                </Flex>\n              </Td>\n            </>\n          )}\n        </>\n      )}\n      <Td>\n        <Flex justifyContent=\"center\">\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\n            {localeTimestamp}\n          </Text>\n        </Flex>\n      </Td>\n      {isXs || isSm ? null : (\n        <Td>\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Td>\n      )}\n    </tr>\n  )\n}\n\nexport default ActivityRow\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, useModal, Link, Grid, LinkExternal } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLinkForNft } from 'utils'\nimport { HorizontalDivider, RoundedImage } from './BuySellModals/shared/styles'\nimport EditProfileModal from '../Profile/components/EditProfileModal'\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../constants'\n\nexport const StyledModal = styled(Modal)`\n  & > div:last-child {\n    padding: 0;\n  }\n`\n\nconst TextWrapper = styled(Flex)`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n`\n\ninterface ProfileNftModalProps extends InjectedModalProps {\n  nft: NftToken\n}\n\nconst ProfileNftModal: React.FC<ProfileNftModalProps> = ({ nft, onDismiss }) => {\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  const itemPageUrlId = nft.collectionAddress === pancakeBunniesAddress ? nft.attributes[0].value : nft.tokenId\n\n  return (\n    <StyledModal title={t('Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex p=\"16px\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n            <Text bold>{nft.name}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            {/* TODO: Add lowestPrice when available */}\n          </Grid>\n        </Flex>\n        <Flex justifyContent=\"space-between\" px=\"16px\" mb=\"16px\">\n          <Flex flex=\"2\">\n            <Text small color=\"textSubtle\">\n              {t('Token ID: %id%', { id: nft.tokenId })}\n            </Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\" flex=\"3\">\n            <Button\n              as={Link}\n              p=\"0px\"\n              height=\"16px\"\n              external\n              variant=\"text\"\n              href={`${nftsBaseUrl}/collections/${nft.collectionAddress}/${itemPageUrlId}`}\n            >\n              {t('View Item')}\n            </Button>\n            <HorizontalDivider />\n            <LinkExternal p=\"0px\" height=\"16px\" href={getBscScanLinkForNft(nft.collectionAddress, nft.tokenId)}>\n              BscScan\n            </LinkExternal>\n          </Flex>\n        </Flex>\n        <TextWrapper p=\"24px 16px\" flexDirection=\"column\">\n          <Text mb=\"16px\">{t(\"You're using this NFT as your Pancake Profile picture\")}</Text>\n          <Text color=\"textSubtle\" mb=\"16px\" fontSize=\"14px\">\n            {t(\n              'Removing it will suspend your profile, and you won’t be able to earn points, participate in team activities, or be eligible for new NFT drops.',\n            )}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {t('Go to your profile page to continue.')}\n          </Text>\n        </TextWrapper>\n        <Flex flexDirection=\"column\" py=\"16px\" px=\"16px\">\n          <Button onClick={onEditProfileModal} width=\"100%\" variant=\"secondary\">\n            {t('Remove Profile Pic')}\n          </Button>\n        </Flex>\n      </Flex>\n    </StyledModal>\n  )\n}\n\nexport default ProfileNftModal\n","import React from 'react'\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { StepIndicator } from './styles'\n\ninterface ApproveAndConfirmStageProps {\n  variant: 'buy' | 'sell'\n  isApproved: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  handleApprove: () => void\n  handleConfirm: () => void\n}\n\n// Buy Flow:\n// Shown if user wants to pay with WBNB and contract isn't approved yet\n// Sell Flow:\n// Shown the first time user puts NFT for sale\nconst ApproveAndConfirmStage: React.FC<ApproveAndConfirmStageProps> = ({\n  variant,\n  isApproved,\n  isApproving,\n  isConfirming,\n  handleApprove,\n  handleConfirm,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex p=\"16px\" flexDirection=\"column\">\n      <Flex mb=\"8px\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\">\n            <StepIndicator success={isApproved}>\n              <Text fontSize=\"20px\" bold color=\"invertedContrast\">\n                1\n              </Text>\n            </StepIndicator>\n            <Text fontSize=\"20px\" color={isApproved ? 'success' : 'secondary'} bold>\n              {isApproved ? t('Enabled') : t('Enable')}\n            </Text>\n          </Flex>\n          {!isApproved && (\n            <Text mt=\"8px\" maxWidth=\"275px\" small color=\"textSubtle\">\n              {variant === 'buy'\n                ? t('Please enable WBNB spending in your wallet')\n                : t('Please enable your NFT to be sent to the market')}\n            </Text>\n          )}\n        </Flex>\n        <Flex flex=\"0 0 64px\" width=\"64px\">\n          {isApproving && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      {!isApproved && (\n        <Button variant=\"secondary\" disabled={isApproving} onClick={handleApprove}>\n          {isApproving ? `${t('Enabling')}...` : t('Enable')}\n        </Button>\n      )}\n      <Flex alignItems=\"center\" mt=\"8px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mt=\"16px\">\n            <StepIndicator success={!!0} disabled={!isApproved}>\n              <Text fontSize=\"20px\" bold color={!isApproved ? 'textDisabled' : 'invertedContrast'}>\n                2\n              </Text>\n            </StepIndicator>\n            <Text fontSize=\"20px\" bold color={isApproved ? 'secondary' : 'textDisabled'}>\n              {t('Confirm')}\n            </Text>\n          </Flex>\n          <Text small color={isApproved ? 'textSubtle' : 'textDisabled'}>\n            {t('Please confirm the transaction in your wallet')}\n          </Text>\n        </Flex>\n        <Flex flex=\"0 0 64px\" width=\"64px\">\n          {isConfirming && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      <Button mt=\"16px\" disabled={!isApproved || isConfirming} onClick={handleConfirm} variant=\"secondary\">\n        {isConfirming ? t('Confirming') : t('Confirm')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveAndConfirmStage\n","import React from 'react'\nimport { Flex, Text, Button, ArrowUpIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { Divider } from './styles'\n\ninterface TransactionConfirmedProps {\n  txHash: string\n  onDismiss: () => void\n}\n\nconst TransactionConfirmed: React.FC<TransactionConfirmedProps> = ({ txHash, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  return (\n    <>\n      <Flex p=\"16px\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\" height=\"150px\">\n        <ArrowUpIcon width=\"64px\" height=\"64px\" color=\"primary\" />\n        <Text bold>{t('Transaction Confirmed')}</Text>\n        <LinkExternal href={getBscScanLink(txHash, 'transaction', chainId)}>{t('View on BscScan')}</LinkExternal>\n      </Flex>\n      <Divider />\n      <Flex px=\"16px\" pb=\"16px\" justifyContent=\"center\">\n        <Button onClick={onDismiss} variant=\"secondary\" width=\"100%\">\n          {t('Close')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default TransactionConfirmed\n","import React from 'react'\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ConfirmStageProps {\n  isConfirming: boolean\n  handleConfirm: () => void\n}\n\n// Buy Flow:\n// Shown in case user wants to pay with BNB\n// or if user wants to pay with WBNB and it is already approved\n// Sell Flow:\n// Shown if user adjusts the price or removes NFT from the market\nconst ConfirmStage: React.FC<ConfirmStageProps> = ({ isConfirming, handleConfirm }) => {\n  const { t } = useTranslation()\n  return (\n    <Flex p=\"16px\" flexDirection=\"column\">\n      <Flex alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\">\n            <Text fontSize=\"20px\" bold color=\"secondary\">\n              {t('Confirm')}\n            </Text>\n          </Flex>\n          <Text small color=\"textSubtle\">\n            {t('Please confirm the transaction in your wallet')}\n          </Text>\n        </Flex>\n        <Flex flex=\"0 0 64px\" height=\"72px\" width=\"64px\">\n          {isConfirming && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      <Button mt=\"24px\" disabled={isConfirming} onClick={handleConfirm} variant=\"secondary\">\n        {isConfirming ? `${t('Confirming')}...` : t('Confirm')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ConfirmStage\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { logError } from 'utils/sentry'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface OnSuccessProps {\n  state: State\n  receipt: ethers.providers.TransactionReceipt\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    hasApproveFailed: state.approvalState === 'fail',\n    hasConfirmFailed: state.confirmState === 'fail',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'approve_error' })\n        logError(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async (params = {}) => {\n      dispatch({ type: 'confirm_sending' })\n      try {\n        const tx = await onConfirm(params)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'confirm_error' })\n        logError(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n"],"sourceRoot":""}