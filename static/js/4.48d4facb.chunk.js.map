{"version":3,"sources":["views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx","views/Nft/market/ActivityHistory/utils/sortActivity.tsx","views/Nft/market/ActivityHistory/ClearAllButton.tsx","views/Nft/market/ActivityHistory/ActivityFilter.tsx","views/Nft/market/ActivityHistory/ActivityFilters.tsx","views/Nft/market/ActivityHistory/ActivityHistory.tsx"],"names":["NoNftsImage","styled","div","PageButtons","Arrow","theme","colors","primary","Avatar","img","mediaQueries","md","StyledFlex","Flex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","nft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","width","height","mr","FetchStatus","Fetched","image","thumbnail","src","to","nftsBaseUrl","display","lineHeight","truncateHash","GridItem","LoadingRow","useMatchBreakpoints","isXs","isSm","justifyContent","TableLoader","ActivityEventText","marketEvent","props","t","useTranslation","events","MarketEvent","NEW","text","color","CANCEL","MODIFY","BUY","SELL","RoundedImage","Image","radii","default","MobileModal","activity","bnbBusdPrice","localeTimestamp","onDismiss","isUserActivity","chainId","useActiveWeb3React","useTheme","priceAsFloat","parseFloat","price","priceInUsd","multiplyPriceByAmount","title","headerBackground","gradients","cardHeader","flexDirection","maxWidth","alignItems","mb","fontSize","textAlign","collectionName","bold","name","p","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","otherParty","seller","buyer","pt","as","Link","external","href","getBscScanLink","tx","ActivityPrice","justifySelf","ActivityRow","isNftActivity","timestampAsMs","timestamp","Date","year","month","day","hour","minute","useModal","onPresentMobileModal","isPBCollection","collectionAddress","toLowerCase","pancakeBunniesAddress","tokenId","attributes","find","attribute","traitType","value","onClick","event","stopPropagation","alt","sortActivity","askOrders","transactions","allActivity","map","askOrderHistory","orderType","AskOrderType","getAskOrderEvent","askPrice","id","transactionHistory","length","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","ClearAllButton","dispatch","useAppDispatch","variant","scale","removeAllActivityFilters","TriggerButton","Button","hasItem","CloseButton","IconButton","eventName","eventType","ActivityFilter","nftActivityFilters","useGetNftActivityFilters","isEventSelected","typeFilters","some","nftActivityFilter","addActivityTypeFilters","collection","field","removeActivityTypeFilters","Container","sm","ScrollableFlexContainer","ActivityFilters","address","textTransform","isEmpty","ActivityHistory","useState","currentPage","maxPage","paginationData","setPaginationData","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","isLoading","setIsLoading","isInitialized","setIsInitialized","queryPage","setQueryPage","useLastUpdated","lastUpdated","refresh","setLastUpdated","useBNBBusdPrice","nftActivityFiltersString","JSON","stringify","useEffect","fetchCollectionActivity","a","nftActivityFiltersParsed","parse","getCollectionActivity","collectionActivity","Math","ceil","console","error","isAddress","fetchActivityNftMetadata","activityNftTokenIds","uniqBy","getNftsFromDifferentCollectionsApi","nfts","slice","py","px","style","gap","padding","disabled","nftMeta","metaNft","borderTop","cardBorder","prevState","page"],"mappings":"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","file":"static/js/4.48d4facb.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst NoNftsImage = styled.div`\n  background: url('/images/nfts/no-profile-md.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default NoNftsImage\n","import styled from 'styled-components'\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport truncateHash from 'utils/truncateHash'\nimport { FetchStatus } from 'config/constants/types'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport { Link } from 'react-router-dom'\nimport { nftsBaseUrl } from '../constants'\n\nconst Avatar = styled.img`\n  margin-right: 4px;\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 12px;\n  }\n`\n\nconst StyledFlex = styled(Flex)`\n  align-items: center;\n  transition: opacity 200ms ease-in;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\n  const profileName = username || '-'\n\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n  if (avatarFetchStatus === FetchStatus.Fetched) {\n    if (profileNft?.image?.thumbnail) {\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\n    } else {\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n    }\n  }\n\n  return (\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\n      <StyledFlex>\n        {sellerProfilePicComponent}\n        <Box display=\"inline\">\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\n          {usernameFetchStatus !== FetchStatus.Fetched ? <Skeleton /> : <Text lineHeight=\"1.25\">{profileName}</Text>}\n        </Box>\n      </StyledFlex>\n    </Link>\n  )\n}\n\nexport default ProfileCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\n\nconst GridItem = styled(Flex)`\n  align-items: center;\n`\n\nconst LoadingRow: React.FC = () => {\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  return (\n    <tr>\n      <Td>\n        <GridItem>\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\n        </GridItem>\n      </Td>\n      <Td>\n        <GridItem justifyContent=\"flex-end\">\n          <Skeleton height={[66, null, 24]} width={64} />\n        </GridItem>\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={42} width={64} />\n            </GridItem>\n          </Td>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={48} width={124} />\n            </GridItem>\n          </Td>\n        </>\n      )}\n      <Td>\n        <GridItem justifyContent=\"center\">\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\n        </GridItem>\n      </Td>\n    </tr>\n  )\n}\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nexport default TableLoader\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\n\ninterface ActivityEventTextProps extends TextProps {\n  marketEvent: MarketEvent\n}\n\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\n  const { t } = useTranslation()\n\n  const events = {\n    [MarketEvent.NEW]: {\n      text: t('Listed'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.CANCEL]: {\n      text: t('Delisted'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.MODIFY]: {\n      text: t('Modified'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.BUY]: {\n      text: t('Bought'),\n      color: 'success',\n    },\n    [MarketEvent.SELL]: {\n      text: t('Sold'),\n      color: 'failure',\n    },\n  }\n\n  return (\n    <Text {...props} color={events[marketEvent].color}>\n      {events[marketEvent].text}\n    </Text>\n  )\n}\n\nexport default ActivityEventText\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from '@pancakeswap/uikit'\nimport { Price } from '@pancakeswap/sdk'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport truncateHash from 'utils/truncateHash'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport ActivityEventText from './ActivityEventText'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface MobileModalProps extends InjectedModalProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  localeTimestamp: string\n  isUserActivity?: boolean\n}\n\nconst MobileModal: React.FC<MobileModalProps> = ({\n  nft,\n  activity,\n  bnbBusdPrice,\n  localeTimestamp,\n  onDismiss,\n  isUserActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const priceAsFloat = parseFloat(activity.price)\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\n\n  return (\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            <Text bold>{nft.name}</Text>\n          </Flex>\n        </Flex>\n        <LightGreyCard p=\"16px\">\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\n            {priceAsFloat ? (\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n                <Text mr=\"4px\" bold>\n                  {priceAsFloat}\n                </Text>\n                <Text color=\"textSubtle\">\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  })})`}\n                </Text>\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Flex>\n          {isUserActivity ? (\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('From/To')}\n              </Text>\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\n            </Flex>\n          ) : (\n            <>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('From')}\n                </Text>\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\n              </Flex>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('To')}\n                </Text>\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\n              </Flex>\n            </>\n          )}\n          <Flex justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Date')}\n            </Text>\n            <Text>{localeTimestamp}</Text>\n          </Flex>\n        </LightGreyCard>\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            {t('View on BscScan')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default MobileModal\n","import React from 'react'\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n      {price ? (\n        <>\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n            <Text maxWidth=\"80px\" bold>\n              {price.toLocaleString(undefined, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 5,\n              })}\n            </Text>\n          </Flex>\n          {priceInUsd ? (\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`(~$${priceInUsd.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2,\n              })})`}\n            </Text>\n          ) : (\n            <Skeleton height=\"18px\" width=\"42px\" />\n          )}\n        </>\n      ) : (\n        '-'\n      )}\n    </Flex>\n  )\n}\n\nexport default ActivityPrice\n","import React from 'react'\nimport { Image, Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { Price } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport MobileModal from './MobileModal'\nimport ActivityPrice from './ActivityPrice'\nimport ActivityEventText from './ActivityEventText'\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../../constants'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface ActivityRowProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  isUserActivity?: boolean\n  isNftActivity?: boolean\n}\n\nconst ActivityRow: React.FC<ActivityRowProps> = ({\n  activity,\n  bnbBusdPrice,\n  nft,\n  isUserActivity = false,\n  isNftActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const priceAsFloat = parseFloat(activity.price)\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n  const [onPresentMobileModal] = useModal(\n    <MobileModal\n      nft={nft}\n      activity={activity}\n      localeTimestamp={localeTimestamp}\n      bnbBusdPrice={bnbBusdPrice}\n      isUserActivity={isUserActivity}\n    />,\n  )\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase() : false\n  const tokenId =\n    nft && isPBCollection\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\n      : nft\n      ? nft.tokenId\n      : null\n\n  return (\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\n      {!isNftActivity ? (\n        <Td\n          {...((isXs || isSm) && {\n            onClick: (event) => {\n              event.stopPropagation()\n            },\n          })}\n        >\n          <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\n              <RoundedImage\n                src={nft?.image.thumbnail}\n                alt={nft?.name}\n                width={64}\n                height={64}\n                mr={[0, null, '16px']}\n                mb={['8px', null, 0]}\n              />\n              <Flex flexDirection=\"column\">\n                <Text textAlign={['center', null, 'left']} color=\"textSubtle\" fontSize=\"14px\">\n                  {nft?.collectionName}\n                </Text>\n                <Text textAlign={['center', null, 'left']} bold>\n                  {nft?.name}\n                </Text>\n              </Flex>\n            </Flex>\n          </RouterLink>\n        </Td>\n      ) : null}\n      <Td>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <ActivityEventText marketEvent={activity.marketEvent} />\n        </Flex>\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\n          </Td>\n          {isUserActivity ? (\n            <Td>\n              <Flex justifyContent=\"center\" alignItems=\"center\">\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\n              </Flex>\n            </Td>\n          ) : (\n            <>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\n                </Flex>\n              </Td>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\n                </Flex>\n              </Td>\n            </>\n          )}\n        </>\n      )}\n      <Td>\n        <Flex justifyContent=\"center\">\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\n            {localeTimestamp}\n          </Text>\n        </Flex>\n      </Td>\n      {isXs || isSm ? null : (\n        <Td>\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Td>\n      )}\n    </tr>\n  )\n}\n\nexport default ActivityRow\n","import { ethers } from 'ethers'\nimport { Activity, AskOrder, AskOrderType, MarketEvent, Transaction } from 'state/nftMarket/types'\n\nexport const sortActivity = ({\n  askOrders = [],\n  transactions = [],\n}: {\n  askOrders?: AskOrder[]\n  transactions?: Transaction[]\n}): Activity[] => {\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n    switch (orderType) {\n      case AskOrderType.CANCEL:\n        return MarketEvent.CANCEL\n      case AskOrderType.MODIFY:\n        return MarketEvent.MODIFY\n      case AskOrderType.NEW:\n        return MarketEvent.NEW\n      default:\n        return MarketEvent.MODIFY\n    }\n  }\n\n  const transformTransactions = (transactionsHistory: Transaction[]): Activity[] => {\n    const transformedTransactions = transactionsHistory.map((transactionHistory) => {\n      const marketEvent = MarketEvent.SELL\n      const { timestamp, nft } = transactionHistory\n      const price = transactionHistory.askPrice\n      const tx = transactionHistory.id\n      const buyer = transactionHistory.buyer.id\n      const seller = transactionHistory.seller.id\n      return { marketEvent, price, timestamp, nft, tx, buyer, seller }\n    })\n\n    return transformedTransactions\n  }\n\n  const transformAskOrders = (askOrdersHistory: AskOrder[]): Activity[] => {\n    const transformedAskOrders = askOrdersHistory.map((askOrderHistory) => {\n      const marketEvent = getAskOrderEvent(askOrderHistory.orderType)\n      const price = askOrderHistory.askPrice\n      const { timestamp, nft } = askOrderHistory\n      const tx = askOrderHistory.id\n      const seller = askOrderHistory?.seller.id\n      return { marketEvent, price, timestamp, nft, tx, seller }\n    })\n\n    return transformedAskOrders\n  }\n\n  const allActivity = [...transformAskOrders(askOrders), ...transformTransactions(transactions)]\n  if (allActivity.length > 0) {\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\n      return timestamp2.sub(timestamp1).toNumber()\n    })\n\n    return sortedByMostRecent\n  }\n  return []\n}\n","import React from 'react'\nimport { Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { removeAllActivityFilters } from 'state/nftMarket/reducer'\n\ninterface ClearAllButtonProps extends ButtonProps {\n  collectionAddress: string\n}\n\nconst ClearAllButton: React.FC<ClearAllButtonProps> = ({ collectionAddress, ...props }) => {\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n\n  const clearAll = () => {\n    dispatch(removeAllActivityFilters(collectionAddress))\n  }\n\n  return (\n    <Button key=\"clear-all\" variant=\"text\" scale=\"sm\" onClick={clearAll} {...props}>\n      {t('Clear')}\n    </Button>\n  )\n}\n\nexport default ClearAllButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Button, Flex, IconButton, CloseIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { addActivityTypeFilters, removeActivityTypeFilters } from 'state/nftMarket/reducer'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../../../state/nftMarket/types'\n\ninterface ActivityFilterProps {\n  eventType: MarketEvent\n  collectionAddress: string\n}\n\nconst TriggerButton = styled(Button)<{ hasItem: boolean }>`\n  ${({ hasItem }) =>\n    hasItem &&\n    `  \n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    padding-right: 8px;\n  `}\n`\n\nconst CloseButton = styled(IconButton)`\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`\n\nconst eventName = (t: ContextApi['t'], eventType: string) => {\n  switch (eventType) {\n    case MarketEvent.CANCEL:\n      return t('Delisted')\n    case MarketEvent.MODIFY:\n      return t('Modified')\n    case MarketEvent.NEW:\n      return t('Listed')\n    case MarketEvent.SELL:\n      return t('Sold')\n    default:\n      return ''\n  }\n}\n\nexport const ActivityFilter: React.FC<ActivityFilterProps> = ({ eventType, collectionAddress }) => {\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n\n  const isEventSelected = nftActivityFilters.typeFilters.some((nftActivityFilter) => nftActivityFilter === eventType)\n\n  const handleMenuClick = () => {\n    if (!isEventSelected) {\n      dispatch(addActivityTypeFilters({ collection: collectionAddress, field: eventType }))\n    }\n  }\n\n  const handleClearItem = () => {\n    dispatch(removeActivityTypeFilters({ collection: collectionAddress, field: eventType }))\n  }\n\n  return (\n    <Flex alignItems=\"center\" mr=\"4px\" mb=\"4px\">\n      <Box>\n        <TriggerButton\n          onClick={handleMenuClick}\n          variant={isEventSelected ? 'subtle' : 'light'}\n          scale=\"sm\"\n          hasItem={isEventSelected}\n        >\n          {eventName(t, eventType)}\n        </TriggerButton>\n      </Box>\n      {isEventSelected && (\n        <CloseButton variant={isEventSelected ? 'subtle' : 'light'} scale=\"sm\" onClick={handleClearItem}>\n          <CloseIcon color=\"currentColor\" width=\"18px\" />\n        </CloseButton>\n      )}\n    </Flex>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport isEmpty from 'lodash/isEmpty'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { Collection, MarketEvent } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport ClearAllButton from './ClearAllButton'\nimport { ActivityFilter } from './ActivityFilter'\n\nexport const Container = styled(Flex)`\n  gap: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    align-items: center;\n    flex-grow: 2;\n  }\n`\n\nconst ScrollableFlexContainer = styled(Flex)`\n  align-items: center;\n  flex: 1;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-wrap: wrap;\n    overflow-x: revert;\n  }\n`\n\ninterface FiltersProps {\n  collection: Collection\n}\n\nconst ActivityFilters: React.FC<FiltersProps> = ({ collection }) => {\n  const { address } = collection || { address: '' }\n  const { t } = useTranslation()\n\n  const nftActivityFilters = useGetNftActivityFilters(address)\n\n  return (\n    <Container justifyContent=\"space-between\" flexDirection={['column', 'column', 'row']}>\n      <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" bold>\n        {t('Filter by')}\n      </Text>\n      <ScrollableFlexContainer>\n        {[MarketEvent.NEW, MarketEvent.CANCEL, MarketEvent.MODIFY, MarketEvent.SELL].map((eventType) => {\n          return <ActivityFilter key={eventType} eventType={eventType} collectionAddress={address} />\n        })}\n      </ScrollableFlexContainer>\n      {!isEmpty(nftActivityFilters.typeFilters) ? <ClearAllButton collectionAddress={address} /> : null}\n    </Container>\n  )\n}\n\nexport default ActivityFilters\n","import React, { useEffect, useState } from 'react'\nimport { uniqBy } from 'lodash'\nimport { isAddress } from 'utils'\nimport { useAppDispatch } from 'state'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Flex,\n  Table,\n  Text,\n  Th,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport { getCollectionActivity, getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\nimport Container from 'components/Layout/Container'\nimport TableLoader from 'components/TableLoader'\nimport { Activity, Collection, NftToken, TokenIdWithCollectionAddress } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useTheme from 'hooks/useTheme'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { Arrow, PageButtons } from '../components/PaginationButtons'\nimport NoNftsImage from '../components/Activity/NoNftsImage'\nimport ActivityFilters from './ActivityFilters'\nimport ActivityRow from '../components/Activity/ActivityRow'\nimport { sortActivity } from './utils/sortActivity'\n\nconst MAX_PER_PAGE = 8\n\nconst MAX_PER_QUERY = 100\n\ninterface ActivityHistoryProps {\n  collection?: Collection\n}\n\nconst ActivityHistory: React.FC<ActivityHistoryProps> = ({ collection }) => {\n  const dispatch = useAppDispatch()\n  const { address: collectionAddress } = collection || { address: '' }\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [paginationData, setPaginationData] = useState<{\n    activity: Activity[]\n    currentPage: number\n    maxPage: number\n  }>({\n    activity: [],\n    currentPage: 1,\n    maxPage: 1,\n  })\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isInitialized, setIsInitialized] = useState(false)\n  const [queryPage, setQueryPage] = useState(1)\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  const nftActivityFiltersString = JSON.stringify(nftActivityFilters)\n\n  useEffect(() => {\n    const fetchCollectionActivity = async () => {\n      try {\n        setIsLoading(true)\n        const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\n        const collectionActivity = await getCollectionActivity(\n          collectionAddress.toLowerCase(),\n          nftActivityFiltersParsed,\n          MAX_PER_QUERY,\n        )\n        const activity = sortActivity(collectionActivity)\n        setPaginationData({\n          activity,\n          currentPage: 1,\n          maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\n        })\n        setIsLoading(false)\n        setIsInitialized(true)\n      } catch (error) {\n        console.error('Failed to fetch collection activity', error)\n      }\n    }\n\n    if ((collectionAddress && isAddress(collectionAddress)) || collectionAddress === '') {\n      fetchCollectionActivity()\n    }\n  }, [dispatch, collectionAddress, nftActivityFiltersString, lastUpdated])\n\n  useEffect(() => {\n    const fetchActivityNftMetadata = async () => {\n      const activityNftTokenIds = uniqBy(\n        activitiesSlice.map((activity): TokenIdWithCollectionAddress => {\n          return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\n        }),\n        'tokenId',\n      )\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\n      setNftMetadata(nfts)\n    }\n\n    if (activitiesSlice.length > 0) {\n      fetchActivityNftMetadata()\n    }\n  }, [activitiesSlice])\n\n  useEffect(() => {\n    const slice = paginationData.activity.slice(\n      MAX_PER_PAGE * (paginationData.currentPage - 1),\n      MAX_PER_PAGE * paginationData.currentPage,\n    )\n    setActivitiesSlice(slice)\n  }, [paginationData])\n\n  return (\n    <Box py=\"32px\">\n      <Container px={[0, null, '24px']}>\n        <Flex\n          style={{ gap: '16px', padding: '0 16px' }}\n          alignItems={[null, null, 'center']}\n          flexDirection={['column', 'column', 'row']}\n        >\n          <ActivityFilters collection={collection} />\n          <Button\n            scale=\"sm\"\n            disabled={isLoading}\n            onClick={() => {\n              refresh()\n            }}\n          >\n            {t('Refresh')}\n          </Button>\n        </Flex>\n      </Container>\n      <Container>\n        {paginationData.activity.length === 0 &&\n        nftMetadata.length === 0 &&\n        activitiesSlice.length === 0 &&\n        !isLoading ? (\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n            <NoNftsImage />\n            <Text pt=\"8px\" bold>\n              {t('No NFT market history found')}\n            </Text>\n          </Flex>\n        ) : (\n          <>\n            <Table>\n              <thead>\n                <tr>\n                  <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\n                  <Th textAlign=\"right\"> {t('Event')}</Th>\n                  {isXs || isSm ? null : (\n                    <>\n                      <Th textAlign=\"right\"> {t('Price')}</Th>\n                      <Th textAlign=\"center\"> {t('From')}</Th>\n                      <Th textAlign=\"center\"> {t('To')}</Th>\n                    </>\n                  )}\n                  <Th textAlign=\"center\"> {t('Date')}</Th>\n                  {isXs || isSm ? null : <Th />}\n                </tr>\n              </thead>\n\n              <tbody>\n                {!isInitialized ? (\n                  <TableLoader />\n                ) : (\n                  activitiesSlice.map((activity) => {\n                    const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\n                    return (\n                      <ActivityRow\n                        key={`${activity.marketEvent}#${activity.nft.tokenId}#${activity.timestamp}#${activity.tx}`}\n                        activity={activity}\n                        nft={nftMeta}\n                        bnbBusdPrice={bnbBusdPrice}\n                      />\n                    )\n                  })\n                )}\n              </tbody>\n            </Table>\n            <Flex\n              borderTop={`1px ${theme.colors.cardBorder} solid`}\n              pt=\"24px\"\n              flexDirection=\"column\"\n              justifyContent=\"space-between\"\n              height=\"100%\"\n            >\n              <PageButtons>\n                <Arrow\n                  onClick={() => {\n                    if (paginationData.currentPage !== 1) {\n                      setPaginationData((prevState) => ({\n                        ...prevState,\n                        currentPage: prevState.currentPage - 1,\n                      }))\n                    }\n                  }}\n                >\n                  <ArrowBackIcon color={paginationData.currentPage === 1 ? 'textDisabled' : 'primary'} />\n                </Arrow>\n                <Text>\n                  {t('Page %page% of %maxPage%', {\n                    page: paginationData.currentPage,\n                    maxPage: paginationData.maxPage,\n                  })}\n                </Text>\n                <Arrow\n                  onClick={async () => {\n                    if (paginationData.currentPage !== paginationData.maxPage) {\n                      setPaginationData((prevState) => ({\n                        ...prevState,\n                        currentPage: prevState.currentPage + 1,\n                      }))\n\n                      if (\n                        paginationData.maxPage - paginationData.currentPage === 1 &&\n                        paginationData.activity.length === MAX_PER_QUERY * queryPage\n                      ) {\n                        try {\n                          setIsLoading(true)\n                          const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\n                          const collectionActivity = await getCollectionActivity(\n                            collectionAddress.toLowerCase(),\n                            nftActivityFiltersParsed,\n                            MAX_PER_QUERY * (queryPage + 1),\n                          )\n                          const activity = sortActivity(collectionActivity)\n                          setPaginationData((prevState) => {\n                            return {\n                              ...prevState,\n                              activity,\n                              maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\n                            }\n                          })\n                          setIsLoading(false)\n                          setQueryPage((prevState) => prevState + 1)\n                        } catch (error) {\n                          console.error('Failed to fetch collection activity', error)\n                        }\n                      }\n                    }\n                  }}\n                >\n                  <ArrowForwardIcon\n                    color={paginationData.currentPage === paginationData.maxPage ? 'textDisabled' : 'primary'}\n                  />\n                </Arrow>\n              </PageButtons>\n            </Flex>\n          </>\n        )}\n      </Container>\n    </Box>\n  )\n}\n\nexport default ActivityHistory\n"],"sourceRoot":""}