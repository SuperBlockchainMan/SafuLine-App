{"version":3,"sources":["views/Info/components/InfoCharts/ChartCard/index.tsx","views/Info/components/InfoNav/index.tsx","views/Info/components/InfoCharts/LineChart/index.tsx","views/Info/components/InfoTables/TokensTable.tsx","views/Info/components/InfoTables/PoolsTable.tsx","views/Info/components/InfoCharts/BarChart/index.tsx","views/Info/components/InfoTables/TransactionsTable.tsx","views/Info/Overview/index.tsx","views/Info/Pools/index.tsx","views/Info/components/InfoCharts/CandleChart/index.tsx","views/Info/Pools/PoolPage.tsx","views/Info/components/TopTokenMovers/index.tsx","views/Info/Tokens/index.tsx","views/Info/hooks/useCMCLink.ts","views/Info/Tokens/TokenPage.tsx","views/Info/Tokens/redirects.tsx","views/Info/index.tsx","components/TabToggle/index.tsx"],"names":["ChartView","NavWrapper","styled","Flex","theme","colors","gradients","cardHeader","mediaQueries","sm","InfoNav","t","useTranslation","activeIndex","useRouteMatch","scale","variant","as","Link","to","width","HoverUpdater","locale","payload","setHoverValue","setHoverDate","useEffect","value","time","toLocaleString","year","day","month","LineChart","data","currentLanguage","useTheme","length","ResponsiveContainer","AreaChart","height","margin","top","right","left","bottom","onMouseLeave","undefined","id","x1","y1","x2","y2","offset","stopColor","inputSecondary","stopOpacity","secondary","XAxis","dataKey","axisLine","tickLine","tickFormatter","toLocaleDateString","minTickGap","YAxis","tickCount","fontSize","val","formatAmount","orientation","tick","dx","fill","textSubtle","Tooltip","cursor","stroke","contentStyle","display","formatter","tooltipValue","name","props","Area","type","strokeWidth","ResponsiveGrid","div","LinkWrapper","ResponsiveLogo","CurrencyLogo","TableLoader","loadingRow","DataRow","tokenData","index","useMatchBreakpoints","isXs","isSm","address","alignItems","ml","symbol","marginLeft","fontWeight","priceUSD","notation","Percent","priceUSDChange","volumeUSD","liquidityUSD","SORT_FIELD","TokenTable","tokenDatas","maxItems","useState","sortField","setSortField","sortDirection","setSortDirection","page","setPage","maxPage","setMaxPage","extraPages","Math","floor","sortedTokens","useMemo","sort","a","b","slice","handleSort","useCallback","newField","arrow","field","color","bold","onClick","textTransform","map","i","Fragment","LoadingRow","poolData","address0","token0","address1","token1","volumeUSDWeek","lpFees24h","lpApr7d","PoolTable","poolDatas","loading","ITEMS_PER_INFO_TABLE_PAGE","sortedPools","CustomBar","x","y","rx","Chart","BarChart","backgroundDisabled","Bar","primary","shape","Wrapper","RadioGroup","transaction","abs0","abs","amountToken0","abs1","amountToken1","outputTokenSymbol","token0Symbol","token1Symbol","inputTokenSymbol","href","getBscScanLink","hash","TransactionType","MINT","SWAP","amountUSD","sender","truncateHash","formatDistanceToNowStrict","parseInt","timestamp","TransactionTable","transactions","txFilter","setTxFilter","sortedTransactions","toBeAbsList","firstField","secondField","includes","filter","filteredTransactions","tx","handleFilter","newFilter","mb","flexDirection","onChange","checked","BURN","justifyContent","ChartCardsContainer","md","Overview","liquidityHover","setLiquidityHover","liquidityDateHover","setLiquidityDateHover","volumeHover","setVolumeHover","volumeDateHover","setVolumeDateHover","useProtocolData","protocolData","useProtocolChartData","chartData","useProtocolTransactions","currentDate","Date","formattedLiquidityData","fromUnixTime","date","formattedVolumeData","allTokens","useAllTokenData","formattedTokens","Object","values","token","allPoolData","useAllPoolData","pool","somePoolsAreLoading","some","Page","p","mt","PoolsOverview","useWatchlistPools","savedPools","watchlistPools","usePoolDatas","px","py","CandleChart","setValue","setLabel","rest","chartRef","useRef","chartCreated","setChart","handleResize","current","parentElement","resize","clientWidth","timeScale","fitContent","scrollToPosition","isClient","window","addEventListener","removeEventListener","chart","createChart","layout","backgroundColor","textColor","fontFamily","rightPriceScale","scaleMargins","borderVisible","secondsVisible","tickMarkFormatter","unixTime","format","watermark","visible","grid","horzLines","vertLines","crosshair","horzLine","labelVisible","mode","vertLine","style","labelBackgroundColor","series","addCandlestickSeries","upColor","success","downColor","failure","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","subscribeCrosshairMove","param","point","now","hour","minute","timeZone","parsed","seriesPrices","get","open","ref","ChartCard","tokenPriceData","VOLUME","view","setView","hoverValue","hoverDate","formattedTvlData","TabToggle","isActive","LIQUIDITY","PRICE","pt","valueToDisplay","getLatestValueDisplay","small","ContentLayout","TokenButton","LockedTokensContainer","cardBorder","background","PoolPage","routeAddress","match","params","showWeeklyData","setShowWeeklyData","useTooltip","tooltip","tooltipVisible","targetRef","scrollTo","toLowerCase","usePoolChartData","usePoolTransactions","addPoolToWatchlist","mr","SaveIcon","size","whiteSpace","token1Price","displayThreshold","tokenPrecision","token0Price","flex","liquidityUSDChange","liquidityToken0","liquidityToken1","onItemClick","volumeUSDChangeWeek","volumeUSDChange","lpFees7d","totalFees","totalFees7d","totalFees24h","CardWrapper","TopMoverCard","Box","radii","card","ScrollableRow","DataCard","lineHeight","TopTokenMovers","topPriceIncrease","min","increaseRef","moveLeftRef","scrollInterval","setInterval","scrollLeft","scrollWidth","clearInterval","entry","my","TokensOverview","useWatchlistTokens","savedTokens","watchListTokens","useTokenDatas","useCMCLink","cmcPageUrl","setCMCPageUrl","fetch","result","status","json","then","url","fetchLink","StyledCMCLink","UIKitLink","DEFAULT_TIME_WINDOW","weeks","TokenPage","cmcLink","useTokenData","poolsForToken","usePoolsForToken","useTokenTransactions","useTokenChartData","priceData","useTokenPriceData","ONE_HOUR_SECONDS","adjustedPriceData","getTime","close","high","low","watchlistTokens","addWatchlistToken","exists","rel","target","src","alt","txCount","isInteger","RedirectInvalidToken","isAddress","Info","path","exact","Pools","Tokens","component","Inner","input","button","text","TabToggleGroup","children"],"mappings":"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","file":"static/js/40.1c5be5be.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react'\nimport { Text, Box, Card, Flex, Skeleton } from '@pancakeswap/uikit'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport CandleChart from 'views/Info/components/InfoCharts/CandleChart'\nimport { TabToggleGroup, TabToggle } from 'components/TabToggle'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { ChartEntry, TokenData, PriceChartEntry } from 'state/info/types'\nimport { fromUnixTime } from 'date-fns'\n\nenum ChartView {\n  LIQUIDITY,\n  VOLUME,\n  PRICE,\n}\n\ninterface ChartCardProps {\n  variant: 'pool' | 'token'\n  chartData: ChartEntry[]\n  tokenData?: TokenData\n  tokenPriceData?: PriceChartEntry[]\n}\n\nconst ChartCard: React.FC<ChartCardProps> = ({ variant, chartData, tokenData, tokenPriceData }) => {\n  const [view, setView] = useState(ChartView.VOLUME)\n  const [hoverValue, setHoverValue] = useState<number | undefined>()\n  const [hoverDate, setHoverDate] = useState<string | undefined>()\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\n\n  const formattedTvlData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const getLatestValueDisplay = () => {\n    let valueToDisplay = null\n    if (hoverValue) {\n      valueToDisplay = formatAmount(hoverValue)\n    } else if (view === ChartView.VOLUME && formattedVolumeData.length > 0) {\n      valueToDisplay = formatAmount(formattedVolumeData[formattedVolumeData.length - 1]?.value)\n    } else if (view === ChartView.LIQUIDITY && formattedTvlData.length > 0) {\n      valueToDisplay = formatAmount(formattedTvlData[formattedTvlData.length - 1]?.value)\n    } else if (view === ChartView.PRICE && tokenData?.priceUSD) {\n      valueToDisplay = formatAmount(tokenData.priceUSD)\n    }\n\n    return valueToDisplay ? (\n      <Text fontSize=\"24px\" bold>\n        ${valueToDisplay}\n      </Text>\n    ) : (\n      <Skeleton height=\"36px\" width=\"128px\" />\n    )\n  }\n\n  return (\n    <Card>\n      <TabToggleGroup>\n        <TabToggle isActive={view === ChartView.VOLUME} onClick={() => setView(ChartView.VOLUME)}>\n          <Text>{t('Volume')}</Text>\n        </TabToggle>\n        <TabToggle isActive={view === ChartView.LIQUIDITY} onClick={() => setView(ChartView.LIQUIDITY)}>\n          <Text>{t('Liquidity')}</Text>\n        </TabToggle>\n        {variant === 'token' && (\n          <TabToggle isActive={view === ChartView.PRICE} onClick={() => setView(ChartView.PRICE)}>\n            <Text>{t('Price')}</Text>\n          </TabToggle>\n        )}\n      </TabToggleGroup>\n\n      <Flex flexDirection=\"column\" px=\"24px\" pt=\"24px\">\n        {getLatestValueDisplay()}\n        <Text small color=\"secondary\">\n          {hoverDate || currentDate}\n        </Text>\n      </Flex>\n\n      <Box px=\"24px\" height={variant === 'token' ? '250px' : '335px'}>\n        {view === ChartView.LIQUIDITY ? (\n          <LineChart data={formattedTvlData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.VOLUME ? (\n          <BarChart data={formattedVolumeData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.PRICE ? (\n          <CandleChart data={tokenPriceData} setValue={setHoverValue} setLabel={setHoverDate} />\n        ) : null}\n      </Box>\n    </Card>\n  )\n}\n\nexport default ChartCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link, useRouteMatch } from 'react-router-dom'\nimport { Box, Flex, ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Search from 'views/Info/components/InfoSearch'\n\nconst NavWrapper = styled(Flex)`\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\n  justify-content: space-between;\n  padding: 20px 16px;\n  flex-direction: column;\n  gap: 8px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 20px 40px;\n    flex-direction: row;\n  }\n`\n\nconst InfoNav = () => {\n  const { t } = useTranslation()\n  const isPools = useRouteMatch(['/info/pools', '/info/pool', '/info/pair'])\n  const isTokens = useRouteMatch(['/info/tokens', '/info/token'])\n  let activeIndex = 0\n  if (isPools) {\n    activeIndex = 1\n  }\n  if (isTokens) {\n    activeIndex = 2\n  }\n  return (\n    <NavWrapper>\n      <Box>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem as={Link} to=\"/info\">\n            {t('Overview')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to=\"/info/pools\">\n            {t('Pools')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to=\"/info/tokens\">\n            {t('Tokens')}\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </Box>\n      <Box width={['100%', '100%', '250px']}>\n        <Search />\n      </Box>\n    </NavWrapper>\n  )\n}\n\nexport default InfoNav\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\nimport { useTranslation } from 'contexts/Localization'\n\nexport type LineChartProps = {\n  data: any[]\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\n} & React.HTMLAttributes<HTMLDivElement>\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(payload.time.toLocaleString(locale, { year: 'numeric', day: 'numeric', month: 'short' }))\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\n/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */\nconst LineChart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <LineChartLoader />\n  }\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        data={data}\n        width={300}\n        height={308}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          if (setHoverDate) setHoverDate(undefined)\n          if (setHoverValue) setHoverValue(undefined)\n        }}\n      >\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={theme.colors.inputSecondary} stopOpacity={0.5} />\n            <stop offset=\"100%\" stopColor={theme.colors.secondary} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => time.toLocaleDateString(undefined, { day: '2-digit' })}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ stroke: theme.colors.secondary }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater\n              locale={locale}\n              payload={props.payload}\n              setHoverValue={setHoverValue}\n              setHoverDate={setHoverDate}\n            />\n          )}\n        />\n        <Area dataKey=\"value\" type=\"monotone\" stroke={theme.colors.secondary} fill=\"url(#gradient)\" strokeWidth={2} />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default LineChart\n","import React, { useState, useMemo, useCallback, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Skeleton, useMatchBreakpoints, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { TokenData } from 'state/info/types'\nimport { Link } from 'react-router-dom'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  6 = | # | Name | Price | Price Change | Volume 24H | TVL |\n *  5 = | # | Name | Price |              | Volume 24H | TVL |\n *  4 = | # | Name | Price |              | Volume 24H |     |\n *  2 = |   | Name |       |              | Volume 24H |     |\n *  On smallest screen Name is reduced to just symbol\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n\n  padding: 0 24px;\n\n  grid-template-columns: 20px 3fr repeat(4, 1fr);\n\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 2fr repeat(3, 1fr);\n    & :nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 20px 2fr repeat(2, 1fr);\n    & :nth-child(6) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 670px) {\n    grid-template-columns: 1fr 1fr;\n    > *:first-child {\n      display: none;\n    }\n    > *:nth-child(3) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(Link)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst ResponsiveLogo = styled(CurrencyLogo)`\n  @media screen and (max-width: 670px) {\n    width: 16px;\n    height: 16px;\n  }\n`\n\nconst TableLoader: React.FC = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<{ tokenData: TokenData; index: number }> = ({ tokenData, index }) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  return (\n    <LinkWrapper to={`/info/token/${tokenData.address}`}>\n      <ResponsiveGrid>\n        <Flex>\n          <Text>{index + 1}</Text>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <ResponsiveLogo address={tokenData.address} />\n          {(isXs || isSm) && <Text ml=\"8px\">{tokenData.symbol}</Text>}\n          {!isXs && !isSm && (\n            <Flex marginLeft=\"10px\">\n              <Text>{tokenData.name}</Text>\n              <Text ml=\"8px\">({tokenData.symbol})</Text>\n            </Flex>\n          )}\n        </Flex>\n        <Text fontWeight={400}>${formatAmount(tokenData.priceUSD, { notation: 'standard' })}</Text>\n        <Text fontWeight={400}>\n          <Percent value={tokenData.priceUSDChange} fontWeight={400} />\n        </Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.volumeUSD)}</Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\nconst SORT_FIELD = {\n  name: 'name',\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  priceUSD: 'priceUSD',\n  priceUSDChange: 'priceUSDChange',\n  priceUSDChangeWeek: 'priceUSDChangeWeek',\n}\n\nconst MAX_ITEMS = 10\n\nconst TokenTable: React.FC<{\n  tokenDatas: TokenData[] | undefined\n  maxItems?: number\n}> = ({ tokenDatas, maxItems = MAX_ITEMS }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (tokenDatas) {\n      if (tokenDatas.length % maxItems === 0) {\n        extraPages = 0\n      }\n      setMaxPage(Math.floor(tokenDatas.length / maxItems) + extraPages)\n    }\n  }, [maxItems, tokenDatas])\n\n  const sortedTokens = useMemo(() => {\n    return tokenDatas\n      ? tokenDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof TokenData] > b[sortField as keyof TokenData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(maxItems * (page - 1), page * maxItems)\n      : []\n  }, [tokenDatas, maxItems, page, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  if (!tokenDatas) {\n    return <Skeleton />\n  }\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.name)}\n          textTransform=\"uppercase\"\n        >\n          {t('Name')} {arrow(SORT_FIELD.name)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price')} {arrow(SORT_FIELD.priceUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSDChange)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price Change')} {arrow(SORT_FIELD.priceUSDChange)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n\n      <Break />\n      {sortedTokens.length > 0 ? (\n        <>\n          {sortedTokens.map((data, i) => {\n            if (data) {\n              return (\n                <React.Fragment key={data.address}>\n                  <DataRow index={(page - 1) * MAX_ITEMS + i} tokenData={data} />\n                  <Break />\n                </React.Fragment>\n              )\n            }\n            return null\n          })}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default TokenTable\n","import React, { useCallback, useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { PoolData } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\n *  3 = | # | Pool |     | Volume 24H |           |\n *  2 = |   | Pool |     | Volume 24H |           |\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\n\n  padding: 0 24px;\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\n    & :nth-child(4),\n    & :nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\n    & :nth-child(4),\n    & :nth-child(5),\n    & :nth-child(6),\n    & :nth-child(7) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 480px) {\n    grid-template-columns: 2.5fr repeat(1, 1fr);\n    > *:nth-child(1) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(Link)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst SORT_FIELD = {\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  volumeUSDWeek: 'volumeUSDWeek',\n  lpFees24h: 'lpFees24h',\n  lpApr7d: 'lpApr7d',\n}\n\nconst LoadingRow: React.FC = () => (\n  <ResponsiveGrid>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </ResponsiveGrid>\n)\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\n  return (\n    <LinkWrapper to={`/info/pool/${poolData.address}`}>\n      <ResponsiveGrid>\n        <Text>{index + 1}</Text>\n        <Flex>\n          <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} />\n          <Text ml=\"8px\">\n            {poolData.token0.symbol}/{poolData.token1.symbol}\n          </Text>\n        </Flex>\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\ninterface PoolTableProps {\n  poolDatas: PoolData[]\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\n}\n\nconst PoolTable: React.FC<PoolTableProps> = ({ poolDatas, loading }) => {\n  // for sorting\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  // pagination\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n      extraPages = 0\n    }\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\n  }, [poolDatas])\n\n  const sortedPools = useMemo(() => {\n    return poolDatas\n      ? poolDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [page, poolDatas, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Pool')}\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n      <Break />\n      {sortedPools.length > 0 ? (\n        <>\n          {sortedPools.map((poolData, i) => {\n            if (poolData) {\n              return (\n                <React.Fragment key={poolData.address}>\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\n                  <Break />\n                </React.Fragment>\n              )\n            }\n            return null\n          })}\n          {loading && <LoadingRow />}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          {/* spacer */}\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default PoolTable\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Bar } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { BarChartLoader } from 'views/Info/components/ChartLoaders'\nimport { useTranslation } from 'contexts/Localization'\n\nexport type LineChartProps = {\n  data: any[]\n  height?: string\n  chartHeight?: string\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CustomBar = ({\n  x,\n  y,\n  width,\n  height,\n  fill,\n}: {\n  x: number\n  y: number\n  width: number\n  height: number\n  fill: string\n}) => {\n  return (\n    <g>\n      <rect x={x} y={y} fill={fill} width={width} height={height} rx=\"2\" />\n    </g>\n  )\n}\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(payload.time.toLocaleString(locale, { year: 'numeric', day: 'numeric', month: 'short' }))\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\nconst Chart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <BarChartLoader />\n  }\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        data={data}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          setHoverDate(undefined)\n          setHoverValue(undefined)\n        }}\n      >\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => time.toLocaleDateString(undefined, { day: '2-digit' })}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          color={theme.colors.textSubtle}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ fill: theme.colors.backgroundDisabled }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater\n              locale={locale}\n              payload={props.payload}\n              setHoverValue={setHoverValue}\n              setHoverDate={setHoverDate}\n            />\n          )}\n        />\n        <Bar\n          dataKey=\"value\"\n          fill={theme.colors.primary}\n          shape={(props) => (\n            <CustomBar height={props.height} width={props.width} x={props.x} y={props.y} fill={theme.colors.primary} />\n          )}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default Chart\n","// TODO PCS refactor ternaries\n/* eslint-disable no-nested-ternary */\nimport React, { useCallback, useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { formatDistanceToNowStrict } from 'date-fns'\nimport { Text, Flex, Box, Radio, Skeleton, LinkExternal, ArrowForwardIcon, ArrowBackIcon } from '@pancakeswap/uikit'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport { Transaction, TransactionType } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\nconst Wrapper = styled.div`\n  width: 100%;\n`\n\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 2fr 0.8fr repeat(4, 1fr);\n  padding: 0 24px;\n  @media screen and (max-width: 940px) {\n    grid-template-columns: 2fr repeat(4, 1fr);\n    & > *:nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 2fr repeat(2, 1fr);\n    & > *:nth-child(5) {\n      display: none;\n    }\n    & > *:nth-child(3) {\n      display: none;\n    }\n    & > *:nth-child(4) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 2fr 1fr;\n    & > *:nth-child(5) {\n      display: none;\n    }\n    & > *:nth-child(3) {\n      display: none;\n    }\n    & > *:nth-child(4) {\n      display: none;\n    }\n    & > *:nth-child(2) {\n      display: none;\n    }\n  }\n`\n\nconst RadioGroup = styled(Flex)`\n  align-items: center;\n  margin-right: 16px;\n  margin-top: 8px;\n  cursor: pointer;\n`\n\nconst SORT_FIELD = {\n  amountUSD: 'amountUSD',\n  timestamp: 'timestamp',\n  sender: 'sender',\n  amountToken0: 'amountToken0',\n  amountToken1: 'amountToken1',\n}\n\nconst TableLoader: React.FC = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<{ transaction: Transaction }> = ({ transaction }) => {\n  const { t } = useTranslation()\n  const abs0 = Math.abs(transaction.amountToken0)\n  const abs1 = Math.abs(transaction.amountToken1)\n  const outputTokenSymbol = transaction.amountToken0 < 0 ? transaction.token0Symbol : transaction.token1Symbol\n  const inputTokenSymbol = transaction.amountToken1 < 0 ? transaction.token0Symbol : transaction.token1Symbol\n\n  return (\n    <ResponsiveGrid>\n      <LinkExternal href={getBscScanLink(transaction.hash, 'transaction')}>\n        <Text>\n          {transaction.type === TransactionType.MINT\n            ? t('Add %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })\n            : transaction.type === TransactionType.SWAP\n            ? t('Swap %token0% for %token1%', { token0: inputTokenSymbol, token1: outputTokenSymbol })\n            : t('Remove %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })}\n        </Text>\n      </LinkExternal>\n      <Text>${formatAmount(transaction.amountUSD)}</Text>\n      <Text>\n        <Text>{`${formatAmount(abs0)} ${transaction.token0Symbol}`}</Text>\n      </Text>\n      <Text>\n        <Text>{`${formatAmount(abs1)} ${transaction.token1Symbol}`}</Text>\n      </Text>\n      <LinkExternal href={getBscScanLink(transaction.sender, 'address')}>\n        {truncateHash(transaction.sender)}\n      </LinkExternal>\n      <Text>{formatDistanceToNowStrict(parseInt(transaction.timestamp, 10) * 1000)}</Text>\n    </ResponsiveGrid>\n  )\n}\n\nconst TransactionTable: React.FC<{\n  transactions: Transaction[]\n}> = ({ transactions }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.timestamp)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n\n  const [txFilter, setTxFilter] = useState<TransactionType | undefined>(undefined)\n\n  const sortedTransactions = useMemo(() => {\n    const toBeAbsList = [SORT_FIELD.amountToken0, SORT_FIELD.amountToken1]\n    return transactions\n      ? transactions\n          .slice()\n          .sort((a, b) => {\n            if (a && b) {\n              const firstField = a[sortField as keyof Transaction]\n              const secondField = b[sortField as keyof Transaction]\n              const [first, second] = toBeAbsList.includes(sortField)\n                ? [Math.abs(firstField as number), Math.abs(secondField as number)]\n                : [firstField, secondField]\n              return first > second ? (sortDirection ? -1 : 1) * 1 : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .filter((x) => {\n            return txFilter === undefined || x.type === txFilter\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [transactions, page, sortField, sortDirection, txFilter])\n\n  // Update maxPage based on amount of items & applied filtering\n  useEffect(() => {\n    if (transactions) {\n      const filteredTransactions = transactions.filter((tx) => {\n        return txFilter === undefined || tx.type === txFilter\n      })\n      if (filteredTransactions.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE))\n      } else {\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE) + 1)\n      }\n    }\n  }, [transactions, txFilter])\n\n  const handleFilter = useCallback(\n    (newFilter: TransactionType) => {\n      if (newFilter !== txFilter) {\n        setTxFilter(newFilter)\n        setPage(1)\n      }\n    },\n    [txFilter],\n  )\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <Wrapper>\n      <Flex mb=\"16px\">\n        <Flex flexDirection={['column', 'row']}>\n          <RadioGroup onClick={() => handleFilter(undefined)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === undefined} />\n            <Text ml=\"8px\">{t('All')}</Text>\n          </RadioGroup>\n\n          <RadioGroup onClick={() => handleFilter(TransactionType.SWAP)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.SWAP} />\n            <Text ml=\"8px\">{t('Swaps')}</Text>\n          </RadioGroup>\n        </Flex>\n\n        <Flex flexDirection={['column', 'row']}>\n          <RadioGroup onClick={() => handleFilter(TransactionType.MINT)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.MINT} />\n            <Text ml=\"8px\">{t('Adds')}</Text>\n          </RadioGroup>\n\n          <RadioGroup onClick={() => handleFilter(TransactionType.BURN)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.BURN} />\n            <Text ml=\"8px\">{t('Removes')}</Text>\n          </RadioGroup>\n        </Flex>\n      </Flex>\n      <TableWrapper>\n        <ResponsiveGrid>\n          <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n            {t('Action')}\n          </Text>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountUSD)}\n            textTransform=\"uppercase\"\n          >\n            {t('Total Value')} {arrow(SORT_FIELD.amountUSD)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountToken0)}\n            textTransform=\"uppercase\"\n          >\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken0)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountToken1)}\n            textTransform=\"uppercase\"\n          >\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken1)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.sender)}\n            textTransform=\"uppercase\"\n          >\n            {t('Account')} {arrow(SORT_FIELD.sender)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.timestamp)}\n            textTransform=\"uppercase\"\n          >\n            {t('Time')} {arrow(SORT_FIELD.timestamp)}\n          </ClickableColumnHeader>\n        </ResponsiveGrid>\n        <Break />\n\n        {transactions ? (\n          <>\n            {sortedTransactions.map((transaction, index) => {\n              if (transaction) {\n                return (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <React.Fragment key={index}>\n                    <DataRow transaction={transaction} />\n                    <Break />\n                  </React.Fragment>\n                )\n              }\n              return null\n            })}\n            {sortedTransactions.length === 0 ? (\n              <Flex justifyContent=\"center\">\n                <Text>{t('No Transactions')}</Text>\n              </Flex>\n            ) : undefined}\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  setPage(page === 1 ? page : page - 1)\n                }}\n              >\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n              <Arrow\n                onClick={() => {\n                  setPage(page === maxPage ? page : page + 1)\n                }}\n              >\n                <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n              </Arrow>\n            </PageButtons>\n          </>\n        ) : (\n          <>\n            <TableLoader />\n            {/* spacer */}\n            <Box />\n          </>\n        )}\n      </TableWrapper>\n    </Wrapper>\n  )\n}\n\nexport default TransactionTable\n","import React, { useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, Text, Heading, Card, Skeleton } from '@pancakeswap/uikit'\nimport { fromUnixTime } from 'date-fns'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport {\n  useAllPoolData,\n  useAllTokenData,\n  useProtocolChartData,\n  useProtocolData,\n  useProtocolTransactions,\n} from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\n\nexport const ChartCardsContainer = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  padding: 0;\n  gap: 1em;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  } ;\n`\n\nconst Overview: React.FC = () => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const [liquidityHover, setLiquidityHover] = useState<number | undefined>()\n  const [liquidityDateHover, setLiquidityDateHover] = useState<string | undefined>()\n  const [volumeHover, setVolumeHover] = useState<number | undefined>()\n  const [volumeDateHover, setVolumeDateHover] = useState<string | undefined>()\n\n  const [protocolData] = useProtocolData()\n  const [chartData] = useProtocolChartData()\n  const [transactions] = useProtocolTransactions()\n\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\n\n  // Getting latest liquidity and volumeUSD to display on top of chart when not hovered\n  useEffect(() => {\n    if (volumeHover == null && protocolData) {\n      setVolumeHover(protocolData.volumeUSD)\n    }\n  }, [protocolData, volumeHover])\n  useEffect(() => {\n    if (liquidityHover == null && protocolData) {\n      setLiquidityHover(protocolData.liquidityUSD)\n    }\n  }, [liquidityHover, protocolData])\n\n  const formattedLiquidityData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const somePoolsAreLoading = useMemo(() => {\n    return Object.values(allPoolData).some((pool) => !pool.data)\n  }, [allPoolData])\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\n        {t('PancakeSwap Info & Analytics')}\n      </Heading>\n      <ChartCardsContainer>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Liquidity')}\n            </Text>\n            {liquidityHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(liquidityHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{liquidityDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <LineChart\n                data={formattedLiquidityData}\n                setHoverValue={setLiquidityHover}\n                setHoverDate={setLiquidityDateHover}\n              />\n            </Box>\n          </Box>\n        </Card>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Volume 24H')}\n            </Text>\n            {volumeHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(volumeHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{volumeDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <BarChart data={formattedVolumeData} setHoverValue={setVolumeHover} setHoverDate={setVolumeDateHover} />\n            </Box>\n          </Box>\n        </Card>\n      </ChartCardsContainer>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} loading={somePoolsAreLoading} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Transactions')}\n      </Heading>\n      <TransactionTable transactions={transactions} />\n    </Page>\n  )\n}\n\nexport default Overview\n","import React, { useMemo } from 'react'\nimport { Text, Heading, Card } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { useAllPoolData, usePoolDatas } from 'state/info/hooks'\nimport { useWatchlistPools } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\n\nconst PoolsOverview: React.FC = () => {\n  const { t } = useTranslation()\n\n  // get all the pool datas that exist\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const [savedPools] = useWatchlistPools()\n  const watchlistPools = usePoolDatas(savedPools)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      <Card>\n        {watchlistPools.length > 0 ? (\n          <PoolTable poolDatas={watchlistPools} />\n        ) : (\n          <Text px=\"24px\" py=\"16px\">\n            {t('Saved pools will appear here')}\n          </Text>\n        )}\n      </Card>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-pools-title\">\n        {t('All Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} />\n    </Page>\n  )\n}\n\nexport default PoolsOverview\n","import React, { useRef, useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { createChart, IChartApi } from 'lightweight-charts'\nimport { format } from 'date-fns'\nimport useTheme from 'hooks/useTheme'\nimport { CandleChartLoader } from 'views/Info/components/ChartLoaders'\n\nconst CANDLE_CHART_HEIGHT = 250\n\nexport type LineChartProps = {\n  data: any[]\n  setValue?: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setLabel?: Dispatch<SetStateAction<string | undefined>> // used for value label on hover\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CandleChart = ({ data, setValue, setLabel, ...rest }: LineChartProps) => {\n  const { theme } = useTheme()\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const chartRef = useRef<HTMLDivElement>(null)\n  const [chartCreated, setChart] = useState<IChartApi | undefined>()\n\n  const handleResize = useCallback(() => {\n    if (chartCreated && chartRef?.current?.parentElement) {\n      chartCreated.resize(chartRef.current.parentElement.clientWidth - 32, CANDLE_CHART_HEIGHT)\n      chartCreated.timeScale().fitContent()\n      chartCreated.timeScale().scrollToPosition(0, false)\n    }\n  }, [chartCreated, chartRef])\n\n  // add event listener for resize\n  const isClient = typeof window === 'object'\n  useEffect(() => {\n    if (!isClient) {\n      return null\n    }\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [isClient, chartRef, handleResize]) // Empty array ensures that effect is only run on mount and unmount\n\n  // if chart not instantiated in canvas, create it\n  useEffect(() => {\n    if (!chartCreated && data && !!chartRef?.current?.parentElement) {\n      const chart = createChart(chartRef.current, {\n        height: CANDLE_CHART_HEIGHT,\n        width: chartRef.current.parentElement.clientWidth - 32,\n        layout: {\n          backgroundColor: 'transparent',\n          textColor: theme.colors.textSubtle,\n          fontFamily: 'Kanit, sans-serif',\n          fontSize: 12,\n        },\n        rightPriceScale: {\n          scaleMargins: {\n            top: 0.1,\n            bottom: 0.1,\n          },\n          borderVisible: false,\n        },\n        timeScale: {\n          borderVisible: false,\n          secondsVisible: true,\n          tickMarkFormatter: (unixTime: number) => {\n            return format(unixTime * 1000, 'MM/dd h:mm a')\n          },\n        },\n        watermark: {\n          visible: false,\n        },\n        grid: {\n          horzLines: {\n            visible: false,\n          },\n          vertLines: {\n            visible: false,\n          },\n        },\n        crosshair: {\n          horzLine: {\n            visible: false,\n            labelVisible: false,\n          },\n          mode: 1,\n          vertLine: {\n            visible: true,\n            labelVisible: false,\n            style: 3,\n            width: 1,\n            color: theme.colors.textSubtle,\n            labelBackgroundColor: theme.colors.primary,\n          },\n        },\n      })\n\n      chart.timeScale().fitContent()\n      setChart(chart)\n    }\n  }, [chartCreated, data, setValue, theme])\n\n  useEffect(() => {\n    if (chartCreated && data) {\n      const series = chartCreated.addCandlestickSeries({\n        upColor: theme.colors.success,\n        downColor: theme.colors.failure,\n        borderDownColor: theme.colors.failure,\n        borderUpColor: theme.colors.success,\n        wickDownColor: theme.colors.failure,\n        wickUpColor: theme.colors.success,\n      })\n\n      series.setData(data)\n\n      // update the title when hovering on the chart\n      chartCreated.subscribeCrosshairMove((param) => {\n        if (\n          chartRef?.current &&\n          (param === undefined ||\n            param.time === undefined ||\n            (param && param.point && param.point.x < 0) ||\n            (param && param.point && param.point.x > chartRef.current.clientWidth) ||\n            (param && param.point && param.point.y < 0) ||\n            (param && param.point && param.point.y > CANDLE_CHART_HEIGHT))\n        ) {\n          // reset values\n          if (setValue) setValue(undefined)\n          if (setLabel) setLabel(undefined)\n        } else if (series && param) {\n          const timestamp = param.time as number\n          const now = new Date(timestamp * 1000)\n          const time = `${now.toLocaleString(locale, {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: '2-digit',\n            timeZone: 'UTC',\n          })} (UTC)`\n          const parsed = param.seriesPrices.get(series) as { open: number } | undefined\n          if (setValue) setValue(parsed?.open)\n          if (setLabel) setLabel(time)\n        }\n      })\n    }\n  }, [locale, chartCreated, data, setValue, setLabel, theme])\n\n  return (\n    <>\n      {!chartCreated && <CandleChartLoader />}\n      <div ref={chartRef} id=\"candle-chart\" {...rest} />\n    </>\n  )\n}\n\nexport default CandleChart\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from 'react'\nimport { RouteComponentProps, Link } from 'react-router-dom'\nimport {\n  Text,\n  Flex,\n  Box,\n  Button,\n  Card,\n  Breadcrumbs,\n  Heading,\n  Spinner,\n  LinkExternal,\n  useMatchBreakpoints,\n  ButtonMenu,\n  ButtonMenuItem,\n  HelpIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport Page from 'components/Layout/Page'\nimport { getBscScanLink } from 'utils'\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport { usePoolDatas, usePoolChartData, usePoolTransactions } from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport { useWatchlistPools } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\n\nconst ContentLayout = styled.div`\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-gap: 1em;\n  margin-top: 16px;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst TokenButton = styled(Flex)`\n  padding: 8px 0px;\n  margin-right: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst LockedTokensContainer = styled(Flex)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n  padding: 16px;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: 8px;\n  border-radius: 16px;\n  max-width: 280px;\n`\n\nconst PoolPage: React.FC<RouteComponentProps<{ address: string }>> = ({\n  match: {\n    params: { address: routeAddress },\n  },\n}) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n  const [showWeeklyData, setShowWeeklyData] = useState(0)\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {},\n  )\n\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const poolData = usePoolDatas([address])[0]\n  const chartData = usePoolChartData(address)\n  const transactions = usePoolTransactions(address)\n\n  const [watchlistPools, addPoolToWatchlist] = useWatchlistPools()\n\n  return (\n    <Page symbol={poolData ? `${poolData?.token0.symbol} / ${poolData?.token1.symbol}` : null}>\n      {poolData ? (\n        <>\n          <Flex justifyContent=\"space-between\" mb=\"16px\" flexDirection={['column', 'column', 'row']}>\n            <Breadcrumbs mb=\"32px\">\n              <Link to=\"/info\">\n                <Text color=\"primary\">{t('Info')}</Text>\n              </Link>\n              <Link to=\"/info/pools\">\n                <Text color=\"primary\">{t('Pools')}</Text>\n              </Link>\n              <Flex>\n                <Text mr=\"8px\">{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\n              </Flex>\n            </Breadcrumbs>\n            <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n              <LinkExternal mr=\"8px\" href={getBscScanLink(address, 'address')}>\n                {t('View on BscScan')}\n              </LinkExternal>\n              <SaveIcon fill={watchlistPools.includes(address)} onClick={() => addPoolToWatchlist(address)} />\n            </Flex>\n          </Flex>\n          <Flex flexDirection=\"column\">\n            <Flex alignItems=\"center\" mb={['8px', null]}>\n              <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} size={32} />\n              <Text\n                ml=\"38px\"\n                bold\n                fontSize={isXs || isSm ? '24px' : '40px'}\n                id=\"info-pool-pair-title\"\n              >{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection={['column', 'column', 'row']} mb={['8px', '8px', null]}>\n                <Link to={`/info/token/${poolData.token0.address}`}>\n                  <TokenButton>\n                    <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\n                      {`1 ${poolData.token0.symbol} =  ${formatAmount(poolData.token1Price, {\n                        notation: 'standard',\n                        displayThreshold: 0.001,\n                        tokenPrecision: true,\n                      })} ${poolData.token1.symbol}`}\n                    </Text>\n                  </TokenButton>\n                </Link>\n                <Link to={`/info/token/${poolData.token1.address}`}>\n                  <TokenButton ml={[null, null, '10px']}>\n                    <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\n                      {`1 ${poolData.token1.symbol} =  ${formatAmount(poolData.token0Price, {\n                        notation: 'standard',\n                        displayThreshold: 0.001,\n                        tokenPrecision: true,\n                      })} ${poolData.token0.symbol}`}\n                    </Text>\n                  </TokenButton>\n                </Link>\n              </Flex>\n              <Flex>\n                <Link to={`/add/${poolData.token0.address}/${poolData.token1.address}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </Link>\n                <Link to={`/swap?inputCurrency=${poolData.token0.address}&outputCurrency=${poolData.token1.address}`}>\n                  <Button>{t('Trade')}</Button>\n                </Link>\n              </Flex>\n            </Flex>\n          </Flex>\n          <ContentLayout>\n            <Box>\n              <Card>\n                <Box p=\"24px\">\n                  <Flex justifyContent=\"space-between\">\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                        {t('Liquidity')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${formatAmount(poolData.liquidityUSD)}\n                      </Text>\n                      <Percent value={poolData.liquidityUSDChange} />\n                    </Flex>\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                        {t('LP reward APR')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        {formatAmount(poolData.lpApr7d)}%\n                      </Text>\n                      <Flex alignItems=\"center\">\n                        <span ref={targetRef}>\n                          <HelpIcon color=\"textSubtle\" />\n                        </span>\n                        <Text ml=\"4px\" fontSize=\"12px\" color=\"textSubtle\">\n                          {t('7D performance')}\n                        </Text>\n                        {tooltipVisible && tooltip}\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                  <Text color=\"secondary\" bold mt=\"24px\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Total Tokens Locked')}\n                  </Text>\n                  <LockedTokensContainer>\n                    <Flex justifyContent=\"space-between\">\n                      <Flex>\n                        <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\n                        <Text small color=\"textSubtle\" ml=\"8px\">\n                          {poolData.token0.symbol}\n                        </Text>\n                      </Flex>\n                      <Text small>{formatAmount(poolData.liquidityToken0)}</Text>\n                    </Flex>\n                    <Flex justifyContent=\"space-between\">\n                      <Flex>\n                        <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\n                        <Text small color=\"textSubtle\" ml=\"8px\">\n                          {poolData.token1.symbol}\n                        </Text>\n                      </Flex>\n                      <Text small>{formatAmount(poolData.liquidityToken1)}</Text>\n                    </Flex>\n                  </LockedTokensContainer>\n                </Box>\n              </Card>\n              <Card mt=\"16px\">\n                <Flex flexDirection=\"column\" p=\"24px\">\n                  <ButtonMenu\n                    activeIndex={showWeeklyData}\n                    onItemClick={(index) => setShowWeeklyData(index)}\n                    scale=\"sm\"\n                    variant=\"subtle\"\n                  >\n                    <ButtonMenuItem width=\"100%\">{t('24H')}</ButtonMenuItem>\n                    <ButtonMenuItem width=\"100%\">{t('7D')}</ButtonMenuItem>\n                  </ButtonMenu>\n                  <Flex mt=\"24px\">\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n                        {showWeeklyData ? t('Volume 7D') : t('Volume 24H')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${showWeeklyData ? formatAmount(poolData.volumeUSDWeek) : formatAmount(poolData.volumeUSD)}\n                      </Text>\n                      <Percent value={showWeeklyData ? poolData.volumeUSDChangeWeek : poolData.volumeUSDChange} />\n                    </Flex>\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n                        {showWeeklyData ? t('LP reward fees 7D') : t('LP reward fees 24H')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${showWeeklyData ? formatAmount(poolData.lpFees7d) : formatAmount(poolData.lpFees24h)}\n                      </Text>\n                      <Text color=\"textSubtle\" fontSize=\"12px\">\n                        {t('out of $%totalFees% total fees', {\n                          totalFees: showWeeklyData\n                            ? formatAmount(poolData.totalFees7d)\n                            : formatAmount(poolData.totalFees24h),\n                        })}\n                      </Text>\n                    </Flex>\n                  </Flex>\n                </Flex>\n              </Card>\n            </Box>\n            <ChartCard variant=\"pool\" chartData={chartData} />\n          </ContentLayout>\n          <Heading mb=\"16px\" mt=\"40px\" scale=\"lg\">\n            {t('Transactions')}\n          </Heading>\n          <TransactionTable transactions={transactions} />\n        </>\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <Spinner />\n        </Flex>\n      )}\n    </Page>\n  )\n}\n\nexport default PoolPage\n","import React, { useMemo, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Card } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { useAllTokenData } from 'state/info/hooks'\nimport { TokenData } from 'state/info/types'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CardWrapper = styled(Link)`\n  display: inline-block;\n  min-width: 190px;\n  margin-left: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst TopMoverCard = styled(Box)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 16px;\n`\n\nexport const ScrollableRow = styled.div`\n  width: 100%;\n  overflow-x: auto;\n  padding: 16px 0;\n  white-space: nowrap;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst DataCard = ({ tokenData }: { tokenData: TokenData }) => {\n  return (\n    <CardWrapper to={`/info/token/${tokenData.address}`}>\n      <TopMoverCard>\n        <Flex>\n          <Box width=\"32px\" height=\"32px\">\n            {/* wrapped in a box because of alignment issues between img and svg */}\n            <CurrencyLogo address={tokenData.address} size=\"32px\" />\n          </Box>\n          <Box ml=\"16px\">\n            <Text>{tokenData.symbol}</Text>\n            <Flex alignItems=\"center\">\n              <Text fontSize=\"14px\" mr=\"6px\" lineHeight=\"16px\">\n                ${formatAmount(tokenData.priceUSD)}\n              </Text>\n              <Percent fontSize=\"14px\" value={tokenData.priceUSDChange} />\n            </Flex>\n          </Box>\n        </Flex>\n      </TopMoverCard>\n    </CardWrapper>\n  )\n}\n\nconst TopTokenMovers: React.FC = () => {\n  const allTokens = useAllTokenData()\n  const { t } = useTranslation()\n\n  const topPriceIncrease = useMemo(() => {\n    return Object.values(allTokens)\n      .sort(({ data: a }, { data: b }) => {\n        // eslint-disable-next-line no-nested-ternary\n        return a && b ? (Math.abs(a?.priceUSDChange) > Math.abs(b?.priceUSDChange) ? -1 : 1) : -1\n      })\n      .slice(0, Math.min(20, Object.values(allTokens).length))\n  }, [allTokens])\n\n  const increaseRef = useRef<HTMLDivElement>(null)\n  const moveLeftRef = useRef<boolean>(true)\n\n  useEffect(() => {\n    const scrollInterval = setInterval(() => {\n      if (increaseRef.current) {\n        if (increaseRef.current.scrollLeft === increaseRef.current.scrollWidth - increaseRef.current.clientWidth) {\n          moveLeftRef.current = false\n        } else if (increaseRef.current.scrollLeft === 0) {\n          moveLeftRef.current = true\n        }\n        increaseRef.current.scrollTo(\n          moveLeftRef.current ? increaseRef.current.scrollLeft + 1 : increaseRef.current.scrollLeft - 1,\n          0,\n        )\n      }\n    }, 30)\n\n    return () => {\n      clearInterval(scrollInterval)\n    }\n  }, [])\n\n  if (topPriceIncrease.length === 0 || !topPriceIncrease.some((entry) => entry.data)) {\n    return null\n  }\n\n  return (\n    <Card my=\"16px\">\n      <Text ml=\"16px\" mt=\"8px\">\n        {t('Top Movers')}\n      </Text>\n      <ScrollableRow ref={increaseRef}>\n        {topPriceIncrease.map((entry) =>\n          entry.data ? <DataCard key={`top-card-token-${entry.data?.address}`} tokenData={entry.data} /> : null,\n        )}\n      </ScrollableRow>\n    </Card>\n  )\n}\n\nexport default TopTokenMovers\n","import React, { useMemo, useEffect } from 'react'\nimport { Text, Heading, Card } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport { useAllTokenData, useTokenDatas } from 'state/info/hooks'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport TopTokenMovers from 'views/Info/components/TopTokenMovers'\n\nconst TokensOverview: React.FC = () => {\n  const { t } = useTranslation()\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const [savedTokens] = useWatchlistTokens()\n  const watchListTokens = useTokenDatas(savedTokens)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      {savedTokens.length > 0 ? (\n        <TokenTable tokenDatas={watchListTokens} />\n      ) : (\n        <Card>\n          <Text py=\"16px\" px=\"24px\">\n            {t('Saved tokens will appear here')}\n          </Text>\n        </Card>\n      )}\n      <TopTokenMovers />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-tokens-title\">\n        {t('All Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n    </Page>\n  )\n}\n\nexport default TokensOverview\n","import { useState, useEffect } from 'react'\n\n// endpoint to check asset exists and get url to CMC page\n// returns 400 status code if token is not on CMC\nconst CMC_ENDPOINT = 'https://3rdparty-apis.coinmarketcap.com/v1/cryptocurrency/contract?address='\n\n/**\n * Check if asset exists on CMC, if exists\n * return  url, if not return undefined\n * @param address token address (all lowercase, checksummed are not supported by CMC)\n */\nconst useCMCLink = (address: string): string | undefined => {\n  const [cmcPageUrl, setCMCPageUrl] = useState<string | undefined>(undefined)\n\n  useEffect(() => {\n    const fetchLink = async () => {\n      const result = await fetch(`${CMC_ENDPOINT}${address}`)\n      // if link exists, format the url\n      if (result.status === 200) {\n        result.json().then(({ data }) => {\n          setCMCPageUrl(data.url)\n        })\n      }\n    }\n    if (address) {\n      fetchLink()\n    }\n  }, [address])\n\n  return cmcPageUrl\n}\n\nexport default useCMCLink\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useMemo } from 'react'\nimport { RouteComponentProps, Link } from 'react-router-dom'\nimport { Duration } from 'date-fns'\nimport styled from 'styled-components'\nimport {\n  Text,\n  Box,\n  Heading,\n  Button,\n  Card,\n  Flex,\n  Breadcrumbs,\n  Link as UIKitLink,\n  LinkExternal,\n  Spinner,\n  Image,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport useCMCLink from 'views/Info/hooks/useCMCLink'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport {\n  usePoolDatas,\n  useTokenData,\n  usePoolsForToken,\n  useTokenChartData,\n  useTokenPriceData,\n  useTokenTransactions,\n} from 'state/info/hooks'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport { ONE_HOUR_SECONDS } from 'config/constants/info'\nimport { useTranslation } from 'contexts/Localization'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\n\nconst ContentLayout = styled.div`\n  margin-top: 16px;\n  display: grid;\n  grid-template-columns: 260px 1fr;\n  grid-gap: 1em;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst StyledCMCLink = styled(UIKitLink)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n\n  & :hover {\n    opacity: 0.8;\n  }\n`\nconst DEFAULT_TIME_WINDOW: Duration = { weeks: 1 }\n\nconst TokenPage: React.FC<RouteComponentProps<{ address: string }>> = ({\n  match: {\n    params: { address: routeAddress },\n  },\n}) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const cmcLink = useCMCLink(address)\n\n  const tokenData = useTokenData(address)\n  const poolsForToken = usePoolsForToken(address)\n  const poolDatas = usePoolDatas(poolsForToken ?? [])\n  const transactions = useTokenTransactions(address)\n  const chartData = useTokenChartData(address)\n\n  // pricing data\n  const priceData = useTokenPriceData(address, ONE_HOUR_SECONDS, DEFAULT_TIME_WINDOW)\n  const adjustedPriceData = useMemo(() => {\n    // Include latest available price\n    if (priceData && tokenData && priceData.length > 0) {\n      return [\n        ...priceData,\n        {\n          time: new Date().getTime() / 1000,\n          open: priceData[priceData.length - 1].close,\n          close: tokenData?.priceUSD,\n          high: tokenData?.priceUSD,\n          low: priceData[priceData.length - 1].close,\n        },\n      ]\n    }\n    return undefined\n  }, [priceData, tokenData])\n\n  const [watchlistTokens, addWatchlistToken] = useWatchlistTokens()\n\n  return (\n    <Page symbol={tokenData?.symbol}>\n      {tokenData ? (\n        !tokenData.exists ? (\n          <Card>\n            <Box p=\"16px\">\n              <Text>\n                {t('No pool has been created with this token yet. Create one')}\n                <Link style={{ display: 'inline', marginLeft: '6px' }} to={`/add/${address}`}>\n                  {t('here.')}\n                </Link>\n              </Text>\n            </Box>\n          </Card>\n        ) : (\n          <>\n            {/* Stuff on top */}\n            <Flex justifyContent=\"space-between\" mb=\"24px\" flexDirection={['column', 'column', 'row']}>\n              <Breadcrumbs mb=\"32px\">\n                <Link to=\"/info\">\n                  <Text color=\"primary\">{t('Info')}</Text>\n                </Link>\n                <Link to=\"/info/tokens\">\n                  <Text color=\"primary\">{t('Tokens')}</Text>\n                </Link>\n                <Flex>\n                  <Text mr=\"8px\">{tokenData.symbol}</Text>\n                  <Text>{`(${truncateHash(address)})`}</Text>\n                </Flex>\n              </Breadcrumbs>\n              <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n                <LinkExternal mr=\"8px\" color=\"primary\" href={getBscScanLink(address, 'address')}>\n                  {t('View on BscScan')}\n                </LinkExternal>\n                {cmcLink && (\n                  <StyledCMCLink href={cmcLink} rel=\"noopener noreferrer nofollow\" target=\"_blank\">\n                    <Image src=\"/images/CMC-logo.svg\" height={22} width={22} alt={t('View token on CoinMarketCap')} />\n                  </StyledCMCLink>\n                )}\n                <SaveIcon fill={watchlistTokens.includes(address)} onClick={() => addWatchlistToken(address)} />\n              </Flex>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection=\"column\" mb={['8px', null]}>\n                <Flex alignItems=\"center\">\n                  <CurrencyLogo size=\"32px\" address={address} />\n                  <Text\n                    ml=\"12px\"\n                    bold\n                    lineHeight=\"0.7\"\n                    fontSize={isXs || isSm ? '24px' : '40px'}\n                    id=\"info-token-name-title\"\n                  >\n                    {tokenData.name}\n                  </Text>\n                  <Text ml=\"12px\" lineHeight=\"1\" color=\"textSubtle\" fontSize={isXs || isSm ? '14px' : '20px'}>\n                    ({tokenData.symbol})\n                  </Text>\n                </Flex>\n                <Flex mt=\"8px\" ml=\"46px\" alignItems=\"center\">\n                  <Text mr=\"16px\" bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.priceUSD, { notation: 'standard' })}\n                  </Text>\n                  <Percent value={tokenData.priceUSDChange} fontWeight={600} />\n                </Flex>\n              </Flex>\n              <Flex>\n                <Link to={`/add/${address}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </Link>\n                <Link to={`/swap?inputCurrency=${address}`}>\n                  <Button>{t('Trade')}</Button>\n                </Link>\n              </Flex>\n            </Flex>\n\n            {/* data on the right side of chart */}\n            <ContentLayout>\n              <Card>\n                <Box p=\"24px\">\n                  <Text bold small color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Liquidity')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.liquidityUSD)}\n                  </Text>\n                  <Percent value={tokenData.liquidityUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\" textTransform=\"uppercase\">\n                    ${formatAmount(tokenData.volumeUSD)}\n                  </Text>\n                  <Percent value={tokenData.volumeUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 7D')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.volumeUSDWeek)}\n                  </Text>\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Transactions 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    {formatAmount(tokenData.txCount, { isInteger: true })}\n                  </Text>\n                </Box>\n              </Card>\n              {/* charts card */}\n              <ChartCard\n                variant=\"token\"\n                chartData={chartData}\n                tokenData={tokenData}\n                tokenPriceData={adjustedPriceData}\n              />\n            </ContentLayout>\n\n            {/* pools and transaction tables */}\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Pools')}\n            </Heading>\n\n            <PoolTable poolDatas={poolDatas} />\n\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Transactions')}\n            </Heading>\n\n            <TransactionTable transactions={transactions} />\n          </>\n        )\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <Spinner />\n        </Flex>\n      )}\n    </Page>\n  )\n}\n\nexport default TokenPage\n","import React from 'react'\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\nimport { isAddress } from 'ethers/lib/utils'\nimport TokenPage from './TokenPage'\n\nconst RedirectInvalidToken = (props: RouteComponentProps<{ address: string }>) => {\n  const {\n    match: {\n      params: { address },\n    },\n  } = props\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  if (!isAddress(address.toLowerCase())) {\n    return <Redirect to=\"/\" />\n  }\n  return <TokenPage {...props} />\n}\n\nexport default RedirectInvalidToken\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { PoolUpdater, ProtocolUpdater, TokenUpdater } from 'state/info/updaters'\nimport InfoNav from './components/InfoNav'\nimport Overview from './Overview'\nimport Pools from './Pools'\nimport PoolPage from './Pools/PoolPage'\nimport Tokens from './Tokens'\nimport RedirectInvalidToken from './Tokens/redirects'\n\nconst Info: React.FC = () => {\n  return (\n    <>\n      <ProtocolUpdater />\n      <PoolUpdater />\n      <TokenUpdater />\n      <InfoNav />\n      <Route path=\"/info\" exact>\n        <Overview />\n      </Route>\n      <Route path=\"/info/pools\" exact>\n        <Pools />\n      </Route>\n      <Route path=\"/info/tokens\" exact>\n        <Tokens />\n      </Route>\n      <Route exact path={['/info/tokens/:address', '/info/token/:address']} component={RedirectInvalidToken} />\n      <Route exact path={['/info/pools/:address', '/info/pool/:address', '/info/pair/:address']} component={PoolPage} />\n    </>\n  )\n}\n\nexport default Info\n","import React from 'react'\nimport { Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst Wrapper = styled(Flex)`\n  overflow-x: scroll;\n  padding: 0;\n  border-radius: 24px 24px 0 0;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  scrollbar-width: none; /* Firefox */\n`\n\nconst Inner = styled(Flex)`\n  justify-content: space-between;\n  background-color: ${({ theme }) => theme.colors.input};\n  width: 100%;\n`\n\ninterface TabProps {\n  isActive?: boolean\n  onClick?: () => void\n}\n\nexport const TabToggle = styled.button<TabProps>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  flex: 1;\n  border: 0;\n  outline: 0;\n  padding: 16px;\n  margin: 0;\n  border-radius: 24px 24px 0 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: ${({ theme, isActive }) => (isActive ? theme.colors.text : theme.colors.textSubtle)};\n  background-color: ${({ theme, isActive }) => (isActive ? theme.card.background : theme.colors.input)};\n`\n\ninterface TabToggleGroupProps {\n  children: React.ReactElement[]\n}\n\nexport const TabToggleGroup: React.FC<TabToggleGroupProps> = ({ children }) => {\n  return (\n    <Wrapper p={['0 4px', '0 16px']}>\n      <Inner>{children}</Inner>\n    </Wrapper>\n  )\n}\n"],"sourceRoot":""}