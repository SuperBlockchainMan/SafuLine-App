{"version":3,"sources":["views/Info/components/InfoCharts/ChartCard/index.tsx","views/Info/utils/infoDataHelpers.ts","state/info/queries/protocol/overview.ts","state/info/queries/protocol/chart.ts","state/info/queries/protocol/transactions.ts","state/info/queries/pools/topPools.ts","state/info/queries/pools/poolData.ts","views/Info/hooks/useBnbPrices.ts","state/info/queries/tokens/tokenData.ts","state/info/queries/tokens/topTokens.ts","state/info/updaters.ts","state/info/queries/search/index.ts","views/Info/components/CurrencyLogo/LogoLoader.tsx","views/Info/components/CurrencyLogo/index.tsx","views/Info/components/SaveIcon/index.tsx","views/Info/components/InfoSearch/index.tsx","views/Info/components/InfoNav/index.tsx","views/Info/components/InfoCharts/LineChart/index.tsx","views/Info/components/InfoTables/TokensTable.tsx","views/Info/components/InfoTables/PoolsTable.tsx","views/Info/components/InfoCharts/BarChart/index.tsx","views/Info/Overview/index.tsx","views/Info/Pools/index.tsx","views/Info/components/InfoCharts/CandleChart/index.tsx","views/Info/Pools/PoolPage.tsx","views/Info/components/TopTokenMovers/index.tsx","views/Info/Tokens/index.tsx","views/Info/hooks/useCMCLink.ts","views/Info/Tokens/TokenPage.tsx","views/Info/Tokens/redirects.tsx","views/Info/index.tsx","components/TabToggle/index.tsx"],"names":["ChartView","getAmountChange","valueNow","valueBefore","getPercentChange","getChangeForPeriod","valueOnePeriodAgo","valueTwoPeriodsAgo","currentPeriodAmount","previousPeriodAmount","getLpFeesAndApr","volumeUSD","volumeUSDWeek","liquidityUSD","totalFees24h","TOTAL_FEE","totalFees7d","lpFees24h","LP_HOLDERS_FEE","lpFees7d","lpApr7d","WEEKS_IN_YEAR","Infinity","getOverviewData","block","a","query","gql","request","INFO_CLIENT","data","error","console","formatPancakeFactoryResponse","rawPancakeFactory","totalTransactions","parseFloat","totalVolumeUSD","totalLiquidityUSD","useFetchProtocolData","useState","fetchState","setFetchState","getDeltaTimestamps","t24","t48","useBlocksFromTimestamps","blocks","blockError","block24","block48","useEffect","fetch","number","undefined","error24","data24","error48","data48","anyError","overviewData","pancakeFactories","overviewData24","overviewData48","allDataAvailable","volumeUSDChange","liquidityUSDChange","txCount","txCountChange","protocolData","PANCAKE_DAY_DATAS","getOverviewChartData","skip","startTime","PCS_V2_START","pancakeDayDatas","map","mapDayData","useFetchGlobalChartData","overviewChartData","setOverviewChartData","setError","fetchChartData","GLOBAL_TRANSACTIONS","fetchTopTransactions","mints","mapMints","burns","mapBurns","swaps","mapSwaps","sort","b","parseInt","timestamp","fetchTopPools","timestamp24hAgo","blacklist","TOKEN_BLACKLIST","pairDayDatas","p","id","split","useTopPoolAddresses","topPoolAddresses","setTopPoolAddresses","addresses","length","POOL_AT_BLOCK","pools","blockString","addressesString","join","fetchPoolData","block24h","block48h","block7d","block14d","poolAddresses","parsePoolData","pairs","reduce","accum","poolData","reserveUSD","reserve0","reserve1","token0Price","token1Price","usePoolDatas","t24h","t48h","t7d","t14d","formattedPoolData","now","formattedPoolData24h","oneDayAgo","formattedPoolData48h","twoDaysAgo","formattedPoolData7d","oneWeekAgo","formattedPoolData14d","twoWeeksAgo","formatted","address","current","oneDay","twoDays","week","twoWeeks","volumeUSDChangeWeek","liquidityToken0","liquidityToken1","token0","name","symbol","token1","allBlocksAvailable","BNB_PRICES","fetchBnbPrices","blockWeek","bnbPrices","bnbPrice","twoDay","oneWeek","TOKEN_AT_BLOCK","tokens","fetchTokenData","tokenAddresses","parseTokenData","tokenData","derivedBNB","derivedUSD","tradeVolumeUSD","totalLiquidity","useFetchedTokenDatas","prices","setPrices","tWeek","useBnbPrices","parsed","parsed24","parsed48","parsed7d","parsed14d","liquidityUSDOneDayAgo","liquidityToken","priceUSD","priceUSDOneDay","priceUSDWeek","priceUSDChange","priceUSDChangeWeek","exists","fetchTopTokens","tokenDayDatas","t","useTopTokenAddresses","topTokenAddresses","setTopTokenAddresses","ProtocolUpdater","useProtocolData","setProtocolData","fetchedProtocolData","useProtocolChartData","chartData","updateChartData","fetchedChartData","chartError","useProtocolTransactions","transactions","updateTransactions","PoolUpdater","updatePoolData","useUpdatePoolData","addPoolKeys","useAddPoolKeys","allPoolData","useAllPoolData","unfetchedPoolAddresses","useMemo","Object","keys","push","poolDataError","poolDatas","values","TokenUpdater","updateTokenDatas","useUpdateTokenData","addTokenKeys","useAddTokenKeys","allTokenData","useAllTokenData","unfetchedTokenAddresses","key","tokenDataError","tokenDatas","TOKEN_SEARCH","POOL_SEARCH","getIds","entityArrays","ids","entities","currentTokenArray","entity","Array","from","Set","useFetchSearchResults","searchString","loading","searchResults","setSearchResults","searchStringTooShort","MINIMUM_SEARCH_CHARACTERS","toUpperCase","charAt","slice","toLowerCase","tokenIds","asAddress","asSymbol","asName","as0","as1","search","tokenDatasFull","useTokenDatas","poolDatasFull","tokensLoading","poolsLoading","BAD_SRCS","LogoLoader","src","alt","rest","refresh","srcFailedLoading","includes","onError","i","StyledLogo","styled","size","theme","colors","background","text","CurrencyLogo","checksummedAddress","isAddress","DoubleCurrencyWrapper","div","DoubleCurrencyLogo","address0","address1","toString","HoverIcon","SaveIcon","fill","useTheme","stroke","warning","color","textDisabled","Container","StyledInput","Input","inputSecondary","Menu","hide","secondary","mediaQueries","sm","md","Blackout","ResponsiveGrid","Break","cardBorder","HoverText","HoverRowLink","OptionButton","enabled","primary","card","tokenIncludesSearchTerm","token","value","Search","history","useHistory","useMatchBreakpoints","isXs","isSm","useTranslation","inputRef","useRef","menuRef","showMoreRef","showMenu","setShowMenu","setValue","debouncedSearchTerm","useDebounce","tokensShown","setTokensShown","poolsShown","setPoolsShown","handleOutsideClick","e","menuClick","contains","target","inputCLick","showMoreClick","document","addEventListener","querySelector","style","overflow","removeEventListener","useWatchlistTokens","savedTokens","addSavedToken","useWatchlistPools","savedPools","addSavedPool","handleItemClick","to","watchListTokenData","watchListTokenLoading","watchListPoolData","watchListPoolLoading","showWatchlist","setShowWatchlist","tokensForList","filter","t0","t1","poolForList","pool","poolIncludesSearchTerm","p0","p1","type","onChange","placeholder","ref","onFocus","mb","onClick","bold","textAlign","fontSize","ml","marginLeft","stopPropagation","formatAmount","isLoading","noTokensFound","noWatchlistTokens","showMessage","noTokensMessage","contentUnderTokenList","whiteSpace","noPoolsFound","noWatchlistPools","noPoolsMessage","contentUnderPoolList","NavWrapper","Flex","gradients","cardHeader","InfoNav","activeIndex","useRouteMatch","scale","variant","as","Link","width","HoverUpdater","locale","payload","setHoverValue","setHoverDate","time","toLocaleString","year","day","month","LineChart","currentLanguage","ResponsiveContainer","AreaChart","height","margin","top","right","left","bottom","onMouseLeave","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","axisLine","tickLine","tickFormatter","toLocaleDateString","minTickGap","YAxis","tickCount","val","orientation","tick","dx","textSubtle","Tooltip","cursor","contentStyle","display","formatter","tooltipValue","props","Area","strokeWidth","LinkWrapper","ResponsiveLogo","TableLoader","loadingRow","DataRow","index","alignItems","fontWeight","notation","Percent","SORT_FIELD","TokenTable","maxItems","sortField","setSortField","sortDirection","setSortDirection","page","setPage","maxPage","setMaxPage","extraPages","Math","floor","sortedTokens","handleSort","useCallback","newField","arrow","field","textTransform","Fragment","LoadingRow","PoolTable","ITEMS_PER_INFO_TABLE_PAGE","sortedPools","CustomBar","x","y","rx","Chart","BarChart","backgroundDisabled","Bar","shape","ChartCardsContainer","Overview","liquidityHover","setLiquidityHover","liquidityDateHover","setLiquidityDateHover","volumeHover","setVolumeHover","volumeDateHover","setVolumeDateHover","currentDate","Date","formattedLiquidityData","fromUnixTime","date","formattedVolumeData","allTokens","formattedTokens","somePoolsAreLoading","some","Page","mt","PoolsOverview","watchlistPools","px","py","CandleChart","setLabel","chartRef","chartCreated","setChart","handleResize","parentElement","resize","clientWidth","timeScale","fitContent","scrollToPosition","isClient","window","chart","createChart","layout","backgroundColor","textColor","fontFamily","rightPriceScale","scaleMargins","borderVisible","secondsVisible","tickMarkFormatter","unixTime","format","watermark","visible","grid","horzLines","vertLines","crosshair","horzLine","labelVisible","mode","vertLine","labelBackgroundColor","series","addCandlestickSeries","upColor","success","downColor","failure","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","subscribeCrosshairMove","param","point","hour","minute","timeZone","seriesPrices","get","open","ChartCard","tokenPriceData","VOLUME","view","setView","hoverValue","hoverDate","formattedTvlData","TabToggle","isActive","LIQUIDITY","PRICE","flexDirection","pt","valueToDisplay","getLatestValueDisplay","small","ContentLayout","TokenButton","LockedTokensContainer","PoolPage","routeAddress","match","params","showWeeklyData","setShowWeeklyData","useTooltip","tooltip","tooltipVisible","targetRef","scrollTo","usePoolChartData","usePoolTransactions","addPoolToWatchlist","justifyContent","mr","href","getBscScanLink","displayThreshold","tokenPrecision","flex","onItemClick","totalFees","CardWrapper","TopMoverCard","Box","radii","ScrollableRow","DataCard","lineHeight","TopTokenMovers","topPriceIncrease","abs","min","increaseRef","moveLeftRef","scrollInterval","setInterval","scrollLeft","scrollWidth","clearInterval","entry","my","TokensOverview","watchListTokens","useCMCLink","cmcPageUrl","setCMCPageUrl","result","status","json","then","url","fetchLink","StyledCMCLink","UIKitLink","DEFAULT_TIME_WINDOW","weeks","TokenPage","cmcLink","useTokenData","poolsForToken","usePoolsForToken","useTokenTransactions","useTokenChartData","priceData","useTokenPriceData","ONE_HOUR_SECONDS","adjustedPriceData","getTime","close","high","low","watchlistTokens","addWatchlistToken","truncateHash","rel","isInteger","RedirectInvalidToken","Info","path","exact","Pools","Tokens","component","Wrapper","Inner","input","button","TabToggleGroup","children"],"mappings":"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","file":"static/js/40.985d117a.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react'\nimport { Text, Box, Card, Flex, Skeleton } from '@pancakeswap/uikit'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport CandleChart from 'views/Info/components/InfoCharts/CandleChart'\nimport { TabToggleGroup, TabToggle } from 'components/TabToggle'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { ChartEntry, TokenData, PriceChartEntry } from 'state/info/types'\nimport { fromUnixTime } from 'date-fns'\n\nenum ChartView {\n  LIQUIDITY,\n  VOLUME,\n  PRICE,\n}\n\ninterface ChartCardProps {\n  variant: 'pool' | 'token'\n  chartData: ChartEntry[]\n  tokenData?: TokenData\n  tokenPriceData?: PriceChartEntry[]\n}\n\nconst ChartCard: React.FC<ChartCardProps> = ({ variant, chartData, tokenData, tokenPriceData }) => {\n  const [view, setView] = useState(ChartView.VOLUME)\n  const [hoverValue, setHoverValue] = useState<number | undefined>()\n  const [hoverDate, setHoverDate] = useState<string | undefined>()\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\n\n  const formattedTvlData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const getLatestValueDisplay = () => {\n    let valueToDisplay = null\n    if (hoverValue) {\n      valueToDisplay = formatAmount(hoverValue)\n    } else if (view === ChartView.VOLUME && formattedVolumeData.length > 0) {\n      valueToDisplay = formatAmount(formattedVolumeData[formattedVolumeData.length - 1]?.value)\n    } else if (view === ChartView.LIQUIDITY && formattedTvlData.length > 0) {\n      valueToDisplay = formatAmount(formattedTvlData[formattedTvlData.length - 1]?.value)\n    } else if (view === ChartView.PRICE && tokenData?.priceUSD) {\n      valueToDisplay = formatAmount(tokenData.priceUSD)\n    }\n\n    return valueToDisplay ? (\n      <Text fontSize=\"24px\" bold>\n        ${valueToDisplay}\n      </Text>\n    ) : (\n      <Skeleton height=\"36px\" width=\"128px\" />\n    )\n  }\n\n  return (\n    <Card>\n      <TabToggleGroup>\n        <TabToggle isActive={view === ChartView.VOLUME} onClick={() => setView(ChartView.VOLUME)}>\n          <Text>{t('Volume')}</Text>\n        </TabToggle>\n        <TabToggle isActive={view === ChartView.LIQUIDITY} onClick={() => setView(ChartView.LIQUIDITY)}>\n          <Text>{t('Liquidity')}</Text>\n        </TabToggle>\n        {variant === 'token' && (\n          <TabToggle isActive={view === ChartView.PRICE} onClick={() => setView(ChartView.PRICE)}>\n            <Text>{t('Price')}</Text>\n          </TabToggle>\n        )}\n      </TabToggleGroup>\n\n      <Flex flexDirection=\"column\" px=\"24px\" pt=\"24px\">\n        {getLatestValueDisplay()}\n        <Text small color=\"secondary\">\n          {hoverDate || currentDate}\n        </Text>\n      </Flex>\n\n      <Box px=\"24px\" height={variant === 'token' ? '250px' : '335px'}>\n        {view === ChartView.LIQUIDITY ? (\n          <LineChart data={formattedTvlData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.VOLUME ? (\n          <BarChart data={formattedVolumeData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.PRICE ? (\n          <CandleChart data={tokenPriceData} setValue={setHoverValue} setLabel={setHoverDate} />\n        ) : null}\n      </Box>\n    </Card>\n  )\n}\n\nexport default ChartCard\n","import { TOTAL_FEE, LP_HOLDERS_FEE, WEEKS_IN_YEAR } from 'config/constants/info'\n\n/**\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getAmountChange = (valueNow?: number, valueBefore?: number) => {\n  if (valueNow && valueBefore) {\n    return valueNow - valueBefore\n  }\n  if (valueNow) {\n    return valueNow\n  }\n  return 0\n}\n\n/**\n * Get increase/decrease of value compared to the previous value as a percentage\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getPercentChange = (valueNow?: number, valueBefore?: number): number => {\n  if (valueNow && valueBefore) {\n    return ((valueNow - valueBefore) / valueBefore) * 100\n  }\n  return 0\n}\n\n/**\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\n * and percentage change compared to the previous period.\n * @param valueNow - current value\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\n * @returns amount change for the latest period and percentage change compared to previous period\n */\nexport const getChangeForPeriod = (\n  valueNow?: number,\n  valueOnePeriodAgo?: number,\n  valueTwoPeriodsAgo?: number,\n): [number, number] => {\n  const currentPeriodAmount = getAmountChange(valueNow, valueOnePeriodAgo)\n  const previousPeriodAmount = getAmountChange(valueOnePeriodAgo, valueTwoPeriodsAgo)\n  const percentageChange = getPercentChange(currentPeriodAmount, previousPeriodAmount)\n  return [currentPeriodAmount, percentageChange]\n}\n\nexport const getLpFeesAndApr = (volumeUSD: number, volumeUSDWeek: number, liquidityUSD: number) => {\n  const totalFees24h = volumeUSD * TOTAL_FEE\n  const totalFees7d = volumeUSDWeek * TOTAL_FEE\n  const lpFees24h = volumeUSD * LP_HOLDERS_FEE\n  const lpFees7d = volumeUSDWeek * LP_HOLDERS_FEE\n\n  const lpApr7d = liquidityUSD > 0 ? (volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100) / liquidityUSD : 0\n  return {\n    totalFees24h,\n    totalFees7d,\n    lpFees24h,\n    lpFees7d,\n    lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0,\n  }\n}\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getChangeForPeriod, getPercentChange } from 'views/Info/utils/infoDataHelpers'\nimport { ProtocolData } from 'state/info/types'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\n\ninterface PancakeFactory {\n  totalTransactions: string\n  totalVolumeUSD: string\n  totalLiquidityUSD: string\n}\n\ninterface OverviewResponse {\n  pancakeFactories: PancakeFactory[]\n}\n\n/**\n * Latest Liquidity, Volume and Transaction count\n */\nconst getOverviewData = async (block?: number): Promise<{ data?: OverviewResponse; error: boolean }> => {\n  try {\n    const query = gql`query overview {\n      pancakeFactories(\n        ${block ? `block: { number: ${block}}` : ``} \n        first: 1) {\n        totalTransactions\n        totalVolumeUSD\n        totalLiquidityUSD\n      }\n    }`\n    const data = await request<OverviewResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch info overview', error)\n    return { data: null, error: true }\n  }\n}\n\nconst formatPancakeFactoryResponse = (rawPancakeFactory?: PancakeFactory) => {\n  if (rawPancakeFactory) {\n    return {\n      totalTransactions: parseFloat(rawPancakeFactory.totalTransactions),\n      totalVolumeUSD: parseFloat(rawPancakeFactory.totalVolumeUSD),\n      totalLiquidityUSD: parseFloat(rawPancakeFactory.totalLiquidityUSD),\n    }\n  }\n  return null\n}\n\ninterface ProtocolFetchState {\n  error: boolean\n  data?: ProtocolData\n}\n\nconst useFetchProtocolData = (): ProtocolFetchState => {\n  const [fetchState, setFetchState] = useState<ProtocolFetchState>({\n    error: false,\n  })\n  const [t24, t48] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48])\n  const [block24, block48] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await getOverviewData()\n      const { error: error24, data: data24 } = await getOverviewData(block24?.number ?? undefined)\n      const { error: error48, data: data48 } = await getOverviewData(block48?.number ?? undefined)\n      const anyError = error || error24 || error48\n      const overviewData = formatPancakeFactoryResponse(data?.pancakeFactories?.[0])\n      const overviewData24 = formatPancakeFactoryResponse(data24?.pancakeFactories?.[0])\n      const overviewData48 = formatPancakeFactoryResponse(data48?.pancakeFactories?.[0])\n      const allDataAvailable = overviewData && overviewData24 && overviewData48\n      if (anyError || !allDataAvailable) {\n        setFetchState({\n          error: true,\n        })\n      } else {\n        const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n          overviewData.totalVolumeUSD,\n          overviewData24.totalVolumeUSD,\n          overviewData48.totalVolumeUSD,\n        )\n        const liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD)\n        // 24H transactions\n        const [txCount, txCountChange] = getChangeForPeriod(\n          overviewData.totalTransactions,\n          overviewData24.totalTransactions,\n          overviewData48.totalTransactions,\n        )\n        const protocolData: ProtocolData = {\n          volumeUSD,\n          volumeUSDChange: typeof volumeUSDChange === 'number' ? volumeUSDChange : 0,\n          liquidityUSD: overviewData.totalLiquidityUSD,\n          liquidityUSDChange,\n          txCount,\n          txCountChange,\n        }\n        setFetchState({\n          error: false,\n          data: protocolData,\n        })\n      }\n    }\n    const allBlocksAvailable = block24?.number && block48?.number\n    if (allBlocksAvailable && !blockError && !fetchState.data) {\n      fetch()\n    }\n  }, [block24, block48, blockError, fetchState])\n\n  return fetchState\n}\n\nexport default useFetchProtocolData\n","/* eslint-disable no-await-in-loop */\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { ChartEntry } from 'state/info/types'\nimport { PancakeDayDatasResponse } from '../types'\nimport { fetchChartData, mapDayData } from '../helpers'\n\n/**\n * Data for displaying Liquidity and Volume charts on Overview page\n */\nconst PANCAKE_DAY_DATAS = gql`\n  query overviewCharts($startTime: Int!, $skip: Int!) {\n    pancakeDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\n      date\n      dailyVolumeUSD\n      totalLiquidityUSD\n    }\n  }\n`\n\nconst getOverviewChartData = async (skip: number): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const { pancakeDayDatas } = await request<PancakeDayDatasResponse>(INFO_CLIENT, PANCAKE_DAY_DATAS, {\n      startTime: PCS_V2_START,\n      skip,\n    })\n    const data = pancakeDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch overview chart data', error)\n    return { error: true }\n  }\n}\n\n/**\n * Fetch historic chart data\n */\nconst useFetchGlobalChartData = (): {\n  error: boolean\n  data: ChartEntry[] | undefined\n} => {\n  const [overviewChartData, setOverviewChartData] = useState<ChartEntry[] | undefined>()\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await fetchChartData(getOverviewChartData)\n      if (data) {\n        setOverviewChartData(data)\n      } else {\n        setError(true)\n      }\n    }\n    if (!overviewChartData && !error) {\n      fetch()\n    }\n  }, [overviewChartData, error])\n\n  return {\n    error,\n    data: overviewChartData,\n  }\n}\n\nexport default useFetchGlobalChartData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n\n/**\n * Transactions for Transaction table on the Home page\n */\nconst GLOBAL_TRANSACTIONS = gql`\n  query overviewTransactions {\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchTopTransactions = async (): Promise<Transaction[] | undefined> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, GLOBAL_TRANSACTIONS)\n\n    if (!data) {\n      return undefined\n    }\n\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n\n    return [...mints, ...burns, ...swaps].sort((a, b) => {\n      return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10)\n    })\n  } catch {\n    return undefined\n  }\n}\n\nexport default fetchTopTransactions\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopPoolsResponse {\n  pairDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Initial pools to display on the home page\n */\nconst fetchTopPools = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\n        pairDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 300, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await request<TopPoolsResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\n    return data.pairDayDatas.map((p) => p.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top pools', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopPoolAddresses = (): string[] => {\n  const [topPoolAddresses, setTopPoolAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopPools(timestamp24hAgo)\n      setTopPoolAddresses(addresses)\n    }\n    if (topPoolAddresses.length === 0) {\n      fetch()\n    }\n  }, [topPoolAddresses, timestamp24hAgo])\n\n  return topPoolAddresses\n}\n\nexport default useTopPoolAddresses\n","/* eslint-disable no-param-reassign */\nimport { useEffect, useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { PoolData } from 'state/info/types'\nimport { getChangeForPeriod, getLpFeesAndApr, getPercentChange } from 'views/Info/utils/infoDataHelpers'\n\ninterface PoolFields {\n  id: string\n  reserve0: string\n  reserve1: string\n  reserveUSD: string\n  volumeUSD: string\n  token0Price: string\n  token1Price: string\n  token0: {\n    id: string\n    symbol: string\n    name: string\n  }\n  token1: {\n    id: string\n    symbol: string\n    name: string\n  }\n}\n\ninterface FormattedPoolFields\n  extends Omit<PoolFields, 'volumeUSD' | 'reserveUSD' | 'reserve0' | 'reserve1' | 'token0Price' | 'token1Price'> {\n  volumeUSD: number\n  reserveUSD: number\n  reserve0: number\n  reserve1: number\n  token0Price: number\n  token1Price: number\n}\n\ninterface PoolsQueryResponse {\n  now: PoolFields[]\n  oneDayAgo: PoolFields[]\n  twoDaysAgo: PoolFields[]\n  oneWeekAgo: PoolFields[]\n  twoWeeksAgo: PoolFields[]\n}\n\n/**\n * Data for displaying pool tables (on multiple pages, used throughout the site)\n * Note: Don't try to refactor it to use variables, server throws error if blocks passed as undefined variable\n * only works if its hard-coded into query string\n */\nconst POOL_AT_BLOCK = (block: number | null, pools: string[]) => {\n  const blockString = block ? `block: {number: ${block}}` : ``\n  const addressesString = `[\"${pools.join('\",\"')}\"]`\n  return `pairs(\n    where: { id_in: ${addressesString} }\n    ${blockString}\n    orderBy: trackedReserveBNB\n    orderDirection: desc\n  ) {\n    id\n    reserve0\n    reserve1\n    reserveUSD\n    volumeUSD\n    token0Price\n    token1Price\n    token0 {\n      id\n      symbol\n      name\n    }\n    token1 {\n      id\n      symbol\n      name\n    }\n  }`\n}\n\nconst fetchPoolData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  poolAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query pools {\n        now: ${POOL_AT_BLOCK(null, poolAddresses)}\n        oneDayAgo: ${POOL_AT_BLOCK(block24h, poolAddresses)}\n        twoDaysAgo: ${POOL_AT_BLOCK(block48h, poolAddresses)}\n        oneWeekAgo: ${POOL_AT_BLOCK(block7d, poolAddresses)}\n        twoWeeksAgo: ${POOL_AT_BLOCK(block14d, poolAddresses)}\n      }\n    `\n    const data = await request<PoolsQueryResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool data', error)\n    return { error: true }\n  }\n}\n\n// Transforms pools into \"0xADDRESS: { ...PoolFields }\" format and cast strings to numbers\nconst parsePoolData = (pairs?: PoolFields[]) => {\n  if (!pairs) {\n    return {}\n  }\n  return pairs.reduce((accum: { [address: string]: FormattedPoolFields }, poolData) => {\n    const { volumeUSD, reserveUSD, reserve0, reserve1, token0Price, token1Price } = poolData\n    accum[poolData.id] = {\n      ...poolData,\n      volumeUSD: parseFloat(volumeUSD),\n      reserveUSD: parseFloat(reserveUSD),\n      reserve0: parseFloat(reserve0),\n      reserve1: parseFloat(reserve1),\n      token0Price: parseFloat(token0Price),\n      token1Price: parseFloat(token1Price),\n    }\n    return accum\n  }, {})\n}\n\ninterface PoolDatas {\n  error: boolean\n  data?: {\n    [address: string]: PoolData\n  }\n}\n\n/**\n * Fetch top pools by liquidity\n */\nconst usePoolDatas = (poolAddresses: string[]): PoolDatas => {\n  const [fetchState, setFetchState] = useState<PoolDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchPoolData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        poolAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const formattedPoolData = parsePoolData(data?.now)\n        const formattedPoolData24h = parsePoolData(data?.oneDayAgo)\n        const formattedPoolData48h = parsePoolData(data?.twoDaysAgo)\n        const formattedPoolData7d = parsePoolData(data?.oneWeekAgo)\n        const formattedPoolData14d = parsePoolData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = poolAddresses.reduce((accum: { [address: string]: PoolData }, address) => {\n          // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\n          const current: FormattedPoolFields | undefined = formattedPoolData[address]\n          const oneDay: FormattedPoolFields | undefined = formattedPoolData24h[address]\n          const twoDays: FormattedPoolFields | undefined = formattedPoolData48h[address]\n          const week: FormattedPoolFields | undefined = formattedPoolData7d[address]\n          const twoWeeks: FormattedPoolFields | undefined = formattedPoolData14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.volumeUSD,\n            oneDay?.volumeUSD,\n            twoDays?.volumeUSD,\n          )\n          const [volumeUSDWeek, volumeUSDChangeWeek] = getChangeForPeriod(\n            current?.volumeUSD,\n            week?.volumeUSD,\n            twoWeeks?.volumeUSD,\n          )\n\n          const liquidityUSD = current ? current.reserveUSD : 0\n\n          const liquidityUSDChange = getPercentChange(current?.reserveUSD, oneDay?.reserveUSD)\n\n          const liquidityToken0 = current ? current.reserve0 : 0\n          const liquidityToken1 = current ? current.reserve1 : 0\n\n          const { totalFees24h, totalFees7d, lpFees24h, lpFees7d, lpApr7d } = getLpFeesAndApr(\n            volumeUSD,\n            volumeUSDWeek,\n            liquidityUSD,\n          )\n\n          if (current) {\n            accum[address] = {\n              address,\n              token0: {\n                address: current.token0.id,\n                name: current.token0.name,\n                symbol: current.token0.symbol,\n              },\n              token1: {\n                address: current.token1.id,\n                name: current.token1.name,\n                symbol: current.token1.symbol,\n              },\n              token0Price: current.token0Price,\n              token1Price: current.token1Price,\n              volumeUSD,\n              volumeUSDChange,\n              volumeUSDWeek,\n              volumeUSDChangeWeek,\n              totalFees24h,\n              totalFees7d,\n              lpFees24h,\n              lpFees7d,\n              lpApr7d,\n              liquidityUSD,\n              liquidityUSDChange,\n              liquidityToken0,\n              liquidityToken1,\n            }\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (poolAddresses.length > 0 && allBlocksAvailable && !blockError) {\n      fetch()\n    }\n  }, [poolAddresses, block24h, block48h, block7d, block14d, blockError])\n\n  return fetchState\n}\n\nexport default usePoolDatas\n","import { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\n\nexport interface BnbPrices {\n  current: number\n  oneDay: number\n  twoDay: number\n  week: number\n}\n\nconst BNB_PRICES = gql`\n  query prices($block24: Int!, $block48: Int!, $blockWeek: Int!) {\n    current: bundle(id: \"1\") {\n      bnbPrice\n    }\n    oneDay: bundle(id: \"1\", block: { number: $block24 }) {\n      bnbPrice\n    }\n    twoDay: bundle(id: \"1\", block: { number: $block48 }) {\n      bnbPrice\n    }\n    oneWeek: bundle(id: \"1\", block: { number: $blockWeek }) {\n      bnbPrice\n    }\n  }\n`\n\ninterface PricesResponse {\n  current: {\n    bnbPrice: string\n  }\n  oneDay: {\n    bnbPrice: string\n  }\n  twoDay: {\n    bnbPrice: string\n  }\n  oneWeek: {\n    bnbPrice: string\n  }\n}\n\nconst fetchBnbPrices = async (\n  block24: number,\n  block48: number,\n  blockWeek: number,\n): Promise<{ bnbPrices: BnbPrices | undefined; error: boolean }> => {\n  try {\n    const data = await request<PricesResponse>(INFO_CLIENT, BNB_PRICES, {\n      block24,\n      block48,\n      blockWeek,\n    })\n    return {\n      error: false,\n      bnbPrices: {\n        current: parseFloat(data.current?.bnbPrice ?? '0'),\n        oneDay: parseFloat(data.oneDay?.bnbPrice ?? '0'),\n        twoDay: parseFloat(data.twoDay?.bnbPrice ?? '0'),\n        week: parseFloat(data.oneWeek?.bnbPrice ?? '0'),\n      },\n    }\n  } catch (error) {\n    console.error('Failed to fetch BNB prices', error)\n    return {\n      error: true,\n      bnbPrices: undefined,\n    }\n  }\n}\n\n/**\n * Returns BNB prices at current, 24h, 48h, and 7d intervals\n */\nexport const useBnbPrices = (): BnbPrices | undefined => {\n  const [prices, setPrices] = useState<BnbPrices | undefined>()\n  const [error, setError] = useState(false)\n\n  const [t24, t48, tWeek] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48, tWeek])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const [block24, block48, blockWeek] = blocks\n      const { bnbPrices, error: fetchError } = await fetchBnbPrices(block24.number, block48.number, blockWeek.number)\n      if (fetchError) {\n        setError(true)\n      } else {\n        setPrices(bnbPrices)\n      }\n    }\n    if (!prices && !error && blocks && !blockError) {\n      fetch()\n    }\n  }, [error, prices, blocks, blockError])\n\n  return prices\n}\n","/* eslint-disable no-param-reassign */\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getPercentChange, getChangeForPeriod, getAmountChange } from 'views/Info/utils/infoDataHelpers'\nimport { TokenData } from 'state/info/types'\nimport { useBnbPrices } from 'views/Info/hooks/useBnbPrices'\n\ninterface TokenFields {\n  id: string\n  symbol: string\n  name: string\n  derivedBNB: string // Price in BNB per token\n  derivedUSD: string // Price in USD per token\n  tradeVolumeUSD: string\n  totalTransactions: string\n  totalLiquidity: string\n}\n\ninterface FormattedTokenFields\n  extends Omit<TokenFields, 'derivedBNB' | 'derivedUSD' | 'tradeVolumeUSD' | 'totalTransactions' | 'totalLiquidity'> {\n  derivedBNB: number\n  derivedUSD: number\n  tradeVolumeUSD: number\n  totalTransactions: number\n  totalLiquidity: number\n}\n\ninterface TokenQueryResponse {\n  now: TokenFields[]\n  oneDayAgo: TokenFields[]\n  twoDaysAgo: TokenFields[]\n  oneWeekAgo: TokenFields[]\n  twoWeeksAgo: TokenFields[]\n}\n\n/**\n * Main token data to display on Token page\n */\nconst TOKEN_AT_BLOCK = (block: number | undefined, tokens: string[]) => {\n  const addressesString = `[\"${tokens.join('\",\"')}\"]`\n  const blockString = block ? `block: {number: ${block}}` : ``\n  return `tokens(\n      where: {id_in: ${addressesString}}\n      ${blockString}\n      orderBy: tradeVolumeUSD\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      derivedBNB\n      derivedUSD\n      tradeVolumeUSD\n      totalTransactions\n      totalLiquidity\n    }\n  `\n}\n\nconst fetchTokenData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  tokenAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query tokens {\n        now: ${TOKEN_AT_BLOCK(null, tokenAddresses)}\n        oneDayAgo: ${TOKEN_AT_BLOCK(block24h, tokenAddresses)}\n        twoDaysAgo: ${TOKEN_AT_BLOCK(block48h, tokenAddresses)}\n        oneWeekAgo: ${TOKEN_AT_BLOCK(block7d, tokenAddresses)}\n        twoWeeksAgo: ${TOKEN_AT_BLOCK(block14d, tokenAddresses)}\n      }\n    `\n    const data = await request<TokenQueryResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token data', error)\n    return { error: true }\n  }\n}\n\n// Transforms tokens into \"0xADDRESS: { ...TokenFields }\" format and cast strings to numbers\nconst parseTokenData = (tokens?: TokenFields[]) => {\n  if (!tokens) {\n    return {}\n  }\n  return tokens.reduce((accum: { [address: string]: FormattedTokenFields }, tokenData) => {\n    const { derivedBNB, derivedUSD, tradeVolumeUSD, totalTransactions, totalLiquidity } = tokenData\n    accum[tokenData.id] = {\n      ...tokenData,\n      derivedBNB: parseFloat(derivedBNB),\n      derivedUSD: parseFloat(derivedUSD),\n      tradeVolumeUSD: parseFloat(tradeVolumeUSD),\n      totalTransactions: parseFloat(totalTransactions),\n      totalLiquidity: parseFloat(totalLiquidity),\n    }\n    return accum\n  }, {})\n}\n\ninterface TokenDatas {\n  error: boolean\n  data?: {\n    [address: string]: TokenData\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useFetchedTokenDatas = (tokenAddresses: string[]): TokenDatas => {\n  const [fetchState, setFetchState] = useState<TokenDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n  const bnbPrices = useBnbPrices()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchTokenData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        tokenAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const parsed = parseTokenData(data?.now)\n        const parsed24 = parseTokenData(data?.oneDayAgo)\n        const parsed48 = parseTokenData(data?.twoDaysAgo)\n        const parsed7d = parseTokenData(data?.oneWeekAgo)\n        const parsed14d = parseTokenData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = tokenAddresses.reduce((accum: { [address: string]: TokenData }, address) => {\n          const current: FormattedTokenFields | undefined = parsed[address]\n          const oneDay: FormattedTokenFields | undefined = parsed24[address]\n          const twoDays: FormattedTokenFields | undefined = parsed48[address]\n          const week: FormattedTokenFields | undefined = parsed7d[address]\n          const twoWeeks: FormattedTokenFields | undefined = parsed14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            oneDay?.tradeVolumeUSD,\n            twoDays?.tradeVolumeUSD,\n          )\n          const [volumeUSDWeek] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            week?.tradeVolumeUSD,\n            twoWeeks?.tradeVolumeUSD,\n          )\n          const liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0\n          const liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0\n          const liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo)\n          const liquidityToken = current ? current.totalLiquidity : 0\n          // Prices of tokens for now, 24h ago and 7d ago\n          const priceUSD = current ? current.derivedBNB * bnbPrices.current : 0\n          const priceUSDOneDay = oneDay ? oneDay.derivedBNB * bnbPrices.oneDay : 0\n          const priceUSDWeek = week ? week.derivedBNB * bnbPrices.week : 0\n          const priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay)\n          const priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek)\n          const txCount = getAmountChange(current?.totalTransactions, oneDay?.totalTransactions)\n\n          accum[address] = {\n            exists: !!current,\n            address,\n            name: current ? current.name : '',\n            symbol: current ? current.symbol : '',\n            volumeUSD,\n            volumeUSDChange,\n            volumeUSDWeek,\n            txCount,\n            liquidityUSD,\n            liquidityUSDChange,\n            liquidityToken,\n            priceUSD,\n            priceUSDChange,\n            priceUSDChangeWeek,\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (tokenAddresses.length > 0 && allBlocksAvailable && !blockError && bnbPrices) {\n      fetch()\n    }\n  }, [tokenAddresses, block24h, block48h, block7d, block14d, blockError, bnbPrices])\n\n  return fetchState\n}\n\nexport default useFetchedTokenDatas\n","import { useEffect, useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopTokensResponse {\n  tokenDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Tokens to display on Home page\n * The actual data is later requested in tokenData.ts\n * Note: dailyTxns_gt: 300 is there to prevent fetching incorrectly priced tokens with high dailyVolumeUSD\n */\nconst fetchTopTokens = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topTokens($blacklist: [String!], $timestamp24hAgo: Int) {\n        tokenDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 300, id_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await request<TopTokensResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // tokenDayDatas id has compound id \"0xTOKENADDRESS-NUMBERS\", extracting token address with .split('-')\n    return data.tokenDayDatas.map((t) => t.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top tokens', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopTokenAddresses = (): string[] => {\n  const [topTokenAddresses, setTopTokenAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopTokens(timestamp24hAgo)\n      setTopTokenAddresses(addresses)\n    }\n    if (topTokenAddresses.length === 0) {\n      fetch()\n    }\n  }, [topTokenAddresses, timestamp24hAgo])\n\n  return topTokenAddresses\n}\n\nexport default useTopTokenAddresses\n","import React, { useEffect, useMemo } from 'react'\nimport useFetchProtocolData from 'state/info/queries/protocol/overview'\nimport useFetchGlobalChartData from 'state/info/queries/protocol/chart'\nimport fetchTopTransactions from 'state/info/queries/protocol/transactions'\nimport useTopPoolAddresses from 'state/info/queries/pools/topPools'\nimport usePoolDatas from 'state/info/queries/pools/poolData'\nimport useFetchedTokenDatas from 'state/info/queries/tokens/tokenData'\nimport useTopTokenAddresses from 'state/info/queries/tokens/topTokens'\nimport {\n  useProtocolData,\n  useProtocolChartData,\n  useProtocolTransactions,\n  useUpdatePoolData,\n  useAllPoolData,\n  useAddPoolKeys,\n  useAllTokenData,\n  useUpdateTokenData,\n  useAddTokenKeys,\n} from './hooks'\n\nexport const ProtocolUpdater: React.FC = () => {\n  const [protocolData, setProtocolData] = useProtocolData()\n  const { data: fetchedProtocolData, error } = useFetchProtocolData()\n\n  const [chartData, updateChartData] = useProtocolChartData()\n  const { data: fetchedChartData, error: chartError } = useFetchGlobalChartData()\n\n  const [transactions, updateTransactions] = useProtocolTransactions()\n\n  // update overview data if available and not set\n  useEffect(() => {\n    if (protocolData === undefined && fetchedProtocolData && !error) {\n      setProtocolData(fetchedProtocolData)\n    }\n  }, [error, fetchedProtocolData, protocolData, setProtocolData])\n\n  // update global chart data if available and not set\n  useEffect(() => {\n    if (chartData === undefined && fetchedChartData && !chartError) {\n      updateChartData(fetchedChartData)\n    }\n  }, [chartData, chartError, fetchedChartData, updateChartData])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await fetchTopTransactions()\n      if (data) {\n        updateTransactions(data)\n      }\n    }\n    if (!transactions) {\n      fetch()\n    }\n  }, [transactions, updateTransactions])\n\n  return null\n}\n\nexport const PoolUpdater: React.FC = () => {\n  const updatePoolData = useUpdatePoolData()\n  const addPoolKeys = useAddPoolKeys()\n\n  const allPoolData = useAllPoolData()\n  const addresses = useTopPoolAddresses()\n\n  // add top pools on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addPoolKeys(addresses)\n    }\n  }, [addPoolKeys, addresses])\n\n  // detect for which addresses we havent loaded pool data yet\n  const unfetchedPoolAddresses = useMemo(() => {\n    return Object.keys(allPoolData).reduce((accum: string[], address) => {\n      const poolData = allPoolData[address]\n      if (!poolData.data) {\n        accum.push(address)\n      }\n      return accum\n    }, [])\n  }, [allPoolData])\n\n  // fetch data for unfetched pools and update them\n  const { error: poolDataError, data: poolDatas } = usePoolDatas(unfetchedPoolAddresses)\n  useEffect(() => {\n    if (poolDatas && !poolDataError) {\n      updatePoolData(Object.values(poolDatas))\n    }\n  }, [poolDataError, poolDatas, updatePoolData])\n\n  return null\n}\n\nexport const TokenUpdater = (): null => {\n  const updateTokenDatas = useUpdateTokenData()\n  const addTokenKeys = useAddTokenKeys()\n\n  const allTokenData = useAllTokenData()\n  const addresses = useTopTokenAddresses()\n\n  // add top tokens on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addTokenKeys(addresses)\n    }\n  }, [addTokenKeys, addresses])\n\n  // detect for which addresses we havent loaded token data yet\n  const unfetchedTokenAddresses = useMemo(() => {\n    return Object.keys(allTokenData).reduce((accum: string[], key) => {\n      const tokenData = allTokenData[key]\n      if (!tokenData.data) {\n        accum.push(key)\n      }\n      return accum\n    }, [])\n  }, [allTokenData])\n\n  // fetch data for unfetched tokens and update them\n  const { error: tokenDataError, data: tokenDatas } = useFetchedTokenDatas(unfetchedTokenAddresses)\n  useEffect(() => {\n    if (tokenDatas && !tokenDataError) {\n      updateTokenDatas(Object.values(tokenDatas))\n    }\n  }, [tokenDataError, tokenDatas, updateTokenDatas])\n\n  return null\n}\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { useTokenDatas, usePoolDatas } from 'state/info/hooks'\nimport { TokenData, PoolData } from 'state/info/types'\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\n\nconst TOKEN_SEARCH = gql`\n  query tokens($symbol: String, $name: String, $id: String) {\n    asSymbol: tokens(first: 10, where: { symbol_contains: $symbol }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n    asName: tokens(first: 10, where: { name_contains: $name }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n    asAddress: tokens(first: 1, where: { id: $id }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n  }\n`\n\nconst POOL_SEARCH = gql`\n  query pools($tokens: [Bytes]!, $id: String) {\n    as0: pairs(first: 10, where: { token0_in: $tokens }) {\n      id\n    }\n    as1: pairs(first: 10, where: { token1_in: $tokens }) {\n      id\n    }\n    asAddress: pairs(first: 1, where: { id: $id }) {\n      id\n    }\n  }\n`\n\ninterface SingleQueryResponse {\n  id: string[]\n}\n\ninterface TokenSearchResponse {\n  asSymbol: SingleQueryResponse[]\n  asName: SingleQueryResponse[]\n  asAddress: SingleQueryResponse[]\n}\ninterface PoolSearchResponse {\n  as0: SingleQueryResponse[]\n  as1: SingleQueryResponse[]\n  asAddress: SingleQueryResponse[]\n}\n\nconst getIds = (entityArrays: SingleQueryResponse[][]) => {\n  const ids = entityArrays\n    .reduce((entities, currentTokenArray) => [...entities, ...currentTokenArray], [])\n    .map((entity) => entity.id)\n  return Array.from(new Set(ids))\n}\n\nconst useFetchSearchResults = (\n  searchString: string,\n): {\n  tokens: TokenData[]\n  pools: PoolData[]\n  tokensLoading: boolean\n  poolsLoading: boolean\n  error: boolean\n} => {\n  const [searchResults, setSearchResults] = useState({\n    tokens: [], // Token ids found by search query\n    pools: [], // Pool ids found by search query\n    loading: false, // Search query is in progress\n    error: false, // GraphQL returned error\n  })\n\n  const searchStringTooShort = searchString.length < MINIMUM_SEARCH_CHARACTERS\n\n  // New value received, reset state\n  useEffect(() => {\n    setSearchResults({\n      tokens: [],\n      pools: [],\n      loading: !searchStringTooShort,\n      error: false,\n    })\n  }, [searchString, searchStringTooShort])\n\n  useEffect(() => {\n    const search = async () => {\n      try {\n        const tokens = await request<TokenSearchResponse>(INFO_CLIENT, TOKEN_SEARCH, {\n          symbol: searchString.toUpperCase(),\n          // Most well known tokens have first letter capitalized\n          name: searchString.charAt(0).toUpperCase() + searchString.slice(1),\n          id: searchString.toLowerCase(),\n        })\n        const tokenIds = getIds([tokens.asAddress, tokens.asSymbol, tokens.asName])\n        const pools = await request<PoolSearchResponse>(INFO_CLIENT, POOL_SEARCH, {\n          tokens: tokenIds,\n          id: searchString.toLowerCase(),\n        })\n        setSearchResults({\n          tokens: tokenIds,\n          pools: getIds([pools.asAddress, pools.as0, pools.as1]),\n          loading: false,\n          error: false,\n        })\n      } catch (error) {\n        console.error(`Search failed for ${searchString}`, error)\n        setSearchResults({\n          tokens: [],\n          pools: [],\n          loading: false,\n          error: true,\n        })\n      }\n    }\n    if (!searchStringTooShort) {\n      search()\n    }\n  }, [searchString, searchStringTooShort])\n\n  // Save ids to Redux\n  // Token and Pool updater will then go fetch full data for these addresses\n  // These hooks in turn will return data of tokens that have been fetched\n  const tokenDatasFull = useTokenDatas(searchResults.tokens)\n  const poolDatasFull = usePoolDatas(searchResults.pools)\n\n  // If above hooks returned not all tokens/pools it means\n  // that some requests for full data are in progress\n  const tokensLoading = tokenDatasFull.length !== searchResults.tokens.length || searchResults.loading\n  const poolsLoading = poolDatasFull.length !== searchResults.pools.length || searchResults.loading\n\n  return {\n    tokens: tokenDatasFull,\n    pools: poolDatasFull,\n    tokensLoading,\n    poolsLoading,\n    error: searchResults.error,\n  }\n}\n\nexport default useFetchSearchResults\n","import React, { useState } from 'react'\nimport { HelpIcon } from '@pancakeswap/uikit'\n\nconst BAD_SRCS: string[] = []\n\nexport interface LogoLoaderProps {\n  alt: string\n  src: string\n}\n\n/**\n * Renders an image by sequentially trying a list of URIs, and then eventually a fallback to HelpIcon\n */\nconst LogoLoader: React.FC<LogoLoaderProps> = ({ src, alt, ...rest }) => {\n  const [, refresh] = useState(0)\n\n  const srcFailedLoading = BAD_SRCS.includes(src)\n\n  if (src && !srcFailedLoading) {\n    return (\n      <img\n        {...rest}\n        alt={alt}\n        src={src}\n        onError={() => {\n          if (src) BAD_SRCS.push(src)\n          refresh((i) => i + 1)\n        }}\n      />\n    )\n  }\n\n  return <HelpIcon {...rest} />\n}\n\nexport default LogoLoader\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport LogoLoader from './LogoLoader'\n\nconst StyledLogo = styled(LogoLoader)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  border-radius: ${({ size }) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  background-color: ${({ theme }) => theme.colors.background};\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const CurrencyLogo: React.FC<{\n  address?: string\n  size?: string\n}> = ({ address, size = '24px', ...rest }) => {\n  const src = useMemo(() => {\n    const checksummedAddress = isAddress(address)\n    if (checksummedAddress) {\n      return `https://assets.trustwalletapp.com/blockchains/smartchain/assets/${checksummedAddress}/logo.png`\n    }\n    return null\n  }, [address])\n\n  return <StyledLogo size={size} src={src} alt=\"token logo\" {...rest} />\n}\n\nconst DoubleCurrencyWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 32px;\n`\n\ninterface DoubleCurrencyLogoProps {\n  address0?: string\n  address1?: string\n  size?: number\n}\n\nexport const DoubleCurrencyLogo: React.FC<DoubleCurrencyLogoProps> = ({ address0, address1, size = 16 }) => {\n  return (\n    <DoubleCurrencyWrapper>\n      {address0 && <CurrencyLogo address={address0} size={`${size.toString()}px`} />}\n      {address1 && <CurrencyLogo address={address1} size={`${size.toString()}px`} />}\n    </DoubleCurrencyWrapper>\n  )\n}\n","import React, { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { StarFillIcon, StarLineIcon } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\nconst HoverIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst SaveIcon: React.FC<{ fill: boolean } & HTMLAttributes<HTMLDivElement>> = ({ fill = false, ...rest }) => {\n  const { theme } = useTheme()\n  return (\n    <HoverIcon {...rest}>\n      {fill ? (\n        <StarFillIcon stroke={theme.colors.warning} color={theme.colors.warning} />\n      ) : (\n        <StarLineIcon stroke={theme.colors.textDisabled} />\n      )}\n    </HoverIcon>\n  )\n}\n\nexport default SaveIcon\n","import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Text, Input, Flex, Skeleton, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport useFetchSearchResults from 'state/info/queries/search'\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { useWatchlistTokens, useWatchlistPools } from 'state/user/hooks'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport { useHistory } from 'react-router-dom'\nimport { usePoolDatas, useTokenDatas } from 'state/info/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useDebounce from 'hooks/useDebounce'\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\nimport { PoolData } from 'state/info/types'\n\nconst Container = styled.div`\n  position: relative;\n  z-index: 30;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  z-index: 9999;\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n`\n\nconst Menu = styled.div<{ hide: boolean }>`\n  display: flex;\n  flex-direction: column;\n  z-index: 9999;\n  width: 100%;\n  top: 50px;\n  max-height: 400px;\n  overflow: auto;\n  right: 0;\n  padding: 1.5rem;\n  padding-bottom: 2.5rem;\n  position: absolute;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 8px;\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.04), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.04);\n  display: ${({ hide }) => hide && 'none'};\n  border: 1px solid ${({ theme }) => theme.colors.secondary};\n  margin-top: 4px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    width: 500px;\n    max-height: 600px;\n  }\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-top: 0;\n    width: 800px;\n    max-height: 600px;\n  }\n`\n\nconst Blackout = styled.div`\n  position: absolute;\n  min-height: 100vh;\n  width: 100vw;\n  z-index: 10;\n  background-color: black;\n  opacity: 0.7;\n  left: 0;\n  top: 0;\n`\n\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  grid-template-columns: 1fr;\n  margin: 8px 0;\n  align-items: center;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1.5fr repeat(3, 1fr);\n  }\n`\n\nconst Break = styled.div`\n  height: 1px;\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  width: 100%;\n  margin: 16px 0;\n`\n\nconst HoverText = styled.div<{ hide: boolean }>`\n  color: ${({ theme }) => theme.colors.secondary};\n  display: ${({ hide }) => (hide ? 'none' : 'block')};\n  margin-top: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst HoverRowLink = styled.div`\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst OptionButton = styled.div<{ enabled: boolean }>`\n  width: fit-content;\n  padding: 4px 8px;\n  border-radius: 8px;\n  display: flex;\n  font-size: 12px;\n  font-weight: 600;\n  margin-right: 10px;\n  justify-content: center;\n  align-items: center;\n  background-color: ${({ theme, enabled }) => (enabled ? theme.colors.primary : 'transparent')};\n  color: ${({ theme, enabled }) => (enabled ? theme.card.background : theme.colors.secondary)};\n  :hover {\n    opacity: 0.6;\n    cursor: pointer;\n  }\n`\ntype BasicTokenData = {\n  address: string\n  symbol: string\n  name: string\n}\nconst tokenIncludesSearchTerm = (token: BasicTokenData, value: string) => {\n  return (\n    token.address.toLowerCase().includes(value.toLowerCase()) ||\n    token.symbol.toLowerCase().includes(value.toLowerCase()) ||\n    token.name.toLowerCase().includes(value.toLowerCase())\n  )\n}\n\nconst poolIncludesSearchTerm = (pool: PoolData, value: string) => {\n  return (\n    pool.address.toLowerCase().includes(value.toLowerCase()) ||\n    tokenIncludesSearchTerm(pool.token0, value) ||\n    tokenIncludesSearchTerm(pool.token1, value)\n  )\n}\n\nconst Search = () => {\n  const history = useHistory()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const menuRef = useRef<HTMLDivElement>(null)\n  const showMoreRef = useRef<HTMLDivElement>(null)\n\n  const [showMenu, setShowMenu] = useState(false)\n  const [value, setValue] = useState('')\n  const debouncedSearchTerm = useDebounce(value, 600)\n\n  const { tokens, pools, tokensLoading, poolsLoading, error } = useFetchSearchResults(debouncedSearchTerm)\n\n  const [tokensShown, setTokensShown] = useState(3)\n  const [poolsShown, setPoolsShown] = useState(3)\n\n  useEffect(() => {\n    setTokensShown(3)\n    setPoolsShown(3)\n  }, [debouncedSearchTerm])\n\n  const handleOutsideClick = (e: any) => {\n    const menuClick = menuRef.current && menuRef.current.contains(e.target)\n    const inputCLick = inputRef.current && inputRef.current.contains(e.target)\n    const showMoreClick = showMoreRef.current && showMoreRef.current.contains(e.target)\n\n    if (!menuClick && !inputCLick && !showMoreClick) {\n      setPoolsShown(3)\n      setTokensShown(3)\n      setShowMenu(false)\n    }\n  }\n\n  useEffect(() => {\n    if (showMenu) {\n      document.addEventListener('click', handleOutsideClick)\n      document.querySelector('body').style.overflow = 'hidden'\n    } else {\n      document.removeEventListener('click', handleOutsideClick)\n      document.querySelector('body').style.overflow = 'visible'\n    }\n\n    return () => {\n      document.removeEventListener('click', handleOutsideClick)\n    }\n  }, [showMenu])\n\n  // watchlist\n  const [savedTokens, addSavedToken] = useWatchlistTokens()\n  const [savedPools, addSavedPool] = useWatchlistPools()\n\n  const handleItemClick = (to: string) => {\n    setShowMenu(false)\n    setPoolsShown(3)\n    setTokensShown(3)\n    history.push(to)\n  }\n\n  // get date for watchlist\n  const watchListTokenData = useTokenDatas(savedTokens)\n  const watchListTokenLoading = watchListTokenData.length !== savedTokens.length\n  const watchListPoolData = usePoolDatas(savedPools)\n  const watchListPoolLoading = watchListPoolData.length !== savedPools.length\n\n  // filter on view\n  const [showWatchlist, setShowWatchlist] = useState(false)\n  const tokensForList = useMemo(() => {\n    if (showWatchlist) {\n      return watchListTokenData.filter((token) => tokenIncludesSearchTerm(token, value))\n    }\n    return tokens.sort((t0, t1) => (t0.volumeUSD > t1.volumeUSD ? -1 : 1))\n  }, [showWatchlist, tokens, watchListTokenData, value])\n\n  const poolForList = useMemo(() => {\n    if (showWatchlist) {\n      return watchListPoolData.filter((pool) => poolIncludesSearchTerm(pool, value))\n    }\n    return pools.sort((p0, p1) => (p0.volumeUSD > p1.volumeUSD ? -1 : 1))\n  }, [pools, showWatchlist, watchListPoolData, value])\n\n  const contentUnderTokenList = () => {\n    const isLoading = showWatchlist ? watchListTokenLoading : tokensLoading\n    const noTokensFound =\n      tokensForList.length === 0 && !isLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\n    const noWatchlistTokens = tokensForList.length === 0 && !isLoading\n    const showMessage = showWatchlist ? noWatchlistTokens : noTokensFound\n    const noTokensMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\n    return (\n      <>\n        {isLoading && <Skeleton />}\n        {showMessage && <Text>{noTokensMessage}</Text>}\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\n          <Text>{t('Search pools or tokens')}</Text>\n        )}\n      </>\n    )\n  }\n\n  const contentUnderPoolList = () => {\n    const isLoading = showWatchlist ? watchListPoolLoading : poolsLoading\n    const noPoolsFound =\n      poolForList.length === 0 && !poolsLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\n    const noWatchlistPools = poolForList.length === 0 && !isLoading\n    const showMessage = showWatchlist ? noWatchlistPools : noPoolsFound\n    const noPoolsMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\n    return (\n      <>\n        {isLoading && <Skeleton />}\n        {showMessage && <Text>{noPoolsMessage}</Text>}\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\n          <Text>{t('Search pools or tokens')}</Text>\n        )}\n      </>\n    )\n  }\n\n  return (\n    <>\n      {showMenu ? <Blackout /> : null}\n      <Container>\n        <StyledInput\n          type=\"text\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value)\n          }}\n          placeholder={t('Search pools or tokens')}\n          ref={inputRef}\n          onFocus={() => {\n            setShowMenu(true)\n          }}\n        />\n        <Menu hide={!showMenu} ref={menuRef}>\n          <Flex mb=\"16px\">\n            <OptionButton enabled={!showWatchlist} onClick={() => setShowWatchlist(false)}>\n              {t('Search')}\n            </OptionButton>\n            <OptionButton enabled={showWatchlist} onClick={() => setShowWatchlist(true)}>\n              {t('Watchlist')}\n            </OptionButton>\n          </Flex>\n          {error && <Text color=\"failure\">{t('Error occurred, please try again')}</Text>}\n\n          <ResponsiveGrid>\n            <Text bold color=\"secondary\">\n              {t('Tokens')}\n            </Text>\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Price')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 24H')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Liquidity')}\n              </Text>\n            )}\n          </ResponsiveGrid>\n          {tokensForList.slice(0, tokensShown).map((token, i) => {\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <HoverRowLink onClick={() => handleItemClick(`/info/token/${token.address}`)} key={i}>\n                <ResponsiveGrid>\n                  <Flex>\n                    <CurrencyLogo address={token.address} />\n                    <Text ml=\"10px\">\n                      <Text>{`${token.name} (${token.symbol})`}</Text>\n                    </Text>\n                    <SaveIcon\n                      id=\"watchlist-icon\"\n                      style={{ marginLeft: '8px' }}\n                      fill={savedTokens.includes(token.address)}\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        addSavedToken(token.address)\n                      }}\n                    />\n                  </Flex>\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.priceUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.volumeUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.liquidityUSD)}</Text>}\n                </ResponsiveGrid>\n              </HoverRowLink>\n            )\n          })}\n          {contentUnderTokenList()}\n          <HoverText\n            onClick={() => {\n              setTokensShown(tokensShown + 5)\n            }}\n            hide={tokensForList.length <= tokensShown}\n            ref={showMoreRef}\n          >\n            {t('See more...')}\n          </HoverText>\n\n          <Break />\n          <ResponsiveGrid>\n            <Text bold color=\"secondary\" mb=\"8px\">\n              {t('Pools')}\n            </Text>\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 24H')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 7D')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Liquidity')}\n              </Text>\n            )}\n          </ResponsiveGrid>\n          {poolForList.slice(0, poolsShown).map((p, i) => {\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <HoverRowLink onClick={() => handleItemClick(`/info/pool/${p.address}`)} key={i}>\n                <ResponsiveGrid>\n                  <Flex>\n                    <DoubleCurrencyLogo address0={p.token0.address} address1={p.token1.address} />\n                    <Text ml=\"10px\" style={{ whiteSpace: 'nowrap' }}>\n                      <Text>{`${p.token0.symbol} / ${p.token1.symbol}`}</Text>\n                    </Text>\n                    <SaveIcon\n                      id=\"watchlist-icon\"\n                      style={{ marginLeft: '10px' }}\n                      fill={savedPools.includes(p.address)}\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        addSavedPool(p.address)\n                      }}\n                    />\n                  </Flex>\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSDWeek)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.liquidityUSD)}</Text>}\n                </ResponsiveGrid>\n              </HoverRowLink>\n            )\n          })}\n          {contentUnderPoolList()}\n          <HoverText\n            onClick={() => {\n              setPoolsShown(poolsShown + 5)\n            }}\n            hide={poolForList.length <= poolsShown}\n            ref={showMoreRef}\n          >\n            {t('See more...')}\n          </HoverText>\n        </Menu>\n      </Container>\n    </>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link, useRouteMatch } from 'react-router-dom'\nimport { Box, Flex, ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Search from 'views/Info/components/InfoSearch'\n\nconst NavWrapper = styled(Flex)`\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\n  justify-content: space-between;\n  padding: 20px 16px;\n  flex-direction: column;\n  gap: 8px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 20px 40px;\n    flex-direction: row;\n  }\n`\n\nconst InfoNav = () => {\n  const { t } = useTranslation()\n  const isPools = useRouteMatch(['/info/pools', '/info/pool', '/info/pair'])\n  const isTokens = useRouteMatch(['/info/tokens', '/info/token'])\n  let activeIndex = 0\n  if (isPools) {\n    activeIndex = 1\n  }\n  if (isTokens) {\n    activeIndex = 2\n  }\n  return (\n    <NavWrapper>\n      <Box>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem as={Link} to=\"/info\">\n            {t('Overview')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to=\"/info/pools\">\n            {t('Pools')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to=\"/info/tokens\">\n            {t('Tokens')}\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </Box>\n      <Box width={['100%', '100%', '250px']}>\n        <Search />\n      </Box>\n    </NavWrapper>\n  )\n}\n\nexport default InfoNav\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\nimport { useTranslation } from 'contexts/Localization'\n\nexport type LineChartProps = {\n  data: any[]\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\n} & React.HTMLAttributes<HTMLDivElement>\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(payload.time.toLocaleString(locale, { year: 'numeric', day: 'numeric', month: 'short' }))\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\n/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */\nconst LineChart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <LineChartLoader />\n  }\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        data={data}\n        width={300}\n        height={308}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          if (setHoverDate) setHoverDate(undefined)\n          if (setHoverValue) setHoverValue(undefined)\n        }}\n      >\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={theme.colors.inputSecondary} stopOpacity={0.5} />\n            <stop offset=\"100%\" stopColor={theme.colors.secondary} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => time.toLocaleDateString(undefined, { day: '2-digit' })}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ stroke: theme.colors.secondary }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater\n              locale={locale}\n              payload={props.payload}\n              setHoverValue={setHoverValue}\n              setHoverDate={setHoverDate}\n            />\n          )}\n        />\n        <Area dataKey=\"value\" type=\"monotone\" stroke={theme.colors.secondary} fill=\"url(#gradient)\" strokeWidth={2} />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default LineChart\n","import React, { useState, useMemo, useCallback, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Skeleton, useMatchBreakpoints, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { TokenData } from 'state/info/types'\nimport { Link } from 'react-router-dom'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  6 = | # | Name | Price | Price Change | Volume 24H | TVL |\n *  5 = | # | Name | Price |              | Volume 24H | TVL |\n *  4 = | # | Name | Price |              | Volume 24H |     |\n *  2 = |   | Name |       |              | Volume 24H |     |\n *  On smallest screen Name is reduced to just symbol\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n\n  padding: 0 24px;\n\n  grid-template-columns: 20px 3fr repeat(4, 1fr);\n\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 2fr repeat(3, 1fr);\n    & :nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 20px 2fr repeat(2, 1fr);\n    & :nth-child(6) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 670px) {\n    grid-template-columns: 1fr 1fr;\n    > *:first-child {\n      display: none;\n    }\n    > *:nth-child(3) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(Link)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst ResponsiveLogo = styled(CurrencyLogo)`\n  @media screen and (max-width: 670px) {\n    width: 16px;\n    height: 16px;\n  }\n`\n\nconst TableLoader: React.FC = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<{ tokenData: TokenData; index: number }> = ({ tokenData, index }) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  return (\n    <LinkWrapper to={`/info/token/${tokenData.address}`}>\n      <ResponsiveGrid>\n        <Flex>\n          <Text>{index + 1}</Text>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <ResponsiveLogo address={tokenData.address} />\n          {(isXs || isSm) && <Text ml=\"8px\">{tokenData.symbol}</Text>}\n          {!isXs && !isSm && (\n            <Flex marginLeft=\"10px\">\n              <Text>{tokenData.name}</Text>\n              <Text ml=\"8px\">({tokenData.symbol})</Text>\n            </Flex>\n          )}\n        </Flex>\n        <Text fontWeight={400}>${formatAmount(tokenData.priceUSD, { notation: 'standard' })}</Text>\n        <Text fontWeight={400}>\n          <Percent value={tokenData.priceUSDChange} fontWeight={400} />\n        </Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.volumeUSD)}</Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\nconst SORT_FIELD = {\n  name: 'name',\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  priceUSD: 'priceUSD',\n  priceUSDChange: 'priceUSDChange',\n  priceUSDChangeWeek: 'priceUSDChangeWeek',\n}\n\nconst MAX_ITEMS = 10\n\nconst TokenTable: React.FC<{\n  tokenDatas: TokenData[] | undefined\n  maxItems?: number\n}> = ({ tokenDatas, maxItems = MAX_ITEMS }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (tokenDatas) {\n      if (tokenDatas.length % maxItems === 0) {\n        extraPages = 0\n      }\n      setMaxPage(Math.floor(tokenDatas.length / maxItems) + extraPages)\n    }\n  }, [maxItems, tokenDatas])\n\n  const sortedTokens = useMemo(() => {\n    return tokenDatas\n      ? tokenDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof TokenData] > b[sortField as keyof TokenData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(maxItems * (page - 1), page * maxItems)\n      : []\n  }, [tokenDatas, maxItems, page, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  if (!tokenDatas) {\n    return <Skeleton />\n  }\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.name)}\n          textTransform=\"uppercase\"\n        >\n          {t('Name')} {arrow(SORT_FIELD.name)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price')} {arrow(SORT_FIELD.priceUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSDChange)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price Change')} {arrow(SORT_FIELD.priceUSDChange)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n\n      <Break />\n      {sortedTokens.length > 0 ? (\n        <>\n          {sortedTokens.map((data, i) => {\n            if (data) {\n              return (\n                <React.Fragment key={data.address}>\n                  <DataRow index={(page - 1) * MAX_ITEMS + i} tokenData={data} />\n                  <Break />\n                </React.Fragment>\n              )\n            }\n            return null\n          })}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default TokenTable\n","import React, { useCallback, useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { PoolData } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\n *  3 = | # | Pool |     | Volume 24H |           |\n *  2 = |   | Pool |     | Volume 24H |           |\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\n\n  padding: 0 24px;\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\n    & :nth-child(4),\n    & :nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\n    & :nth-child(4),\n    & :nth-child(5),\n    & :nth-child(6),\n    & :nth-child(7) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 480px) {\n    grid-template-columns: 2.5fr repeat(1, 1fr);\n    > *:nth-child(1) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(Link)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst SORT_FIELD = {\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  volumeUSDWeek: 'volumeUSDWeek',\n  lpFees24h: 'lpFees24h',\n  lpApr7d: 'lpApr7d',\n}\n\nconst LoadingRow: React.FC = () => (\n  <ResponsiveGrid>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </ResponsiveGrid>\n)\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\n  return (\n    <LinkWrapper to={`/info/pool/${poolData.address}`}>\n      <ResponsiveGrid>\n        <Text>{index + 1}</Text>\n        <Flex>\n          <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} />\n          <Text ml=\"8px\">\n            {poolData.token0.symbol}/{poolData.token1.symbol}\n          </Text>\n        </Flex>\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\ninterface PoolTableProps {\n  poolDatas: PoolData[]\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\n}\n\nconst PoolTable: React.FC<PoolTableProps> = ({ poolDatas, loading }) => {\n  // for sorting\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  // pagination\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n      extraPages = 0\n    }\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\n  }, [poolDatas])\n\n  const sortedPools = useMemo(() => {\n    return poolDatas\n      ? poolDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [page, poolDatas, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Pool')}\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n      <Break />\n      {sortedPools.length > 0 ? (\n        <>\n          {sortedPools.map((poolData, i) => {\n            if (poolData) {\n              return (\n                <React.Fragment key={poolData.address}>\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\n                  <Break />\n                </React.Fragment>\n              )\n            }\n            return null\n          })}\n          {loading && <LoadingRow />}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          {/* spacer */}\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default PoolTable\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Bar } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { BarChartLoader } from 'views/Info/components/ChartLoaders'\nimport { useTranslation } from 'contexts/Localization'\n\nexport type LineChartProps = {\n  data: any[]\n  height?: string\n  chartHeight?: string\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CustomBar = ({\n  x,\n  y,\n  width,\n  height,\n  fill,\n}: {\n  x: number\n  y: number\n  width: number\n  height: number\n  fill: string\n}) => {\n  return (\n    <g>\n      <rect x={x} y={y} fill={fill} width={width} height={height} rx=\"2\" />\n    </g>\n  )\n}\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(payload.time.toLocaleString(locale, { year: 'numeric', day: 'numeric', month: 'short' }))\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\nconst Chart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <BarChartLoader />\n  }\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        data={data}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          setHoverDate(undefined)\n          setHoverValue(undefined)\n        }}\n      >\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => time.toLocaleDateString(undefined, { day: '2-digit' })}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          color={theme.colors.textSubtle}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ fill: theme.colors.backgroundDisabled }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater\n              locale={locale}\n              payload={props.payload}\n              setHoverValue={setHoverValue}\n              setHoverDate={setHoverDate}\n            />\n          )}\n        />\n        <Bar\n          dataKey=\"value\"\n          fill={theme.colors.primary}\n          shape={(props) => (\n            <CustomBar height={props.height} width={props.width} x={props.x} y={props.y} fill={theme.colors.primary} />\n          )}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default Chart\n","import React, { useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, Text, Heading, Card, Skeleton } from '@pancakeswap/uikit'\nimport { fromUnixTime } from 'date-fns'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport {\n  useAllPoolData,\n  useAllTokenData,\n  useProtocolChartData,\n  useProtocolData,\n  useProtocolTransactions,\n} from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\n\nexport const ChartCardsContainer = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  padding: 0;\n  gap: 1em;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  } ;\n`\n\nconst Overview: React.FC = () => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const [liquidityHover, setLiquidityHover] = useState<number | undefined>()\n  const [liquidityDateHover, setLiquidityDateHover] = useState<string | undefined>()\n  const [volumeHover, setVolumeHover] = useState<number | undefined>()\n  const [volumeDateHover, setVolumeDateHover] = useState<string | undefined>()\n\n  const [protocolData] = useProtocolData()\n  const [chartData] = useProtocolChartData()\n  const [transactions] = useProtocolTransactions()\n\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\n\n  // Getting latest liquidity and volumeUSD to display on top of chart when not hovered\n  useEffect(() => {\n    if (volumeHover == null && protocolData) {\n      setVolumeHover(protocolData.volumeUSD)\n    }\n  }, [protocolData, volumeHover])\n  useEffect(() => {\n    if (liquidityHover == null && protocolData) {\n      setLiquidityHover(protocolData.liquidityUSD)\n    }\n  }, [liquidityHover, protocolData])\n\n  const formattedLiquidityData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const somePoolsAreLoading = useMemo(() => {\n    return Object.values(allPoolData).some((pool) => !pool.data)\n  }, [allPoolData])\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\n        {t('PancakeSwap Info & Analytics')}\n      </Heading>\n      <ChartCardsContainer>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Liquidity')}\n            </Text>\n            {liquidityHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(liquidityHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{liquidityDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <LineChart\n                data={formattedLiquidityData}\n                setHoverValue={setLiquidityHover}\n                setHoverDate={setLiquidityDateHover}\n              />\n            </Box>\n          </Box>\n        </Card>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Volume 24H')}\n            </Text>\n            {volumeHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(volumeHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{volumeDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <BarChart data={formattedVolumeData} setHoverValue={setVolumeHover} setHoverDate={setVolumeDateHover} />\n            </Box>\n          </Box>\n        </Card>\n      </ChartCardsContainer>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} loading={somePoolsAreLoading} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Transactions')}\n      </Heading>\n      <TransactionTable transactions={transactions} />\n    </Page>\n  )\n}\n\nexport default Overview\n","import React, { useMemo } from 'react'\nimport { Text, Heading, Card } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { useAllPoolData, usePoolDatas } from 'state/info/hooks'\nimport { useWatchlistPools } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\n\nconst PoolsOverview: React.FC = () => {\n  const { t } = useTranslation()\n\n  // get all the pool datas that exist\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const [savedPools] = useWatchlistPools()\n  const watchlistPools = usePoolDatas(savedPools)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      <Card>\n        {watchlistPools.length > 0 ? (\n          <PoolTable poolDatas={watchlistPools} />\n        ) : (\n          <Text px=\"24px\" py=\"16px\">\n            {t('Saved pools will appear here')}\n          </Text>\n        )}\n      </Card>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-pools-title\">\n        {t('All Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} />\n    </Page>\n  )\n}\n\nexport default PoolsOverview\n","import React, { useRef, useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { createChart, IChartApi } from 'lightweight-charts'\nimport { format } from 'date-fns'\nimport useTheme from 'hooks/useTheme'\nimport { CandleChartLoader } from 'views/Info/components/ChartLoaders'\n\nconst CANDLE_CHART_HEIGHT = 250\n\nexport type LineChartProps = {\n  data: any[]\n  setValue?: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setLabel?: Dispatch<SetStateAction<string | undefined>> // used for value label on hover\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CandleChart = ({ data, setValue, setLabel, ...rest }: LineChartProps) => {\n  const { theme } = useTheme()\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const chartRef = useRef<HTMLDivElement>(null)\n  const [chartCreated, setChart] = useState<IChartApi | undefined>()\n\n  const handleResize = useCallback(() => {\n    if (chartCreated && chartRef?.current?.parentElement) {\n      chartCreated.resize(chartRef.current.parentElement.clientWidth - 32, CANDLE_CHART_HEIGHT)\n      chartCreated.timeScale().fitContent()\n      chartCreated.timeScale().scrollToPosition(0, false)\n    }\n  }, [chartCreated, chartRef])\n\n  // add event listener for resize\n  const isClient = typeof window === 'object'\n  useEffect(() => {\n    if (!isClient) {\n      return null\n    }\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [isClient, chartRef, handleResize]) // Empty array ensures that effect is only run on mount and unmount\n\n  // if chart not instantiated in canvas, create it\n  useEffect(() => {\n    if (!chartCreated && data && !!chartRef?.current?.parentElement) {\n      const chart = createChart(chartRef.current, {\n        height: CANDLE_CHART_HEIGHT,\n        width: chartRef.current.parentElement.clientWidth - 32,\n        layout: {\n          backgroundColor: 'transparent',\n          textColor: theme.colors.textSubtle,\n          fontFamily: 'Kanit, sans-serif',\n          fontSize: 12,\n        },\n        rightPriceScale: {\n          scaleMargins: {\n            top: 0.1,\n            bottom: 0.1,\n          },\n          borderVisible: false,\n        },\n        timeScale: {\n          borderVisible: false,\n          secondsVisible: true,\n          tickMarkFormatter: (unixTime: number) => {\n            return format(unixTime * 1000, 'MM/dd h:mm a')\n          },\n        },\n        watermark: {\n          visible: false,\n        },\n        grid: {\n          horzLines: {\n            visible: false,\n          },\n          vertLines: {\n            visible: false,\n          },\n        },\n        crosshair: {\n          horzLine: {\n            visible: false,\n            labelVisible: false,\n          },\n          mode: 1,\n          vertLine: {\n            visible: true,\n            labelVisible: false,\n            style: 3,\n            width: 1,\n            color: theme.colors.textSubtle,\n            labelBackgroundColor: theme.colors.primary,\n          },\n        },\n      })\n\n      chart.timeScale().fitContent()\n      setChart(chart)\n    }\n  }, [chartCreated, data, setValue, theme])\n\n  useEffect(() => {\n    if (chartCreated && data) {\n      const series = chartCreated.addCandlestickSeries({\n        upColor: theme.colors.success,\n        downColor: theme.colors.failure,\n        borderDownColor: theme.colors.failure,\n        borderUpColor: theme.colors.success,\n        wickDownColor: theme.colors.failure,\n        wickUpColor: theme.colors.success,\n      })\n\n      series.setData(data)\n\n      // update the title when hovering on the chart\n      chartCreated.subscribeCrosshairMove((param) => {\n        if (\n          chartRef?.current &&\n          (param === undefined ||\n            param.time === undefined ||\n            (param && param.point && param.point.x < 0) ||\n            (param && param.point && param.point.x > chartRef.current.clientWidth) ||\n            (param && param.point && param.point.y < 0) ||\n            (param && param.point && param.point.y > CANDLE_CHART_HEIGHT))\n        ) {\n          // reset values\n          if (setValue) setValue(undefined)\n          if (setLabel) setLabel(undefined)\n        } else if (series && param) {\n          const timestamp = param.time as number\n          const now = new Date(timestamp * 1000)\n          const time = `${now.toLocaleString(locale, {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: '2-digit',\n            timeZone: 'UTC',\n          })} (UTC)`\n          const parsed = param.seriesPrices.get(series) as { open: number } | undefined\n          if (setValue) setValue(parsed?.open)\n          if (setLabel) setLabel(time)\n        }\n      })\n    }\n  }, [locale, chartCreated, data, setValue, setLabel, theme])\n\n  return (\n    <>\n      {!chartCreated && <CandleChartLoader />}\n      <div ref={chartRef} id=\"candle-chart\" {...rest} />\n    </>\n  )\n}\n\nexport default CandleChart\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from 'react'\nimport { RouteComponentProps, Link } from 'react-router-dom'\nimport {\n  Text,\n  Flex,\n  Box,\n  Button,\n  Card,\n  Breadcrumbs,\n  Heading,\n  Spinner,\n  LinkExternal,\n  useMatchBreakpoints,\n  ButtonMenu,\n  ButtonMenuItem,\n  HelpIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport Page from 'components/Layout/Page'\nimport { getBscScanLink } from 'utils'\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport { usePoolDatas, usePoolChartData, usePoolTransactions } from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport { useWatchlistPools } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\n\nconst ContentLayout = styled.div`\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-gap: 1em;\n  margin-top: 16px;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst TokenButton = styled(Flex)`\n  padding: 8px 0px;\n  margin-right: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst LockedTokensContainer = styled(Flex)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n  padding: 16px;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: 8px;\n  border-radius: 16px;\n  max-width: 280px;\n`\n\nconst PoolPage: React.FC<RouteComponentProps<{ address: string }>> = ({\n  match: {\n    params: { address: routeAddress },\n  },\n}) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n  const [showWeeklyData, setShowWeeklyData] = useState(0)\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {},\n  )\n\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const poolData = usePoolDatas([address])[0]\n  const chartData = usePoolChartData(address)\n  const transactions = usePoolTransactions(address)\n\n  const [watchlistPools, addPoolToWatchlist] = useWatchlistPools()\n\n  return (\n    <Page symbol={poolData ? `${poolData?.token0.symbol} / ${poolData?.token1.symbol}` : null}>\n      {poolData ? (\n        <>\n          <Flex justifyContent=\"space-between\" mb=\"16px\" flexDirection={['column', 'column', 'row']}>\n            <Breadcrumbs mb=\"32px\">\n              <Link to=\"/info\">\n                <Text color=\"primary\">{t('Info')}</Text>\n              </Link>\n              <Link to=\"/info/pools\">\n                <Text color=\"primary\">{t('Pools')}</Text>\n              </Link>\n              <Flex>\n                <Text mr=\"8px\">{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\n              </Flex>\n            </Breadcrumbs>\n            <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n              <LinkExternal mr=\"8px\" href={getBscScanLink(address, 'address')}>\n                {t('View on BscScan')}\n              </LinkExternal>\n              <SaveIcon fill={watchlistPools.includes(address)} onClick={() => addPoolToWatchlist(address)} />\n            </Flex>\n          </Flex>\n          <Flex flexDirection=\"column\">\n            <Flex alignItems=\"center\" mb={['8px', null]}>\n              <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} size={32} />\n              <Text\n                ml=\"38px\"\n                bold\n                fontSize={isXs || isSm ? '24px' : '40px'}\n                id=\"info-pool-pair-title\"\n              >{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection={['column', 'column', 'row']} mb={['8px', '8px', null]}>\n                <Link to={`/info/token/${poolData.token0.address}`}>\n                  <TokenButton>\n                    <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\n                      {`1 ${poolData.token0.symbol} =  ${formatAmount(poolData.token1Price, {\n                        notation: 'standard',\n                        displayThreshold: 0.001,\n                        tokenPrecision: true,\n                      })} ${poolData.token1.symbol}`}\n                    </Text>\n                  </TokenButton>\n                </Link>\n                <Link to={`/info/token/${poolData.token1.address}`}>\n                  <TokenButton ml={[null, null, '10px']}>\n                    <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\n                      {`1 ${poolData.token1.symbol} =  ${formatAmount(poolData.token0Price, {\n                        notation: 'standard',\n                        displayThreshold: 0.001,\n                        tokenPrecision: true,\n                      })} ${poolData.token0.symbol}`}\n                    </Text>\n                  </TokenButton>\n                </Link>\n              </Flex>\n              <Flex>\n                <Link to={`/add/${poolData.token0.address}/${poolData.token1.address}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </Link>\n                <Link to={`/swap?inputCurrency=${poolData.token0.address}&outputCurrency=${poolData.token1.address}`}>\n                  <Button>{t('Trade')}</Button>\n                </Link>\n              </Flex>\n            </Flex>\n          </Flex>\n          <ContentLayout>\n            <Box>\n              <Card>\n                <Box p=\"24px\">\n                  <Flex justifyContent=\"space-between\">\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                        {t('Liquidity')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${formatAmount(poolData.liquidityUSD)}\n                      </Text>\n                      <Percent value={poolData.liquidityUSDChange} />\n                    </Flex>\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                        {t('LP reward APR')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        {formatAmount(poolData.lpApr7d)}%\n                      </Text>\n                      <Flex alignItems=\"center\">\n                        <span ref={targetRef}>\n                          <HelpIcon color=\"textSubtle\" />\n                        </span>\n                        <Text ml=\"4px\" fontSize=\"12px\" color=\"textSubtle\">\n                          {t('7D performance')}\n                        </Text>\n                        {tooltipVisible && tooltip}\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                  <Text color=\"secondary\" bold mt=\"24px\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Total Tokens Locked')}\n                  </Text>\n                  <LockedTokensContainer>\n                    <Flex justifyContent=\"space-between\">\n                      <Flex>\n                        <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\n                        <Text small color=\"textSubtle\" ml=\"8px\">\n                          {poolData.token0.symbol}\n                        </Text>\n                      </Flex>\n                      <Text small>{formatAmount(poolData.liquidityToken0)}</Text>\n                    </Flex>\n                    <Flex justifyContent=\"space-between\">\n                      <Flex>\n                        <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\n                        <Text small color=\"textSubtle\" ml=\"8px\">\n                          {poolData.token1.symbol}\n                        </Text>\n                      </Flex>\n                      <Text small>{formatAmount(poolData.liquidityToken1)}</Text>\n                    </Flex>\n                  </LockedTokensContainer>\n                </Box>\n              </Card>\n              <Card mt=\"16px\">\n                <Flex flexDirection=\"column\" p=\"24px\">\n                  <ButtonMenu\n                    activeIndex={showWeeklyData}\n                    onItemClick={(index) => setShowWeeklyData(index)}\n                    scale=\"sm\"\n                    variant=\"subtle\"\n                  >\n                    <ButtonMenuItem width=\"100%\">{t('24H')}</ButtonMenuItem>\n                    <ButtonMenuItem width=\"100%\">{t('7D')}</ButtonMenuItem>\n                  </ButtonMenu>\n                  <Flex mt=\"24px\">\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n                        {showWeeklyData ? t('Volume 7D') : t('Volume 24H')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${showWeeklyData ? formatAmount(poolData.volumeUSDWeek) : formatAmount(poolData.volumeUSD)}\n                      </Text>\n                      <Percent value={showWeeklyData ? poolData.volumeUSDChangeWeek : poolData.volumeUSDChange} />\n                    </Flex>\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n                        {showWeeklyData ? t('LP reward fees 7D') : t('LP reward fees 24H')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${showWeeklyData ? formatAmount(poolData.lpFees7d) : formatAmount(poolData.lpFees24h)}\n                      </Text>\n                      <Text color=\"textSubtle\" fontSize=\"12px\">\n                        {t('out of $%totalFees% total fees', {\n                          totalFees: showWeeklyData\n                            ? formatAmount(poolData.totalFees7d)\n                            : formatAmount(poolData.totalFees24h),\n                        })}\n                      </Text>\n                    </Flex>\n                  </Flex>\n                </Flex>\n              </Card>\n            </Box>\n            <ChartCard variant=\"pool\" chartData={chartData} />\n          </ContentLayout>\n          <Heading mb=\"16px\" mt=\"40px\" scale=\"lg\">\n            {t('Transactions')}\n          </Heading>\n          <TransactionTable transactions={transactions} />\n        </>\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <Spinner />\n        </Flex>\n      )}\n    </Page>\n  )\n}\n\nexport default PoolPage\n","import React, { useMemo, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Card } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { useAllTokenData } from 'state/info/hooks'\nimport { TokenData } from 'state/info/types'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CardWrapper = styled(Link)`\n  display: inline-block;\n  min-width: 190px;\n  margin-left: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst TopMoverCard = styled(Box)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 16px;\n`\n\nexport const ScrollableRow = styled.div`\n  width: 100%;\n  overflow-x: auto;\n  padding: 16px 0;\n  white-space: nowrap;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst DataCard = ({ tokenData }: { tokenData: TokenData }) => {\n  return (\n    <CardWrapper to={`/info/token/${tokenData.address}`}>\n      <TopMoverCard>\n        <Flex>\n          <Box width=\"32px\" height=\"32px\">\n            {/* wrapped in a box because of alignment issues between img and svg */}\n            <CurrencyLogo address={tokenData.address} size=\"32px\" />\n          </Box>\n          <Box ml=\"16px\">\n            <Text>{tokenData.symbol}</Text>\n            <Flex alignItems=\"center\">\n              <Text fontSize=\"14px\" mr=\"6px\" lineHeight=\"16px\">\n                ${formatAmount(tokenData.priceUSD)}\n              </Text>\n              <Percent fontSize=\"14px\" value={tokenData.priceUSDChange} />\n            </Flex>\n          </Box>\n        </Flex>\n      </TopMoverCard>\n    </CardWrapper>\n  )\n}\n\nconst TopTokenMovers: React.FC = () => {\n  const allTokens = useAllTokenData()\n  const { t } = useTranslation()\n\n  const topPriceIncrease = useMemo(() => {\n    return Object.values(allTokens)\n      .sort(({ data: a }, { data: b }) => {\n        // eslint-disable-next-line no-nested-ternary\n        return a && b ? (Math.abs(a?.priceUSDChange) > Math.abs(b?.priceUSDChange) ? -1 : 1) : -1\n      })\n      .slice(0, Math.min(20, Object.values(allTokens).length))\n  }, [allTokens])\n\n  const increaseRef = useRef<HTMLDivElement>(null)\n  const moveLeftRef = useRef<boolean>(true)\n\n  useEffect(() => {\n    const scrollInterval = setInterval(() => {\n      if (increaseRef.current) {\n        if (increaseRef.current.scrollLeft === increaseRef.current.scrollWidth - increaseRef.current.clientWidth) {\n          moveLeftRef.current = false\n        } else if (increaseRef.current.scrollLeft === 0) {\n          moveLeftRef.current = true\n        }\n        increaseRef.current.scrollTo(\n          moveLeftRef.current ? increaseRef.current.scrollLeft + 1 : increaseRef.current.scrollLeft - 1,\n          0,\n        )\n      }\n    }, 30)\n\n    return () => {\n      clearInterval(scrollInterval)\n    }\n  }, [])\n\n  if (topPriceIncrease.length === 0 || !topPriceIncrease.some((entry) => entry.data)) {\n    return null\n  }\n\n  return (\n    <Card my=\"16px\">\n      <Text ml=\"16px\" mt=\"8px\">\n        {t('Top Movers')}\n      </Text>\n      <ScrollableRow ref={increaseRef}>\n        {topPriceIncrease.map((entry) =>\n          entry.data ? <DataCard key={`top-card-token-${entry.data?.address}`} tokenData={entry.data} /> : null,\n        )}\n      </ScrollableRow>\n    </Card>\n  )\n}\n\nexport default TopTokenMovers\n","import React, { useMemo, useEffect } from 'react'\nimport { Text, Heading, Card } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport { useAllTokenData, useTokenDatas } from 'state/info/hooks'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport TopTokenMovers from 'views/Info/components/TopTokenMovers'\n\nconst TokensOverview: React.FC = () => {\n  const { t } = useTranslation()\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const [savedTokens] = useWatchlistTokens()\n  const watchListTokens = useTokenDatas(savedTokens)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      {savedTokens.length > 0 ? (\n        <TokenTable tokenDatas={watchListTokens} />\n      ) : (\n        <Card>\n          <Text py=\"16px\" px=\"24px\">\n            {t('Saved tokens will appear here')}\n          </Text>\n        </Card>\n      )}\n      <TopTokenMovers />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-tokens-title\">\n        {t('All Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n    </Page>\n  )\n}\n\nexport default TokensOverview\n","import { useState, useEffect } from 'react'\n\n// endpoint to check asset exists and get url to CMC page\n// returns 400 status code if token is not on CMC\nconst CMC_ENDPOINT = 'https://3rdparty-apis.coinmarketcap.com/v1/cryptocurrency/contract?address='\n\n/**\n * Check if asset exists on CMC, if exists\n * return  url, if not return undefined\n * @param address token address (all lowercase, checksummed are not supported by CMC)\n */\nconst useCMCLink = (address: string): string | undefined => {\n  const [cmcPageUrl, setCMCPageUrl] = useState<string | undefined>(undefined)\n\n  useEffect(() => {\n    const fetchLink = async () => {\n      const result = await fetch(`${CMC_ENDPOINT}${address}`)\n      // if link exists, format the url\n      if (result.status === 200) {\n        result.json().then(({ data }) => {\n          setCMCPageUrl(data.url)\n        })\n      }\n    }\n    if (address) {\n      fetchLink()\n    }\n  }, [address])\n\n  return cmcPageUrl\n}\n\nexport default useCMCLink\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useMemo } from 'react'\nimport { RouteComponentProps, Link } from 'react-router-dom'\nimport { Duration } from 'date-fns'\nimport styled from 'styled-components'\nimport {\n  Text,\n  Box,\n  Heading,\n  Button,\n  Card,\n  Flex,\n  Breadcrumbs,\n  Link as UIKitLink,\n  LinkExternal,\n  Spinner,\n  Image,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport useCMCLink from 'views/Info/hooks/useCMCLink'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport {\n  usePoolDatas,\n  useTokenData,\n  usePoolsForToken,\n  useTokenChartData,\n  useTokenPriceData,\n  useTokenTransactions,\n} from 'state/info/hooks'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport { ONE_HOUR_SECONDS } from 'config/constants/info'\nimport { useTranslation } from 'contexts/Localization'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\n\nconst ContentLayout = styled.div`\n  margin-top: 16px;\n  display: grid;\n  grid-template-columns: 260px 1fr;\n  grid-gap: 1em;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst StyledCMCLink = styled(UIKitLink)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n\n  & :hover {\n    opacity: 0.8;\n  }\n`\nconst DEFAULT_TIME_WINDOW: Duration = { weeks: 1 }\n\nconst TokenPage: React.FC<RouteComponentProps<{ address: string }>> = ({\n  match: {\n    params: { address: routeAddress },\n  },\n}) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const cmcLink = useCMCLink(address)\n\n  const tokenData = useTokenData(address)\n  const poolsForToken = usePoolsForToken(address)\n  const poolDatas = usePoolDatas(poolsForToken ?? [])\n  const transactions = useTokenTransactions(address)\n  const chartData = useTokenChartData(address)\n\n  // pricing data\n  const priceData = useTokenPriceData(address, ONE_HOUR_SECONDS, DEFAULT_TIME_WINDOW)\n  const adjustedPriceData = useMemo(() => {\n    // Include latest available price\n    if (priceData && tokenData && priceData.length > 0) {\n      return [\n        ...priceData,\n        {\n          time: new Date().getTime() / 1000,\n          open: priceData[priceData.length - 1].close,\n          close: tokenData?.priceUSD,\n          high: tokenData?.priceUSD,\n          low: priceData[priceData.length - 1].close,\n        },\n      ]\n    }\n    return undefined\n  }, [priceData, tokenData])\n\n  const [watchlistTokens, addWatchlistToken] = useWatchlistTokens()\n\n  return (\n    <Page symbol={tokenData?.symbol}>\n      {tokenData ? (\n        !tokenData.exists ? (\n          <Card>\n            <Box p=\"16px\">\n              <Text>\n                {t('No pool has been created with this token yet. Create one')}\n                <Link style={{ display: 'inline', marginLeft: '6px' }} to={`/add/${address}`}>\n                  {t('here.')}\n                </Link>\n              </Text>\n            </Box>\n          </Card>\n        ) : (\n          <>\n            {/* Stuff on top */}\n            <Flex justifyContent=\"space-between\" mb=\"24px\" flexDirection={['column', 'column', 'row']}>\n              <Breadcrumbs mb=\"32px\">\n                <Link to=\"/info\">\n                  <Text color=\"primary\">{t('Info')}</Text>\n                </Link>\n                <Link to=\"/info/tokens\">\n                  <Text color=\"primary\">{t('Tokens')}</Text>\n                </Link>\n                <Flex>\n                  <Text mr=\"8px\">{tokenData.symbol}</Text>\n                  <Text>{`(${truncateHash(address)})`}</Text>\n                </Flex>\n              </Breadcrumbs>\n              <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n                <LinkExternal mr=\"8px\" color=\"primary\" href={getBscScanLink(address, 'address')}>\n                  {t('View on BscScan')}\n                </LinkExternal>\n                {cmcLink && (\n                  <StyledCMCLink href={cmcLink} rel=\"noopener noreferrer nofollow\" target=\"_blank\">\n                    <Image src=\"/images/CMC-logo.svg\" height={22} width={22} alt={t('View token on CoinMarketCap')} />\n                  </StyledCMCLink>\n                )}\n                <SaveIcon fill={watchlistTokens.includes(address)} onClick={() => addWatchlistToken(address)} />\n              </Flex>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection=\"column\" mb={['8px', null]}>\n                <Flex alignItems=\"center\">\n                  <CurrencyLogo size=\"32px\" address={address} />\n                  <Text\n                    ml=\"12px\"\n                    bold\n                    lineHeight=\"0.7\"\n                    fontSize={isXs || isSm ? '24px' : '40px'}\n                    id=\"info-token-name-title\"\n                  >\n                    {tokenData.name}\n                  </Text>\n                  <Text ml=\"12px\" lineHeight=\"1\" color=\"textSubtle\" fontSize={isXs || isSm ? '14px' : '20px'}>\n                    ({tokenData.symbol})\n                  </Text>\n                </Flex>\n                <Flex mt=\"8px\" ml=\"46px\" alignItems=\"center\">\n                  <Text mr=\"16px\" bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.priceUSD, { notation: 'standard' })}\n                  </Text>\n                  <Percent value={tokenData.priceUSDChange} fontWeight={600} />\n                </Flex>\n              </Flex>\n              <Flex>\n                <Link to={`/add/${address}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </Link>\n                <Link to={`/swap?inputCurrency=${address}`}>\n                  <Button>{t('Trade')}</Button>\n                </Link>\n              </Flex>\n            </Flex>\n\n            {/* data on the right side of chart */}\n            <ContentLayout>\n              <Card>\n                <Box p=\"24px\">\n                  <Text bold small color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Liquidity')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.liquidityUSD)}\n                  </Text>\n                  <Percent value={tokenData.liquidityUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\" textTransform=\"uppercase\">\n                    ${formatAmount(tokenData.volumeUSD)}\n                  </Text>\n                  <Percent value={tokenData.volumeUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 7D')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.volumeUSDWeek)}\n                  </Text>\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Transactions 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    {formatAmount(tokenData.txCount, { isInteger: true })}\n                  </Text>\n                </Box>\n              </Card>\n              {/* charts card */}\n              <ChartCard\n                variant=\"token\"\n                chartData={chartData}\n                tokenData={tokenData}\n                tokenPriceData={adjustedPriceData}\n              />\n            </ContentLayout>\n\n            {/* pools and transaction tables */}\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Pools')}\n            </Heading>\n\n            <PoolTable poolDatas={poolDatas} />\n\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Transactions')}\n            </Heading>\n\n            <TransactionTable transactions={transactions} />\n          </>\n        )\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <Spinner />\n        </Flex>\n      )}\n    </Page>\n  )\n}\n\nexport default TokenPage\n","import React from 'react'\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\nimport { isAddress } from 'ethers/lib/utils'\nimport TokenPage from './TokenPage'\n\nconst RedirectInvalidToken = (props: RouteComponentProps<{ address: string }>) => {\n  const {\n    match: {\n      params: { address },\n    },\n  } = props\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  if (!isAddress(address.toLowerCase())) {\n    return <Redirect to=\"/\" />\n  }\n  return <TokenPage {...props} />\n}\n\nexport default RedirectInvalidToken\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { PoolUpdater, ProtocolUpdater, TokenUpdater } from 'state/info/updaters'\nimport InfoNav from './components/InfoNav'\nimport Overview from './Overview'\nimport Pools from './Pools'\nimport PoolPage from './Pools/PoolPage'\nimport Tokens from './Tokens'\nimport RedirectInvalidToken from './Tokens/redirects'\n\nconst Info: React.FC = () => {\n  return (\n    <>\n      <ProtocolUpdater />\n      <PoolUpdater />\n      <TokenUpdater />\n      <InfoNav />\n      <Route path=\"/info\" exact>\n        <Overview />\n      </Route>\n      <Route path=\"/info/pools\" exact>\n        <Pools />\n      </Route>\n      <Route path=\"/info/tokens\" exact>\n        <Tokens />\n      </Route>\n      <Route exact path={['/info/tokens/:address', '/info/token/:address']} component={RedirectInvalidToken} />\n      <Route exact path={['/info/pools/:address', '/info/pool/:address', '/info/pair/:address']} component={PoolPage} />\n    </>\n  )\n}\n\nexport default Info\n","import React from 'react'\nimport { Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst Wrapper = styled(Flex)`\n  overflow-x: scroll;\n  padding: 0;\n  border-radius: 24px 24px 0 0;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  scrollbar-width: none; /* Firefox */\n`\n\nconst Inner = styled(Flex)`\n  justify-content: space-between;\n  background-color: ${({ theme }) => theme.colors.input};\n  width: 100%;\n`\n\ninterface TabProps {\n  isActive?: boolean\n  onClick?: () => void\n}\n\nexport const TabToggle = styled.button<TabProps>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  flex: 1;\n  border: 0;\n  outline: 0;\n  padding: 16px;\n  margin: 0;\n  border-radius: 24px 24px 0 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: ${({ theme, isActive }) => (isActive ? theme.colors.text : theme.colors.textSubtle)};\n  background-color: ${({ theme, isActive }) => (isActive ? theme.card.background : theme.colors.input)};\n`\n\ninterface TabToggleGroupProps {\n  children: React.ReactElement[]\n}\n\nexport const TabToggleGroup: React.FC<TabToggleGroupProps> = ({ children }) => {\n  return (\n    <Wrapper p={['0 4px', '0 16px']}>\n      <Inner>{children}</Inner>\n    </Wrapper>\n  )\n}\n"],"sourceRoot":""}